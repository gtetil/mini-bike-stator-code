

Microchip Technology PIC PRO Macro Assembler V1.44 build -154322312 
                                                                                               Sun Jan 27 13:22:26 2019

Microchip Technology Omniscient Code Generator v1.44 (PRO mode) build 201709140600
     1                           	processor	16F1936
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
    10                           	psect	cinit,global,class=CODE,merge=1,delta=2
    11                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    19                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    20                           	psect	clrtext,global,class=CODE,delta=2
    21                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    22                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    23                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    24                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	swtext1,local,class=CONST,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text41,local,class=CODE,merge=1,delta=2
    29                           	psect	swtext2,local,class=CONST,delta=2
    30                           	psect	intentry,global,class=CODE,delta=2
    31                           	psect	swtext3,local,class=CONST,delta=2
    32                           	psect	swtext4,local,class=CONST,delta=2
    33                           	psect	text58,local,class=CODE,merge=1,delta=2
    34                           	psect	text59,local,class=CODE,merge=1,delta=2
    35                           	psect	pa_nodes0,global,class=CODE,delta=2
    36                           	dabs	1,0x7E,2
    37  0000                     
    38                           ; Version 1.44
    39                           ; Generated 14/09/2017 GMT
    40                           ; 
    41                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC16F1936 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     	;# 
    73  0001                     	;# 
    74  0002                     	;# 
    75  0003                     	;# 
    76  0004                     	;# 
    77  0005                     	;# 
    78  0006                     	;# 
    79  0007                     	;# 
    80  0008                     	;# 
    81  0009                     	;# 
    82  000A                     	;# 
    83  000B                     	;# 
    84  000C                     	;# 
    85  000D                     	;# 
    86  000E                     	;# 
    87  0010                     	;# 
    88  0011                     	;# 
    89  0012                     	;# 
    90  0013                     	;# 
    91  0015                     	;# 
    92  0016                     	;# 
    93  0016                     	;# 
    94  0017                     	;# 
    95  0018                     	;# 
    96  0019                     	;# 
    97  001A                     	;# 
    98  001B                     	;# 
    99  001C                     	;# 
   100  001E                     	;# 
   101  001F                     	;# 
   102  008C                     	;# 
   103  008D                     	;# 
   104  008E                     	;# 
   105  0090                     	;# 
   106  0091                     	;# 
   107  0092                     	;# 
   108  0093                     	;# 
   109  0095                     	;# 
   110  0096                     	;# 
   111  0097                     	;# 
   112  0098                     	;# 
   113  0099                     	;# 
   114  009A                     	;# 
   115  009B                     	;# 
   116  009B                     	;# 
   117  009C                     	;# 
   118  009D                     	;# 
   119  009E                     	;# 
   120  010C                     	;# 
   121  010D                     	;# 
   122  010E                     	;# 
   123  0110                     	;# 
   124  0111                     	;# 
   125  0112                     	;# 
   126  0113                     	;# 
   127  0114                     	;# 
   128  0115                     	;# 
   129  0116                     	;# 
   130  0117                     	;# 
   131  0118                     	;# 
   132  0119                     	;# 
   133  011A                     	;# 
   134  011B                     	;# 
   135  011D                     	;# 
   136  018C                     	;# 
   137  018D                     	;# 
   138  0191                     	;# 
   139  0191                     	;# 
   140  0192                     	;# 
   141  0193                     	;# 
   142  0193                     	;# 
   143  0193                     	;# 
   144  0194                     	;# 
   145  0195                     	;# 
   146  0196                     	;# 
   147  0199                     	;# 
   148  019A                     	;# 
   149  019B                     	;# 
   150  019B                     	;# 
   151  019B                     	;# 
   152  019B                     	;# 
   153  019C                     	;# 
   154  019C                     	;# 
   155  019D                     	;# 
   156  019E                     	;# 
   157  019F                     	;# 
   158  020D                     	;# 
   159  0210                     	;# 
   160  0211                     	;# 
   161  0212                     	;# 
   162  0213                     	;# 
   163  0214                     	;# 
   164  0215                     	;# 
   165  0215                     	;# 
   166  0216                     	;# 
   167  0217                     	;# 
   168  0291                     	;# 
   169  0291                     	;# 
   170  0292                     	;# 
   171  0293                     	;# 
   172  0294                     	;# 
   173  0295                     	;# 
   174  0295                     	;# 
   175  0296                     	;# 
   176  0298                     	;# 
   177  0298                     	;# 
   178  0299                     	;# 
   179  029A                     	;# 
   180  029B                     	;# 
   181  029C                     	;# 
   182  029C                     	;# 
   183  029D                     	;# 
   184  029E                     	;# 
   185  029F                     	;# 
   186  0311                     	;# 
   187  0311                     	;# 
   188  0312                     	;# 
   189  0313                     	;# 
   190  0314                     	;# 
   191  0315                     	;# 
   192  0315                     	;# 
   193  0316                     	;# 
   194  0318                     	;# 
   195  0318                     	;# 
   196  0319                     	;# 
   197  031A                     	;# 
   198  031C                     	;# 
   199  031C                     	;# 
   200  031D                     	;# 
   201  031E                     	;# 
   202  0394                     	;# 
   203  0395                     	;# 
   204  0396                     	;# 
   205  0415                     	;# 
   206  0416                     	;# 
   207  0417                     	;# 
   208  041C                     	;# 
   209  041D                     	;# 
   210  041E                     	;# 
   211  0791                     	;# 
   212  0792                     	;# 
   213  0793                     	;# 
   214  0794                     	;# 
   215  0795                     	;# 
   216  0798                     	;# 
   217  0799                     	;# 
   218  07A0                     	;# 
   219  07A1                     	;# 
   220  07A3                     	;# 
   221  07A4                     	;# 
   222  07A6                     	;# 
   223  07A7                     	;# 
   224  07A9                     	;# 
   225  07AA                     	;# 
   226  0FE4                     	;# 
   227  0FE5                     	;# 
   228  0FE6                     	;# 
   229  0FE7                     	;# 
   230  0FE8                     	;# 
   231  0FE9                     	;# 
   232  0FEA                     	;# 
   233  0FEB                     	;# 
   234  0FED                     	;# 
   235  0FEE                     	;# 
   236  0FEF                     	;# 
   237  0000                     	;# 
   238  0001                     	;# 
   239  0002                     	;# 
   240  0003                     	;# 
   241  0004                     	;# 
   242  0005                     	;# 
   243  0006                     	;# 
   244  0007                     	;# 
   245  0008                     	;# 
   246  0009                     	;# 
   247  000A                     	;# 
   248  000B                     	;# 
   249  000C                     	;# 
   250  000D                     	;# 
   251  000E                     	;# 
   252  0010                     	;# 
   253  0011                     	;# 
   254  0012                     	;# 
   255  0013                     	;# 
   256  0015                     	;# 
   257  0016                     	;# 
   258  0016                     	;# 
   259  0017                     	;# 
   260  0018                     	;# 
   261  0019                     	;# 
   262  001A                     	;# 
   263  001B                     	;# 
   264  001C                     	;# 
   265  001E                     	;# 
   266  001F                     	;# 
   267  008C                     	;# 
   268  008D                     	;# 
   269  008E                     	;# 
   270  0090                     	;# 
   271  0091                     	;# 
   272  0092                     	;# 
   273  0093                     	;# 
   274  0095                     	;# 
   275  0096                     	;# 
   276  0097                     	;# 
   277  0098                     	;# 
   278  0099                     	;# 
   279  009A                     	;# 
   280  009B                     	;# 
   281  009B                     	;# 
   282  009C                     	;# 
   283  009D                     	;# 
   284  009E                     	;# 
   285  010C                     	;# 
   286  010D                     	;# 
   287  010E                     	;# 
   288  0110                     	;# 
   289  0111                     	;# 
   290  0112                     	;# 
   291  0113                     	;# 
   292  0114                     	;# 
   293  0115                     	;# 
   294  0116                     	;# 
   295  0117                     	;# 
   296  0118                     	;# 
   297  0119                     	;# 
   298  011A                     	;# 
   299  011B                     	;# 
   300  011D                     	;# 
   301  018C                     	;# 
   302  018D                     	;# 
   303  0191                     	;# 
   304  0191                     	;# 
   305  0192                     	;# 
   306  0193                     	;# 
   307  0193                     	;# 
   308  0193                     	;# 
   309  0194                     	;# 
   310  0195                     	;# 
   311  0196                     	;# 
   312  0199                     	;# 
   313  019A                     	;# 
   314  019B                     	;# 
   315  019B                     	;# 
   316  019B                     	;# 
   317  019B                     	;# 
   318  019C                     	;# 
   319  019C                     	;# 
   320  019D                     	;# 
   321  019E                     	;# 
   322  019F                     	;# 
   323  020D                     	;# 
   324  0210                     	;# 
   325  0211                     	;# 
   326  0212                     	;# 
   327  0213                     	;# 
   328  0214                     	;# 
   329  0215                     	;# 
   330  0215                     	;# 
   331  0216                     	;# 
   332  0217                     	;# 
   333  0291                     	;# 
   334  0291                     	;# 
   335  0292                     	;# 
   336  0293                     	;# 
   337  0294                     	;# 
   338  0295                     	;# 
   339  0295                     	;# 
   340  0296                     	;# 
   341  0298                     	;# 
   342  0298                     	;# 
   343  0299                     	;# 
   344  029A                     	;# 
   345  029B                     	;# 
   346  029C                     	;# 
   347  029C                     	;# 
   348  029D                     	;# 
   349  029E                     	;# 
   350  029F                     	;# 
   351  0311                     	;# 
   352  0311                     	;# 
   353  0312                     	;# 
   354  0313                     	;# 
   355  0314                     	;# 
   356  0315                     	;# 
   357  0315                     	;# 
   358  0316                     	;# 
   359  0318                     	;# 
   360  0318                     	;# 
   361  0319                     	;# 
   362  031A                     	;# 
   363  031C                     	;# 
   364  031C                     	;# 
   365  031D                     	;# 
   366  031E                     	;# 
   367  0394                     	;# 
   368  0395                     	;# 
   369  0396                     	;# 
   370  0415                     	;# 
   371  0416                     	;# 
   372  0417                     	;# 
   373  041C                     	;# 
   374  041D                     	;# 
   375  041E                     	;# 
   376  0791                     	;# 
   377  0792                     	;# 
   378  0793                     	;# 
   379  0794                     	;# 
   380  0795                     	;# 
   381  0798                     	;# 
   382  0799                     	;# 
   383  07A0                     	;# 
   384  07A1                     	;# 
   385  07A3                     	;# 
   386  07A4                     	;# 
   387  07A6                     	;# 
   388  07A7                     	;# 
   389  07A9                     	;# 
   390  07AA                     	;# 
   391  0FE4                     	;# 
   392  0FE5                     	;# 
   393  0FE6                     	;# 
   394  0FE7                     	;# 
   395  0FE8                     	;# 
   396  0FE9                     	;# 
   397  0FEA                     	;# 
   398  0FEB                     	;# 
   399  0FED                     	;# 
   400  0FEE                     	;# 
   401  0FEF                     	;# 
   402  0000                     	;# 
   403  0001                     	;# 
   404  0002                     	;# 
   405  0003                     	;# 
   406  0004                     	;# 
   407  0005                     	;# 
   408  0006                     	;# 
   409  0007                     	;# 
   410  0008                     	;# 
   411  0009                     	;# 
   412  000A                     	;# 
   413  000B                     	;# 
   414  000C                     	;# 
   415  000D                     	;# 
   416  000E                     	;# 
   417  0010                     	;# 
   418  0011                     	;# 
   419  0012                     	;# 
   420  0013                     	;# 
   421  0015                     	;# 
   422  0016                     	;# 
   423  0016                     	;# 
   424  0017                     	;# 
   425  0018                     	;# 
   426  0019                     	;# 
   427  001A                     	;# 
   428  001B                     	;# 
   429  001C                     	;# 
   430  001E                     	;# 
   431  001F                     	;# 
   432  008C                     	;# 
   433  008D                     	;# 
   434  008E                     	;# 
   435  0090                     	;# 
   436  0091                     	;# 
   437  0092                     	;# 
   438  0093                     	;# 
   439  0095                     	;# 
   440  0096                     	;# 
   441  0097                     	;# 
   442  0098                     	;# 
   443  0099                     	;# 
   444  009A                     	;# 
   445  009B                     	;# 
   446  009B                     	;# 
   447  009C                     	;# 
   448  009D                     	;# 
   449  009E                     	;# 
   450  010C                     	;# 
   451  010D                     	;# 
   452  010E                     	;# 
   453  0110                     	;# 
   454  0111                     	;# 
   455  0112                     	;# 
   456  0113                     	;# 
   457  0114                     	;# 
   458  0115                     	;# 
   459  0116                     	;# 
   460  0117                     	;# 
   461  0118                     	;# 
   462  0119                     	;# 
   463  011A                     	;# 
   464  011B                     	;# 
   465  011D                     	;# 
   466  018C                     	;# 
   467  018D                     	;# 
   468  0191                     	;# 
   469  0191                     	;# 
   470  0192                     	;# 
   471  0193                     	;# 
   472  0193                     	;# 
   473  0193                     	;# 
   474  0194                     	;# 
   475  0195                     	;# 
   476  0196                     	;# 
   477  0199                     	;# 
   478  019A                     	;# 
   479  019B                     	;# 
   480  019B                     	;# 
   481  019B                     	;# 
   482  019B                     	;# 
   483  019C                     	;# 
   484  019C                     	;# 
   485  019D                     	;# 
   486  019E                     	;# 
   487  019F                     	;# 
   488  020D                     	;# 
   489  0210                     	;# 
   490  0211                     	;# 
   491  0212                     	;# 
   492  0213                     	;# 
   493  0214                     	;# 
   494  0215                     	;# 
   495  0215                     	;# 
   496  0216                     	;# 
   497  0217                     	;# 
   498  0291                     	;# 
   499  0291                     	;# 
   500  0292                     	;# 
   501  0293                     	;# 
   502  0294                     	;# 
   503  0295                     	;# 
   504  0295                     	;# 
   505  0296                     	;# 
   506  0298                     	;# 
   507  0298                     	;# 
   508  0299                     	;# 
   509  029A                     	;# 
   510  029B                     	;# 
   511  029C                     	;# 
   512  029C                     	;# 
   513  029D                     	;# 
   514  029E                     	;# 
   515  029F                     	;# 
   516  0311                     	;# 
   517  0311                     	;# 
   518  0312                     	;# 
   519  0313                     	;# 
   520  0314                     	;# 
   521  0315                     	;# 
   522  0315                     	;# 
   523  0316                     	;# 
   524  0318                     	;# 
   525  0318                     	;# 
   526  0319                     	;# 
   527  031A                     	;# 
   528  031C                     	;# 
   529  031C                     	;# 
   530  031D                     	;# 
   531  031E                     	;# 
   532  0394                     	;# 
   533  0395                     	;# 
   534  0396                     	;# 
   535  0415                     	;# 
   536  0416                     	;# 
   537  0417                     	;# 
   538  041C                     	;# 
   539  041D                     	;# 
   540  041E                     	;# 
   541  0791                     	;# 
   542  0792                     	;# 
   543  0793                     	;# 
   544  0794                     	;# 
   545  0795                     	;# 
   546  0798                     	;# 
   547  0799                     	;# 
   548  07A0                     	;# 
   549  07A1                     	;# 
   550  07A3                     	;# 
   551  07A4                     	;# 
   552  07A6                     	;# 
   553  07A7                     	;# 
   554  07A9                     	;# 
   555  07AA                     	;# 
   556  0FE4                     	;# 
   557  0FE5                     	;# 
   558  0FE6                     	;# 
   559  0FE7                     	;# 
   560  0FE8                     	;# 
   561  0FE9                     	;# 
   562  0FEA                     	;# 
   563  0FEB                     	;# 
   564  0FED                     	;# 
   565  0FEE                     	;# 
   566  0FEF                     	;# 
   567  0000                     	;# 
   568  0001                     	;# 
   569  0002                     	;# 
   570  0003                     	;# 
   571  0004                     	;# 
   572  0005                     	;# 
   573  0006                     	;# 
   574  0007                     	;# 
   575  0008                     	;# 
   576  0009                     	;# 
   577  000A                     	;# 
   578  000B                     	;# 
   579  000C                     	;# 
   580  000D                     	;# 
   581  000E                     	;# 
   582  0010                     	;# 
   583  0011                     	;# 
   584  0012                     	;# 
   585  0013                     	;# 
   586  0015                     	;# 
   587  0016                     	;# 
   588  0016                     	;# 
   589  0017                     	;# 
   590  0018                     	;# 
   591  0019                     	;# 
   592  001A                     	;# 
   593  001B                     	;# 
   594  001C                     	;# 
   595  001E                     	;# 
   596  001F                     	;# 
   597  008C                     	;# 
   598  008D                     	;# 
   599  008E                     	;# 
   600  0090                     	;# 
   601  0091                     	;# 
   602  0092                     	;# 
   603  0093                     	;# 
   604  0095                     	;# 
   605  0096                     	;# 
   606  0097                     	;# 
   607  0098                     	;# 
   608  0099                     	;# 
   609  009A                     	;# 
   610  009B                     	;# 
   611  009B                     	;# 
   612  009C                     	;# 
   613  009D                     	;# 
   614  009E                     	;# 
   615  010C                     	;# 
   616  010D                     	;# 
   617  010E                     	;# 
   618  0110                     	;# 
   619  0111                     	;# 
   620  0112                     	;# 
   621  0113                     	;# 
   622  0114                     	;# 
   623  0115                     	;# 
   624  0116                     	;# 
   625  0117                     	;# 
   626  0118                     	;# 
   627  0119                     	;# 
   628  011A                     	;# 
   629  011B                     	;# 
   630  011D                     	;# 
   631  018C                     	;# 
   632  018D                     	;# 
   633  0191                     	;# 
   634  0191                     	;# 
   635  0192                     	;# 
   636  0193                     	;# 
   637  0193                     	;# 
   638  0193                     	;# 
   639  0194                     	;# 
   640  0195                     	;# 
   641  0196                     	;# 
   642  0199                     	;# 
   643  019A                     	;# 
   644  019B                     	;# 
   645  019B                     	;# 
   646  019B                     	;# 
   647  019B                     	;# 
   648  019C                     	;# 
   649  019C                     	;# 
   650  019D                     	;# 
   651  019E                     	;# 
   652  019F                     	;# 
   653  020D                     	;# 
   654  0210                     	;# 
   655  0211                     	;# 
   656  0212                     	;# 
   657  0213                     	;# 
   658  0214                     	;# 
   659  0215                     	;# 
   660  0215                     	;# 
   661  0216                     	;# 
   662  0217                     	;# 
   663  0291                     	;# 
   664  0291                     	;# 
   665  0292                     	;# 
   666  0293                     	;# 
   667  0294                     	;# 
   668  0295                     	;# 
   669  0295                     	;# 
   670  0296                     	;# 
   671  0298                     	;# 
   672  0298                     	;# 
   673  0299                     	;# 
   674  029A                     	;# 
   675  029B                     	;# 
   676  029C                     	;# 
   677  029C                     	;# 
   678  029D                     	;# 
   679  029E                     	;# 
   680  029F                     	;# 
   681  0311                     	;# 
   682  0311                     	;# 
   683  0312                     	;# 
   684  0313                     	;# 
   685  0314                     	;# 
   686  0315                     	;# 
   687  0315                     	;# 
   688  0316                     	;# 
   689  0318                     	;# 
   690  0318                     	;# 
   691  0319                     	;# 
   692  031A                     	;# 
   693  031C                     	;# 
   694  031C                     	;# 
   695  031D                     	;# 
   696  031E                     	;# 
   697  0394                     	;# 
   698  0395                     	;# 
   699  0396                     	;# 
   700  0415                     	;# 
   701  0416                     	;# 
   702  0417                     	;# 
   703  041C                     	;# 
   704  041D                     	;# 
   705  041E                     	;# 
   706  0791                     	;# 
   707  0792                     	;# 
   708  0793                     	;# 
   709  0794                     	;# 
   710  0795                     	;# 
   711  0798                     	;# 
   712  0799                     	;# 
   713  07A0                     	;# 
   714  07A1                     	;# 
   715  07A3                     	;# 
   716  07A4                     	;# 
   717  07A6                     	;# 
   718  07A7                     	;# 
   719  07A9                     	;# 
   720  07AA                     	;# 
   721  0FE4                     	;# 
   722  0FE5                     	;# 
   723  0FE6                     	;# 
   724  0FE7                     	;# 
   725  0FE8                     	;# 
   726  0FE9                     	;# 
   727  0FEA                     	;# 
   728  0FEB                     	;# 
   729  0FED                     	;# 
   730  0FEE                     	;# 
   731  0FEF                     	;# 
   732  0000                     	;# 
   733  0001                     	;# 
   734  0002                     	;# 
   735  0003                     	;# 
   736  0004                     	;# 
   737  0005                     	;# 
   738  0006                     	;# 
   739  0007                     	;# 
   740  0008                     	;# 
   741  0009                     	;# 
   742  000A                     	;# 
   743  000B                     	;# 
   744  000C                     	;# 
   745  000D                     	;# 
   746  000E                     	;# 
   747  0010                     	;# 
   748  0011                     	;# 
   749  0012                     	;# 
   750  0013                     	;# 
   751  0015                     	;# 
   752  0016                     	;# 
   753  0016                     	;# 
   754  0017                     	;# 
   755  0018                     	;# 
   756  0019                     	;# 
   757  001A                     	;# 
   758  001B                     	;# 
   759  001C                     	;# 
   760  001E                     	;# 
   761  001F                     	;# 
   762  008C                     	;# 
   763  008D                     	;# 
   764  008E                     	;# 
   765  0090                     	;# 
   766  0091                     	;# 
   767  0092                     	;# 
   768  0093                     	;# 
   769  0095                     	;# 
   770  0096                     	;# 
   771  0097                     	;# 
   772  0098                     	;# 
   773  0099                     	;# 
   774  009A                     	;# 
   775  009B                     	;# 
   776  009B                     	;# 
   777  009C                     	;# 
   778  009D                     	;# 
   779  009E                     	;# 
   780  010C                     	;# 
   781  010D                     	;# 
   782  010E                     	;# 
   783  0110                     	;# 
   784  0111                     	;# 
   785  0112                     	;# 
   786  0113                     	;# 
   787  0114                     	;# 
   788  0115                     	;# 
   789  0116                     	;# 
   790  0117                     	;# 
   791  0118                     	;# 
   792  0119                     	;# 
   793  011A                     	;# 
   794  011B                     	;# 
   795  011D                     	;# 
   796  018C                     	;# 
   797  018D                     	;# 
   798  0191                     	;# 
   799  0191                     	;# 
   800  0192                     	;# 
   801  0193                     	;# 
   802  0193                     	;# 
   803  0193                     	;# 
   804  0194                     	;# 
   805  0195                     	;# 
   806  0196                     	;# 
   807  0199                     	;# 
   808  019A                     	;# 
   809  019B                     	;# 
   810  019B                     	;# 
   811  019B                     	;# 
   812  019B                     	;# 
   813  019C                     	;# 
   814  019C                     	;# 
   815  019D                     	;# 
   816  019E                     	;# 
   817  019F                     	;# 
   818  020D                     	;# 
   819  0210                     	;# 
   820  0211                     	;# 
   821  0212                     	;# 
   822  0213                     	;# 
   823  0214                     	;# 
   824  0215                     	;# 
   825  0215                     	;# 
   826  0216                     	;# 
   827  0217                     	;# 
   828  0291                     	;# 
   829  0291                     	;# 
   830  0292                     	;# 
   831  0293                     	;# 
   832  0294                     	;# 
   833  0295                     	;# 
   834  0295                     	;# 
   835  0296                     	;# 
   836  0298                     	;# 
   837  0298                     	;# 
   838  0299                     	;# 
   839  029A                     	;# 
   840  029B                     	;# 
   841  029C                     	;# 
   842  029C                     	;# 
   843  029D                     	;# 
   844  029E                     	;# 
   845  029F                     	;# 
   846  0311                     	;# 
   847  0311                     	;# 
   848  0312                     	;# 
   849  0313                     	;# 
   850  0314                     	;# 
   851  0315                     	;# 
   852  0315                     	;# 
   853  0316                     	;# 
   854  0318                     	;# 
   855  0318                     	;# 
   856  0319                     	;# 
   857  031A                     	;# 
   858  031C                     	;# 
   859  031C                     	;# 
   860  031D                     	;# 
   861  031E                     	;# 
   862  0394                     	;# 
   863  0395                     	;# 
   864  0396                     	;# 
   865  0415                     	;# 
   866  0416                     	;# 
   867  0417                     	;# 
   868  041C                     	;# 
   869  041D                     	;# 
   870  041E                     	;# 
   871  0791                     	;# 
   872  0792                     	;# 
   873  0793                     	;# 
   874  0794                     	;# 
   875  0795                     	;# 
   876  0798                     	;# 
   877  0799                     	;# 
   878  07A0                     	;# 
   879  07A1                     	;# 
   880  07A3                     	;# 
   881  07A4                     	;# 
   882  07A6                     	;# 
   883  07A7                     	;# 
   884  07A9                     	;# 
   885  07AA                     	;# 
   886  0FE4                     	;# 
   887  0FE5                     	;# 
   888  0FE6                     	;# 
   889  0FE7                     	;# 
   890  0FE8                     	;# 
   891  0FE9                     	;# 
   892  0FEA                     	;# 
   893  0FEB                     	;# 
   894  0FED                     	;# 
   895  0FEE                     	;# 
   896  0FEF                     	;# 
   897  0000                     	;# 
   898  0001                     	;# 
   899  0002                     	;# 
   900  0003                     	;# 
   901  0004                     	;# 
   902  0005                     	;# 
   903  0006                     	;# 
   904  0007                     	;# 
   905  0008                     	;# 
   906  0009                     	;# 
   907  000A                     	;# 
   908  000B                     	;# 
   909  000C                     	;# 
   910  000D                     	;# 
   911  000E                     	;# 
   912  0010                     	;# 
   913  0011                     	;# 
   914  0012                     	;# 
   915  0013                     	;# 
   916  0015                     	;# 
   917  0016                     	;# 
   918  0016                     	;# 
   919  0017                     	;# 
   920  0018                     	;# 
   921  0019                     	;# 
   922  001A                     	;# 
   923  001B                     	;# 
   924  001C                     	;# 
   925  001E                     	;# 
   926  001F                     	;# 
   927  008C                     	;# 
   928  008D                     	;# 
   929  008E                     	;# 
   930  0090                     	;# 
   931  0091                     	;# 
   932  0092                     	;# 
   933  0093                     	;# 
   934  0095                     	;# 
   935  0096                     	;# 
   936  0097                     	;# 
   937  0098                     	;# 
   938  0099                     	;# 
   939  009A                     	;# 
   940  009B                     	;# 
   941  009B                     	;# 
   942  009C                     	;# 
   943  009D                     	;# 
   944  009E                     	;# 
   945  010C                     	;# 
   946  010D                     	;# 
   947  010E                     	;# 
   948  0110                     	;# 
   949  0111                     	;# 
   950  0112                     	;# 
   951  0113                     	;# 
   952  0114                     	;# 
   953  0115                     	;# 
   954  0116                     	;# 
   955  0117                     	;# 
   956  0118                     	;# 
   957  0119                     	;# 
   958  011A                     	;# 
   959  011B                     	;# 
   960  011D                     	;# 
   961  018C                     	;# 
   962  018D                     	;# 
   963  0191                     	;# 
   964  0191                     	;# 
   965  0192                     	;# 
   966  0193                     	;# 
   967  0193                     	;# 
   968  0193                     	;# 
   969  0194                     	;# 
   970  0195                     	;# 
   971  0196                     	;# 
   972  0199                     	;# 
   973  019A                     	;# 
   974  019B                     	;# 
   975  019B                     	;# 
   976  019B                     	;# 
   977  019B                     	;# 
   978  019C                     	;# 
   979  019C                     	;# 
   980  019D                     	;# 
   981  019E                     	;# 
   982  019F                     	;# 
   983  020D                     	;# 
   984  0210                     	;# 
   985  0211                     	;# 
   986  0212                     	;# 
   987  0213                     	;# 
   988  0214                     	;# 
   989  0215                     	;# 
   990  0215                     	;# 
   991  0216                     	;# 
   992  0217                     	;# 
   993  0291                     	;# 
   994  0291                     	;# 
   995  0292                     	;# 
   996  0293                     	;# 
   997  0294                     	;# 
   998  0295                     	;# 
   999  0295                     	;# 
  1000  0296                     	;# 
  1001  0298                     	;# 
  1002  0298                     	;# 
  1003  0299                     	;# 
  1004  029A                     	;# 
  1005  029B                     	;# 
  1006  029C                     	;# 
  1007  029C                     	;# 
  1008  029D                     	;# 
  1009  029E                     	;# 
  1010  029F                     	;# 
  1011  0311                     	;# 
  1012  0311                     	;# 
  1013  0312                     	;# 
  1014  0313                     	;# 
  1015  0314                     	;# 
  1016  0315                     	;# 
  1017  0315                     	;# 
  1018  0316                     	;# 
  1019  0318                     	;# 
  1020  0318                     	;# 
  1021  0319                     	;# 
  1022  031A                     	;# 
  1023  031C                     	;# 
  1024  031C                     	;# 
  1025  031D                     	;# 
  1026  031E                     	;# 
  1027  0394                     	;# 
  1028  0395                     	;# 
  1029  0396                     	;# 
  1030  0415                     	;# 
  1031  0416                     	;# 
  1032  0417                     	;# 
  1033  041C                     	;# 
  1034  041D                     	;# 
  1035  041E                     	;# 
  1036  0791                     	;# 
  1037  0792                     	;# 
  1038  0793                     	;# 
  1039  0794                     	;# 
  1040  0795                     	;# 
  1041  0798                     	;# 
  1042  0799                     	;# 
  1043  07A0                     	;# 
  1044  07A1                     	;# 
  1045  07A3                     	;# 
  1046  07A4                     	;# 
  1047  07A6                     	;# 
  1048  07A7                     	;# 
  1049  07A9                     	;# 
  1050  07AA                     	;# 
  1051  0FE4                     	;# 
  1052  0FE5                     	;# 
  1053  0FE6                     	;# 
  1054  0FE7                     	;# 
  1055  0FE8                     	;# 
  1056  0FE9                     	;# 
  1057  0FEA                     	;# 
  1058  0FEB                     	;# 
  1059  0FED                     	;# 
  1060  0FEE                     	;# 
  1061  0FEF                     	;# 
  1062  0000                     	;# 
  1063  0001                     	;# 
  1064  0002                     	;# 
  1065  0003                     	;# 
  1066  0004                     	;# 
  1067  0005                     	;# 
  1068  0006                     	;# 
  1069  0007                     	;# 
  1070  0008                     	;# 
  1071  0009                     	;# 
  1072  000A                     	;# 
  1073  000B                     	;# 
  1074  000C                     	;# 
  1075  000D                     	;# 
  1076  000E                     	;# 
  1077  0010                     	;# 
  1078  0011                     	;# 
  1079  0012                     	;# 
  1080  0013                     	;# 
  1081  0015                     	;# 
  1082  0016                     	;# 
  1083  0016                     	;# 
  1084  0017                     	;# 
  1085  0018                     	;# 
  1086  0019                     	;# 
  1087  001A                     	;# 
  1088  001B                     	;# 
  1089  001C                     	;# 
  1090  001E                     	;# 
  1091  001F                     	;# 
  1092  008C                     	;# 
  1093  008D                     	;# 
  1094  008E                     	;# 
  1095  0090                     	;# 
  1096  0091                     	;# 
  1097  0092                     	;# 
  1098  0093                     	;# 
  1099  0095                     	;# 
  1100  0096                     	;# 
  1101  0097                     	;# 
  1102  0098                     	;# 
  1103  0099                     	;# 
  1104  009A                     	;# 
  1105  009B                     	;# 
  1106  009B                     	;# 
  1107  009C                     	;# 
  1108  009D                     	;# 
  1109  009E                     	;# 
  1110  010C                     	;# 
  1111  010D                     	;# 
  1112  010E                     	;# 
  1113  0110                     	;# 
  1114  0111                     	;# 
  1115  0112                     	;# 
  1116  0113                     	;# 
  1117  0114                     	;# 
  1118  0115                     	;# 
  1119  0116                     	;# 
  1120  0117                     	;# 
  1121  0118                     	;# 
  1122  0119                     	;# 
  1123  011A                     	;# 
  1124  011B                     	;# 
  1125  011D                     	;# 
  1126  018C                     	;# 
  1127  018D                     	;# 
  1128  0191                     	;# 
  1129  0191                     	;# 
  1130  0192                     	;# 
  1131  0193                     	;# 
  1132  0193                     	;# 
  1133  0193                     	;# 
  1134  0194                     	;# 
  1135  0195                     	;# 
  1136  0196                     	;# 
  1137  0199                     	;# 
  1138  019A                     	;# 
  1139  019B                     	;# 
  1140  019B                     	;# 
  1141  019B                     	;# 
  1142  019B                     	;# 
  1143  019C                     	;# 
  1144  019C                     	;# 
  1145  019D                     	;# 
  1146  019E                     	;# 
  1147  019F                     	;# 
  1148  020D                     	;# 
  1149  0210                     	;# 
  1150  0211                     	;# 
  1151  0212                     	;# 
  1152  0213                     	;# 
  1153  0214                     	;# 
  1154  0215                     	;# 
  1155  0215                     	;# 
  1156  0216                     	;# 
  1157  0217                     	;# 
  1158  0291                     	;# 
  1159  0291                     	;# 
  1160  0292                     	;# 
  1161  0293                     	;# 
  1162  0294                     	;# 
  1163  0295                     	;# 
  1164  0295                     	;# 
  1165  0296                     	;# 
  1166  0298                     	;# 
  1167  0298                     	;# 
  1168  0299                     	;# 
  1169  029A                     	;# 
  1170  029B                     	;# 
  1171  029C                     	;# 
  1172  029C                     	;# 
  1173  029D                     	;# 
  1174  029E                     	;# 
  1175  029F                     	;# 
  1176  0311                     	;# 
  1177  0311                     	;# 
  1178  0312                     	;# 
  1179  0313                     	;# 
  1180  0314                     	;# 
  1181  0315                     	;# 
  1182  0315                     	;# 
  1183  0316                     	;# 
  1184  0318                     	;# 
  1185  0318                     	;# 
  1186  0319                     	;# 
  1187  031A                     	;# 
  1188  031C                     	;# 
  1189  031C                     	;# 
  1190  031D                     	;# 
  1191  031E                     	;# 
  1192  0394                     	;# 
  1193  0395                     	;# 
  1194  0396                     	;# 
  1195  0415                     	;# 
  1196  0416                     	;# 
  1197  0417                     	;# 
  1198  041C                     	;# 
  1199  041D                     	;# 
  1200  041E                     	;# 
  1201  0791                     	;# 
  1202  0792                     	;# 
  1203  0793                     	;# 
  1204  0794                     	;# 
  1205  0795                     	;# 
  1206  0798                     	;# 
  1207  0799                     	;# 
  1208  07A0                     	;# 
  1209  07A1                     	;# 
  1210  07A3                     	;# 
  1211  07A4                     	;# 
  1212  07A6                     	;# 
  1213  07A7                     	;# 
  1214  07A9                     	;# 
  1215  07AA                     	;# 
  1216  0FE4                     	;# 
  1217  0FE5                     	;# 
  1218  0FE6                     	;# 
  1219  0FE7                     	;# 
  1220  0FE8                     	;# 
  1221  0FE9                     	;# 
  1222  0FEA                     	;# 
  1223  0FEB                     	;# 
  1224  0FED                     	;# 
  1225  0FEE                     	;# 
  1226  0FEF                     	;# 
  1227  0000                     	;# 
  1228  0001                     	;# 
  1229  0002                     	;# 
  1230  0003                     	;# 
  1231  0004                     	;# 
  1232  0005                     	;# 
  1233  0006                     	;# 
  1234  0007                     	;# 
  1235  0008                     	;# 
  1236  0009                     	;# 
  1237  000A                     	;# 
  1238  000B                     	;# 
  1239  000C                     	;# 
  1240  000D                     	;# 
  1241  000E                     	;# 
  1242  0010                     	;# 
  1243  0011                     	;# 
  1244  0012                     	;# 
  1245  0013                     	;# 
  1246  0015                     	;# 
  1247  0016                     	;# 
  1248  0016                     	;# 
  1249  0017                     	;# 
  1250  0018                     	;# 
  1251  0019                     	;# 
  1252  001A                     	;# 
  1253  001B                     	;# 
  1254  001C                     	;# 
  1255  001E                     	;# 
  1256  001F                     	;# 
  1257  008C                     	;# 
  1258  008D                     	;# 
  1259  008E                     	;# 
  1260  0090                     	;# 
  1261  0091                     	;# 
  1262  0092                     	;# 
  1263  0093                     	;# 
  1264  0095                     	;# 
  1265  0096                     	;# 
  1266  0097                     	;# 
  1267  0098                     	;# 
  1268  0099                     	;# 
  1269  009A                     	;# 
  1270  009B                     	;# 
  1271  009B                     	;# 
  1272  009C                     	;# 
  1273  009D                     	;# 
  1274  009E                     	;# 
  1275  010C                     	;# 
  1276  010D                     	;# 
  1277  010E                     	;# 
  1278  0110                     	;# 
  1279  0111                     	;# 
  1280  0112                     	;# 
  1281  0113                     	;# 
  1282  0114                     	;# 
  1283  0115                     	;# 
  1284  0116                     	;# 
  1285  0117                     	;# 
  1286  0118                     	;# 
  1287  0119                     	;# 
  1288  011A                     	;# 
  1289  011B                     	;# 
  1290  011D                     	;# 
  1291  018C                     	;# 
  1292  018D                     	;# 
  1293  0191                     	;# 
  1294  0191                     	;# 
  1295  0192                     	;# 
  1296  0193                     	;# 
  1297  0193                     	;# 
  1298  0193                     	;# 
  1299  0194                     	;# 
  1300  0195                     	;# 
  1301  0196                     	;# 
  1302  0199                     	;# 
  1303  019A                     	;# 
  1304  019B                     	;# 
  1305  019B                     	;# 
  1306  019B                     	;# 
  1307  019B                     	;# 
  1308  019C                     	;# 
  1309  019C                     	;# 
  1310  019D                     	;# 
  1311  019E                     	;# 
  1312  019F                     	;# 
  1313  020D                     	;# 
  1314  0210                     	;# 
  1315  0211                     	;# 
  1316  0212                     	;# 
  1317  0213                     	;# 
  1318  0214                     	;# 
  1319  0215                     	;# 
  1320  0215                     	;# 
  1321  0216                     	;# 
  1322  0217                     	;# 
  1323  0291                     	;# 
  1324  0291                     	;# 
  1325  0292                     	;# 
  1326  0293                     	;# 
  1327  0294                     	;# 
  1328  0295                     	;# 
  1329  0295                     	;# 
  1330  0296                     	;# 
  1331  0298                     	;# 
  1332  0298                     	;# 
  1333  0299                     	;# 
  1334  029A                     	;# 
  1335  029B                     	;# 
  1336  029C                     	;# 
  1337  029C                     	;# 
  1338  029D                     	;# 
  1339  029E                     	;# 
  1340  029F                     	;# 
  1341  0311                     	;# 
  1342  0311                     	;# 
  1343  0312                     	;# 
  1344  0313                     	;# 
  1345  0314                     	;# 
  1346  0315                     	;# 
  1347  0315                     	;# 
  1348  0316                     	;# 
  1349  0318                     	;# 
  1350  0318                     	;# 
  1351  0319                     	;# 
  1352  031A                     	;# 
  1353  031C                     	;# 
  1354  031C                     	;# 
  1355  031D                     	;# 
  1356  031E                     	;# 
  1357  0394                     	;# 
  1358  0395                     	;# 
  1359  0396                     	;# 
  1360  0415                     	;# 
  1361  0416                     	;# 
  1362  0417                     	;# 
  1363  041C                     	;# 
  1364  041D                     	;# 
  1365  041E                     	;# 
  1366  0791                     	;# 
  1367  0792                     	;# 
  1368  0793                     	;# 
  1369  0794                     	;# 
  1370  0795                     	;# 
  1371  0798                     	;# 
  1372  0799                     	;# 
  1373  07A0                     	;# 
  1374  07A1                     	;# 
  1375  07A3                     	;# 
  1376  07A4                     	;# 
  1377  07A6                     	;# 
  1378  07A7                     	;# 
  1379  07A9                     	;# 
  1380  07AA                     	;# 
  1381  0FE4                     	;# 
  1382  0FE5                     	;# 
  1383  0FE6                     	;# 
  1384  0FE7                     	;# 
  1385  0FE8                     	;# 
  1386  0FE9                     	;# 
  1387  0FEA                     	;# 
  1388  0FEB                     	;# 
  1389  0FED                     	;# 
  1390  0FEE                     	;# 
  1391  0FEF                     	;# 
  1392  0000                     	;# 
  1393  0001                     	;# 
  1394  0002                     	;# 
  1395  0003                     	;# 
  1396  0004                     	;# 
  1397  0005                     	;# 
  1398  0006                     	;# 
  1399  0007                     	;# 
  1400  0008                     	;# 
  1401  0009                     	;# 
  1402  000A                     	;# 
  1403  000B                     	;# 
  1404  000C                     	;# 
  1405  000D                     	;# 
  1406  000E                     	;# 
  1407  0010                     	;# 
  1408  0011                     	;# 
  1409  0012                     	;# 
  1410  0013                     	;# 
  1411  0015                     	;# 
  1412  0016                     	;# 
  1413  0016                     	;# 
  1414  0017                     	;# 
  1415  0018                     	;# 
  1416  0019                     	;# 
  1417  001A                     	;# 
  1418  001B                     	;# 
  1419  001C                     	;# 
  1420  001E                     	;# 
  1421  001F                     	;# 
  1422  008C                     	;# 
  1423  008D                     	;# 
  1424  008E                     	;# 
  1425  0090                     	;# 
  1426  0091                     	;# 
  1427  0092                     	;# 
  1428  0093                     	;# 
  1429  0095                     	;# 
  1430  0096                     	;# 
  1431  0097                     	;# 
  1432  0098                     	;# 
  1433  0099                     	;# 
  1434  009A                     	;# 
  1435  009B                     	;# 
  1436  009B                     	;# 
  1437  009C                     	;# 
  1438  009D                     	;# 
  1439  009E                     	;# 
  1440  010C                     	;# 
  1441  010D                     	;# 
  1442  010E                     	;# 
  1443  0110                     	;# 
  1444  0111                     	;# 
  1445  0112                     	;# 
  1446  0113                     	;# 
  1447  0114                     	;# 
  1448  0115                     	;# 
  1449  0116                     	;# 
  1450  0117                     	;# 
  1451  0118                     	;# 
  1452  0119                     	;# 
  1453  011A                     	;# 
  1454  011B                     	;# 
  1455  011D                     	;# 
  1456  018C                     	;# 
  1457  018D                     	;# 
  1458  0191                     	;# 
  1459  0191                     	;# 
  1460  0192                     	;# 
  1461  0193                     	;# 
  1462  0193                     	;# 
  1463  0193                     	;# 
  1464  0194                     	;# 
  1465  0195                     	;# 
  1466  0196                     	;# 
  1467  0199                     	;# 
  1468  019A                     	;# 
  1469  019B                     	;# 
  1470  019B                     	;# 
  1471  019B                     	;# 
  1472  019B                     	;# 
  1473  019C                     	;# 
  1474  019C                     	;# 
  1475  019D                     	;# 
  1476  019E                     	;# 
  1477  019F                     	;# 
  1478  020D                     	;# 
  1479  0210                     	;# 
  1480  0211                     	;# 
  1481  0212                     	;# 
  1482  0213                     	;# 
  1483  0214                     	;# 
  1484  0215                     	;# 
  1485  0215                     	;# 
  1486  0216                     	;# 
  1487  0217                     	;# 
  1488  0291                     	;# 
  1489  0291                     	;# 
  1490  0292                     	;# 
  1491  0293                     	;# 
  1492  0294                     	;# 
  1493  0295                     	;# 
  1494  0295                     	;# 
  1495  0296                     	;# 
  1496  0298                     	;# 
  1497  0298                     	;# 
  1498  0299                     	;# 
  1499  029A                     	;# 
  1500  029B                     	;# 
  1501  029C                     	;# 
  1502  029C                     	;# 
  1503  029D                     	;# 
  1504  029E                     	;# 
  1505  029F                     	;# 
  1506  0311                     	;# 
  1507  0311                     	;# 
  1508  0312                     	;# 
  1509  0313                     	;# 
  1510  0314                     	;# 
  1511  0315                     	;# 
  1512  0315                     	;# 
  1513  0316                     	;# 
  1514  0318                     	;# 
  1515  0318                     	;# 
  1516  0319                     	;# 
  1517  031A                     	;# 
  1518  031C                     	;# 
  1519  031C                     	;# 
  1520  031D                     	;# 
  1521  031E                     	;# 
  1522  0394                     	;# 
  1523  0395                     	;# 
  1524  0396                     	;# 
  1525  0415                     	;# 
  1526  0416                     	;# 
  1527  0417                     	;# 
  1528  041C                     	;# 
  1529  041D                     	;# 
  1530  041E                     	;# 
  1531  0791                     	;# 
  1532  0792                     	;# 
  1533  0793                     	;# 
  1534  0794                     	;# 
  1535  0795                     	;# 
  1536  0798                     	;# 
  1537  0799                     	;# 
  1538  07A0                     	;# 
  1539  07A1                     	;# 
  1540  07A3                     	;# 
  1541  07A4                     	;# 
  1542  07A6                     	;# 
  1543  07A7                     	;# 
  1544  07A9                     	;# 
  1545  07AA                     	;# 
  1546  0FE4                     	;# 
  1547  0FE5                     	;# 
  1548  0FE6                     	;# 
  1549  0FE7                     	;# 
  1550  0FE8                     	;# 
  1551  0FE9                     	;# 
  1552  0FEA                     	;# 
  1553  0FEB                     	;# 
  1554  0FED                     	;# 
  1555  0FEE                     	;# 
  1556  0FEF                     	;# 
  1557  0000                     	;# 
  1558  0001                     	;# 
  1559  0002                     	;# 
  1560  0003                     	;# 
  1561  0004                     	;# 
  1562  0005                     	;# 
  1563  0006                     	;# 
  1564  0007                     	;# 
  1565  0008                     	;# 
  1566  0009                     	;# 
  1567  000A                     	;# 
  1568  000B                     	;# 
  1569  000C                     	;# 
  1570  000D                     	;# 
  1571  000E                     	;# 
  1572  0010                     	;# 
  1573  0011                     	;# 
  1574  0012                     	;# 
  1575  0013                     	;# 
  1576  0015                     	;# 
  1577  0016                     	;# 
  1578  0016                     	;# 
  1579  0017                     	;# 
  1580  0018                     	;# 
  1581  0019                     	;# 
  1582  001A                     	;# 
  1583  001B                     	;# 
  1584  001C                     	;# 
  1585  001E                     	;# 
  1586  001F                     	;# 
  1587  008C                     	;# 
  1588  008D                     	;# 
  1589  008E                     	;# 
  1590  0090                     	;# 
  1591  0091                     	;# 
  1592  0092                     	;# 
  1593  0093                     	;# 
  1594  0095                     	;# 
  1595  0096                     	;# 
  1596  0097                     	;# 
  1597  0098                     	;# 
  1598  0099                     	;# 
  1599  009A                     	;# 
  1600  009B                     	;# 
  1601  009B                     	;# 
  1602  009C                     	;# 
  1603  009D                     	;# 
  1604  009E                     	;# 
  1605  010C                     	;# 
  1606  010D                     	;# 
  1607  010E                     	;# 
  1608  0110                     	;# 
  1609  0111                     	;# 
  1610  0112                     	;# 
  1611  0113                     	;# 
  1612  0114                     	;# 
  1613  0115                     	;# 
  1614  0116                     	;# 
  1615  0117                     	;# 
  1616  0118                     	;# 
  1617  0119                     	;# 
  1618  011A                     	;# 
  1619  011B                     	;# 
  1620  011D                     	;# 
  1621  018C                     	;# 
  1622  018D                     	;# 
  1623  0191                     	;# 
  1624  0191                     	;# 
  1625  0192                     	;# 
  1626  0193                     	;# 
  1627  0193                     	;# 
  1628  0193                     	;# 
  1629  0194                     	;# 
  1630  0195                     	;# 
  1631  0196                     	;# 
  1632  0199                     	;# 
  1633  019A                     	;# 
  1634  019B                     	;# 
  1635  019B                     	;# 
  1636  019B                     	;# 
  1637  019B                     	;# 
  1638  019C                     	;# 
  1639  019C                     	;# 
  1640  019D                     	;# 
  1641  019E                     	;# 
  1642  019F                     	;# 
  1643  020D                     	;# 
  1644  0210                     	;# 
  1645  0211                     	;# 
  1646  0212                     	;# 
  1647  0213                     	;# 
  1648  0214                     	;# 
  1649  0215                     	;# 
  1650  0215                     	;# 
  1651  0216                     	;# 
  1652  0217                     	;# 
  1653  0291                     	;# 
  1654  0291                     	;# 
  1655  0292                     	;# 
  1656  0293                     	;# 
  1657  0294                     	;# 
  1658  0295                     	;# 
  1659  0295                     	;# 
  1660  0296                     	;# 
  1661  0298                     	;# 
  1662  0298                     	;# 
  1663  0299                     	;# 
  1664  029A                     	;# 
  1665  029B                     	;# 
  1666  029C                     	;# 
  1667  029C                     	;# 
  1668  029D                     	;# 
  1669  029E                     	;# 
  1670  029F                     	;# 
  1671  0311                     	;# 
  1672  0311                     	;# 
  1673  0312                     	;# 
  1674  0313                     	;# 
  1675  0314                     	;# 
  1676  0315                     	;# 
  1677  0315                     	;# 
  1678  0316                     	;# 
  1679  0318                     	;# 
  1680  0318                     	;# 
  1681  0319                     	;# 
  1682  031A                     	;# 
  1683  031C                     	;# 
  1684  031C                     	;# 
  1685  031D                     	;# 
  1686  031E                     	;# 
  1687  0394                     	;# 
  1688  0395                     	;# 
  1689  0396                     	;# 
  1690  0415                     	;# 
  1691  0416                     	;# 
  1692  0417                     	;# 
  1693  041C                     	;# 
  1694  041D                     	;# 
  1695  041E                     	;# 
  1696  0791                     	;# 
  1697  0792                     	;# 
  1698  0793                     	;# 
  1699  0794                     	;# 
  1700  0795                     	;# 
  1701  0798                     	;# 
  1702  0799                     	;# 
  1703  07A0                     	;# 
  1704  07A1                     	;# 
  1705  07A3                     	;# 
  1706  07A4                     	;# 
  1707  07A6                     	;# 
  1708  07A7                     	;# 
  1709  07A9                     	;# 
  1710  07AA                     	;# 
  1711  0FE4                     	;# 
  1712  0FE5                     	;# 
  1713  0FE6                     	;# 
  1714  0FE7                     	;# 
  1715  0FE8                     	;# 
  1716  0FE9                     	;# 
  1717  0FEA                     	;# 
  1718  0FEB                     	;# 
  1719  0FED                     	;# 
  1720  0FEE                     	;# 
  1721  0FEF                     	;# 
  1722                           
  1723                           	psect	idataBANK0
  1724  0000                     __pidataBANK0:	
  1725                           
  1726                           	psect	idataBANK1
  1727  0000                     __pidataBANK1:	
  1728                           
  1729                           	psect	idataBANK2
  1730  0000                     __pidataBANK2:	
  1731                           
  1732                           	psect	stringtext1
  1733  1800                     __pstringtext1:	
  1734  1800                     _PWM_trans_table:	
  1735  1800  346E               	retlw	110
  1736  1801  346E               	retlw	110
  1737  1802  346E               	retlw	110
  1738  1803  3400               	retlw	0
  1739  1804  3400               	retlw	0
  1740  1805  3400               	retlw	0
  1741  1806  3400               	retlw	0
  1742  1807  3400               	retlw	0
  1743  1808  3400               	retlw	0
  1744  1809  3400               	retlw	0
  1745  180A  34D3               	retlw	211
  1746  180B  34D3               	retlw	211
  1747  180C  34D3               	retlw	211
  1748  180D  34D0               	retlw	208
  1749  180E  34CE               	retlw	206
  1750  180F  34CC               	retlw	204
  1751  1810  34C9               	retlw	201
  1752  1811  34C7               	retlw	199
  1753  1812  34C5               	retlw	197
  1754  1813  34C3               	retlw	195
  1755  1814  34C1               	retlw	193
  1756  1815  34BF               	retlw	191
  1757  1816  34BD               	retlw	189
  1758  1817  34BB               	retlw	187
  1759  1818  34BA               	retlw	186
  1760  1819  34B8               	retlw	184
  1761  181A  34B6               	retlw	182
  1762  181B  34B4               	retlw	180
  1763  181C  34B2               	retlw	178
  1764  181D  34B1               	retlw	177
  1765  181E  34AF               	retlw	175
  1766  181F  34AD               	retlw	173
  1767  1820  34AC               	retlw	172
  1768  1821  34AA               	retlw	170
  1769  1822  34A9               	retlw	169
  1770  1823  34A7               	retlw	167
  1771  1824  34A6               	retlw	166
  1772  1825  34A4               	retlw	164
  1773  1826  34A3               	retlw	163
  1774  1827  34A2               	retlw	162
  1775  1828  34A0               	retlw	160
  1776  1829  349F               	retlw	159
  1777  182A  349D               	retlw	157
  1778  182B  349C               	retlw	156
  1779  182C  349B               	retlw	155
  1780  182D  349A               	retlw	154
  1781  182E  3498               	retlw	152
  1782  182F  3497               	retlw	151
  1783  1830  3496               	retlw	150
  1784  1831  3495               	retlw	149
  1785  1832  3494               	retlw	148
  1786  1833  3492               	retlw	146
  1787  1834  3491               	retlw	145
  1788  1835  3490               	retlw	144
  1789  1836  348F               	retlw	143
  1790  1837  348E               	retlw	142
  1791  1838  348D               	retlw	141
  1792  1839  348C               	retlw	140
  1793  183A  348B               	retlw	139
  1794  183B  348A               	retlw	138
  1795  183C  3489               	retlw	137
  1796  183D  3488               	retlw	136
  1797  183E  3487               	retlw	135
  1798  183F  3486               	retlw	134
  1799  1840  3485               	retlw	133
  1800  1841  3484               	retlw	132
  1801  1842  3483               	retlw	131
  1802  1843  3482               	retlw	130
  1803  1844  3481               	retlw	129
  1804  1845  3480               	retlw	128
  1805  1846  347F               	retlw	127
  1806  1847  347F               	retlw	127
  1807  1848  347E               	retlw	126
  1808  1849  347D               	retlw	125
  1809  184A  347C               	retlw	124
  1810  184B  347B               	retlw	123
  1811  184C  347A               	retlw	122
  1812  184D  347A               	retlw	122
  1813  184E  3479               	retlw	121
  1814  184F  3478               	retlw	120
  1815  1850  3477               	retlw	119
  1816  1851  3477               	retlw	119
  1817  1852  3476               	retlw	118
  1818  1853  3475               	retlw	117
  1819  1854  3474               	retlw	116
  1820  1855  3474               	retlw	116
  1821  1856  3473               	retlw	115
  1822  1857  3472               	retlw	114
  1823  1858  3472               	retlw	114
  1824  1859  3471               	retlw	113
  1825  185A  3470               	retlw	112
  1826  185B  3470               	retlw	112
  1827  185C  346F               	retlw	111
  1828  185D  346E               	retlw	110
  1829  185E  346E               	retlw	110
  1830  185F  346E               	retlw	110
  1831  1860  346E               	retlw	110
  1832  1861  346E               	retlw	110
  1833  1862  346E               	retlw	110
  1834  1863  346E               	retlw	110
  1835  1864  346E               	retlw	110
  1836  1865                     __end_of_PWM_trans_table:	
  1837                           
  1838                           	psect	nvBANK1
  1839  00EF                     __pnvBANK1:	
  1840  00EF                     _ui8_ResetMatlab:	
  1841  00EF                     	ds	1
  1842                           
  1843                           	psect	nvBANK3
  1844  01E6                     __pnvBANK3:	
  1845  01E6                     _ui16_Current_Thresh:	
  1846  01E6                     	ds	2
  1847  01E8                     _ui16_dryRun_Thresh:	
  1848  01E8                     	ds	2
  1849  0017                     _TMR1H	set	23
  1850  0016                     _TMR1L	set	22
  1851  001A                     _TMR2	set	26
  1852  0015                     _TMR0	set	21
  1853  0018                     _T1CON	set	24
  1854  000B                     _INTCON	set	11
  1855  001C                     _T2CON	set	28
  1856  001B                     _PR2	set	27
  1857  005D                     _TMR0IE	set	93
  1858  009D                     _CCP4IF	set	157
  1859  009C                     _CCP3IF	set	156
  1860  008A                     _CCP1IF	set	138
  1861  008D                     _RCIF	set	141
  1862  0090                     _CCP2IF	set	144
  1863  009E                     _CCP5IF	set	158
  1864  009B                     _TMR6IF	set	155
  1865  0089                     _TMR2IF	set	137
  1866  0099                     _TMR4IF	set	153
  1867  0088                     _TMR1IF	set	136
  1868  0075                     _RC5	set	117
  1869  005F                     _GIE	set	95
  1870  005E                     _PEIE	set	94
  1871  0097                     _WDTCON	set	151
  1872  0099                     _OSCCON	set	153
  1873  0093                     _PIE3	set	147
  1874  0092                     _PIE2	set	146
  1875  0095                     _OPTION_REG	set	149
  1876  008E                     _TRISC	set	142
  1877  008D                     _TRISB	set	141
  1878  008C                     _TRISA	set	140
  1879  0091                     _PIE1	set	145
  1880  009B                     _ADRESL	set	155
  1881  009C                     _ADRESH	set	156
  1882  009D                     _ADCON0	set	157
  1883  009E                     _ADCON1	set	158
  1884  049B                     _TMR6IE	set	1179
  1885  0499                     _TMR4IE	set	1177
  1886  0488                     _TMR1IE	set	1160
  1887  049E                     _CCP5IE	set	1182
  1888  049D                     _CCP4IE	set	1181
  1889  049C                     _CCP3IE	set	1180
  1890  048A                     _CCP1IE	set	1162
  1891  0489                     _TMR2IE	set	1161
  1892  0490                     _CCP2IE	set	1168
  1893  0495                     _C1IE	set	1173
  1894  04E9                     _GO_nDONE	set	1257
  1895  04E8                     _ADON	set	1256
  1896  010D                     _LATB	set	269
  1897  010C                     _LATA	set	268
  1898  010E                     _LATC	set	270
  1899  0112                     _CM1CON1	set	274
  1900  0111                     _CM1CON0	set	273
  1901  0117                     _FVRCON	set	279
  1902  0870                     _LATC0	set	2160
  1903  0874                     _LATC4	set	2164
  1904  0873                     _LATC3	set	2163
  1905  0871                     _LATC1	set	2161
  1906  0872                     _LATC2	set	2162
  1907  0869                     _LATB1	set	2153
  1908  086A                     _LATB2	set	2154
  1909  088E                     _C1OUT	set	2190
  1910  018D                     _ANSELB	set	397
  1911  018C                     _ANSELA	set	396
  1912  019A                     _TXREG	set	410
  1913  0199                     _RCREG	set	409
  1914  019F                     _BAUDCON	set	415
  1915  019D                     _RCSTA	set	413
  1916  019E                     _TXSTA	set	414
  1917  019C                     _SPBRGH	set	412
  1918  019B                     _SPBRG	set	411
  1919  0196                     _EECON2	set	406
  1920  0193                     _EEDATL	set	403
  1921  0193                     _EEDATA	set	403
  1922  0194                     _EEDATH	set	404
  1923  0195                     _EECON1	set	405
  1924  0192                     _EEADRH	set	402
  1925  0191                     _EEADRL	set	401
  1926  0CF3                     _SENDB	set	3315
  1927  0CA9                     _WR	set	3241
  1928  0CAE                     _CFGS	set	3246
  1929  0CAF                     _EEPGD	set	3247
  1930  0CA8                     _RD	set	3240
  1931  0CAA                     _WREN	set	3242
  1932  0292                     _CCPR1H	set	658
  1933  0299                     _CCPR2H	set	665
  1934  0298                     _CCPR2L	set	664
  1935  029A                     _CCP2CON	set	666
  1936  0291                     _CCPR1L	set	657
  1937  0293                     _CCP1CON	set	659
  1938  0295                     _CCP1AS	set	661
  1939  0294                     _PWM1CON	set	660
  1940  0296                     _PSTR1CON	set	662
  1941  14AF                     _CCP1ASE	set	5295
  1942  031D                     _CCPR5H	set	797
  1943  031C                     _CCPR5L	set	796
  1944  031E                     _CCP5CON	set	798
  1945  0319                     _CCPR4H	set	793
  1946  0318                     _CCPR4L	set	792
  1947  031A                     _CCP4CON	set	794
  1948  0312                     _CCPR3H	set	786
  1949  0311                     _CCPR3L	set	785
  1950  0313                     _CCP3CON	set	787
  1951  041C                     _TMR6	set	1052
  1952  0415                     _TMR4	set	1045
  1953  041E                     _T6CON	set	1054
  1954  0417                     _T4CON	set	1047
  1955                           
  1956                           ; #config settings
  1957  0000                     
  1958                           	psect	cinit
  1959  002D                     start_initialization:	
  1960  002D                     __initialization:	
  1961                           
  1962                           ;initializer for _ui8_selected_lid
  1963  002D  3080               	movlw	128
  1964  002E  00E9               	movwf	__pdataBANK0& (0+127)
  1965                           
  1966                           ; Initialize objects allocated to BANK1
  1967  002F  0021               	movlb	1	; select bank1
  1968                           
  1969                           ;initializer for _ui16_I_cal_Ph3
  1970  0030  3001               	movlw	1
  1971  0031  00E8               	movwf	__pdataBANK1& (0+127)
  1972  0032  01E9               	clrf	(__pdataBANK1+1)& (0+127)
  1973                           
  1974                           ;initializer for _ui16_I_cal_Ph2
  1975  0033  00EA               	movwf	(__pdataBANK1+2)& (0+127)
  1976  0034  01EB               	clrf	(__pdataBANK1+3)& (0+127)
  1977                           
  1978                           ;initializer for _ui16_I_cal_Ph1
  1979  0035  00EC               	movwf	(__pdataBANK1+4)& (0+127)
  1980  0036  01ED               	clrf	(__pdataBANK1+5)& (0+127)
  1981                           
  1982                           ;initializer for _wkpoint
  1983  0037  00EE               	movwf	(__pdataBANK1+6)& (0+127)
  1984                           
  1985                           ; Initialize objects allocated to BANK2
  1986  0038  0022               	movlb	2	; select bank2
  1987                           
  1988                           ;initializer for BVH2_Appl_Layer@X_Sb4_Intergrator
  1989  0039  3080               	movlw	128
  1990  003A  00E8               	movwf	__pdataBANK2& (0+127)
  1991  003B  3038               	movlw	56
  1992  003C  00E9               	movwf	(__pdataBANK2+1)& (0+127)
  1993  003D  3001               	movlw	1
  1994  003E  00EA               	movwf	(__pdataBANK2+2)& (0+127)
  1995  003F  01EB               	clrf	(__pdataBANK2+3)& (0+127)
  1996                           
  1997                           ;initializer for BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn
  1998  0040  00EC               	movwf	(__pdataBANK2+4)& (0+127)
  1999                           
  2000                           ;initializer for BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun
  2001  0041  00ED               	movwf	(__pdataBANK2+5)& (0+127)
  2002                           
  2003                           ;initializer for _ui8_failure
  2004  0042  3007               	movlw	7
  2005  0043  00EE               	movwf	(__pdataBANK2+6)& (0+127)
  2006                           
  2007                           ;initializer for _ict_stamp
  2008  0044  3001               	movlw	1
  2009  0045  00EF               	movwf	(__pdataBANK2+7)& (0+127)
  2010                           
  2011                           ; Clear objects allocated to BITBANK0
  2012  0046  0020               	movlb	0	; select bank0
  2013  0047  3054               	movlw	low __pbssBANK0
  2014  0048  01E8               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
  2015                           
  2016                           ; Clear objects allocated to BANK0
  2017  0049  0084               	movwf	4
  2018  004A  3000               	movlw	high __pbssBANK0
  2019  004B  0085               	movwf	5
  2020  004C  3014               	movlw	20
  2021  004D  3187  2776  3180   	fcall	clear_ram0
  2022                           
  2023                           ; Clear objects allocated to BANK1
  2024  0050  30A0               	movlw	low __pbssBANK1
  2025  0051  0084               	movwf	4
  2026  0052  3000               	movlw	high __pbssBANK1
  2027  0053  0085               	movwf	5
  2028  0054  3048               	movlw	72
  2029  0055  3187  2776  3180   	fcall	clear_ram0
  2030                           
  2031                           ; Clear objects allocated to BANK2
  2032  0058  3020               	movlw	low __pbssBANK2
  2033  0059  0084               	movwf	4
  2034  005A  3001               	movlw	high __pbssBANK2
  2035  005B  0085               	movwf	5
  2036  005C  3048               	movlw	72
  2037  005D  3187  2776  3180   	fcall	clear_ram0
  2038                           
  2039                           ; Clear objects allocated to BANK3
  2040  0060  30A0               	movlw	low __pbssBANK3
  2041  0061  0084               	movwf	4
  2042  0062  3001               	movlw	high __pbssBANK3
  2043  0063  0085               	movwf	5
  2044  0064  3046               	movlw	70
  2045  0065  3187  2776  3180   	fcall	clear_ram0
  2046                           
  2047                           ; Clear objects allocated to BANK4
  2048  0068  3040               	movlw	low __pbssBANK4
  2049  0069  0084               	movwf	4
  2050  006A  3002               	movlw	high __pbssBANK4
  2051  006B  0085               	movwf	5
  2052  006C  301B               	movlw	27
  2053  006D  3187  2776  3180   	fcall	clear_ram0
  2054  0070                     end_of_initialization:	
  2055                           ;End of C runtime variable initialization code
  2056                           
  2057  0070                     __end_of__initialization:	
  2058  0070  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2059  0071  0020               	movlb	0
  2060  0072  2873               	ljmp	_main	;jump to C main() function
  2061  0073                     __pmaintext:	
  2062 ;;
  2063 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  2064 ;;
  2065 ;; *************** function _main *****************
  2066 ;; Defined at:
  2067 ;;		line 630 in file "../main.c"
  2068 ;; Parameters:    Size  Location     Type
  2069 ;;		None
  2070 ;; Auto vars:     Size  Location     Type
  2071 ;;		None
  2072 ;; Return value:  Size  Location     Type
  2073 ;;                  1    wreg      void 
  2074 ;; Registers used:
  2075 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2076 ;; Tracked objects:
  2077 ;;		On entry : B1F/0
  2078 ;;		On exit  : 1F/1
  2079 ;;		Unchanged: 0/0
  2080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2081 ;;      Params:         0       0       0       0       0       0       0       0
  2082 ;;      Locals:         0       0       0       0       0       0       0       0
  2083 ;;      Temps:          0       0       0       0       4       0       0       0
  2084 ;;      Totals:         0       0       0       0       4       0       0       0
  2085 ;;Total ram usage:        4 bytes
  2086 ;; Hardware stack levels required when called:    8
  2087 ;; This function calls:
  2088 ;;		_BVH2_Appl_Layer
  2089 ;;		_EOL
  2090 ;;		_Get_Analog_Value
  2091 ;;		_InitMotorRun
  2092 ;;		_InitMotorStop
  2093 ;;		_PWMReadDC
  2094 ;;		_Receive_Diag
  2095 ;;		_SetDiagAlarm
  2096 ;;		___awdiv
  2097 ;;		___wmul
  2098 ;;		_clear_timer
  2099 ;;		_read_eeprom_data
  2100 ;;		_system_init
  2101 ;; This function is called by:
  2102 ;;		Startup code after reset
  2103 ;; This function uses a non-reentrant model
  2104 ;;
  2105                           
  2106                           
  2107                           ;psect for function _main
  2108  0073                     _main:	
  2109                           
  2110                           ;main.c: 642: system_init( );
  2111                           
  2112                           ;incstack = 0
  2113                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2114  0073  2412  3180         	fcall	_system_init
  2115                           
  2116                           ;main.c: 643: clear_timer( 4 );
  2117  0075  3004               	movlw	4
  2118  0076  23B5  3180         	fcall	_clear_timer
  2119                           
  2120                           ;main.c: 644: ui8_lastTaskvalue = 0;
  2121  0078  0022               	movlb	2	; select bank2
  2122  0079  01D6               	clrf	_ui8_lastTaskvalue^(0+256)
  2123  007A                     l14216:	
  2124                           
  2125                           ;main.c: 697: {
  2126                           ;main.c: 699: if( ( ui8_Task_Cont1ms - ui8_lastTaskvalue ) != 0)
  2127  007A  0021               	movlb	1	; select bank1
  2128  007B  0851               	movf	_ui8_Task_Cont1ms^(0+128),w
  2129  007C  0023               	movlb	3	; select bank3
  2130  007D  00EA               	movwf	??_main^(0+384)
  2131  007E  01EB               	clrf	(??_main^(0+384)+1)
  2132  007F  086B               	movf	(??_main+1)^(0+384),w
  2133  0080  00ED               	movwf	((??_main+2)^(0+384)+1)
  2134  0081  0022               	movlb	2	; select bank2
  2135  0082  0856               	movf	_ui8_lastTaskvalue^(0+256),w
  2136  0083  0023               	movlb	3	; select bank3
  2137  0084  026A               	subwf	??_main^(0+384),w
  2138  0085  00EC               	movwf	(??_main+2)^(0+384)
  2139  0086  1C03               	skipc
  2140  0087  03ED               	decf	((??_main+2)^(0+384)+1),f
  2141  0088  046D               	iorwf	((??_main+2)^(0+384)+1),w
  2142  0089  1903               	btfsc	3,2
  2143  008A  287A               	goto	l14216
  2144                           
  2145                           ;main.c: 701: {
  2146                           ;main.c: 707: ui8_lastTaskvalue = ui8_Task_Cont1ms;
  2147  008B  0021               	movlb	1	; select bank1
  2148  008C  0851               	movf	_ui8_Task_Cont1ms^(0+128),w
  2149  008D  0022               	movlb	2	; select bank2
  2150  008E  00D6               	movwf	_ui8_lastTaskvalue^(0+256)
  2151                           
  2152                           ;main.c: 710: ui8_Task_Cont3ms++;
  2153  008F  0AD8               	incf	_ui8_Task_Cont3ms^(0+256),f
  2154                           
  2155                           ;main.c: 711: ui8_Task_Cont5ms++;
  2156  0090  0AD7               	incf	_ui8_Task_Cont5ms^(0+256),f
  2157                           
  2158                           ;main.c: 712: ui8_Task_Cont100ms++;
  2159  0091  0021               	movlb	1	; select bank1
  2160  0092  0AC8               	incf	_ui8_Task_Cont100ms^(0+128),f
  2161                           
  2162                           ;main.c: 771: if( ui8_error_Flags.bits.B1 == 1)
  2163  0093  0020               	movlb	0	; select bank0
  2164  0094  1CE5               	btfss	_ui8_error_Flags,1
  2165  0095  289C               	goto	l14232
  2166                           
  2167                           ;main.c: 773: {
  2168                           ;main.c: 819: PR2 = ( unsigned char ) ( 32000000UL / ( 16 * 20000UL ) ) * 2;
  2169  0096  30C8               	movlw	200
  2170  0097  009B               	movwf	27	;volatile
  2171                           
  2172                           ;main.c: 820: ui8_duty_cycle_BLDC = ui8_duty_cycle_mat * 2;
  2173  0098  0021               	movlb	1	; select bank1
  2174  0099  354B               	lslf	_ui8_duty_cycle_mat^(0+128),w
  2175  009A  0020               	movlb	0	; select bank0
  2176  009B  28B3               	goto	L1
  2177  009C                     l14232:	
  2178                           ;main.c: 829: }
  2179                           
  2180                           
  2181                           ;main.c: 832: else
  2182                           ;main.c: 833: {
  2183                           ;main.c: 880: PR2 = ( unsigned char ) ( 32000000UL / ( 16 * 20000UL ) ) * 5 / 4;
  2184  009C  307D               	movlw	125
  2185  009D  009B               	movwf	27	;volatile
  2186                           
  2187                           ;main.c: 881: ui8_duty_cycle_BLDC = ui8_duty_cycle_mat * 5 / 4;
  2188  009E  3004               	movlw	4
  2189  009F  00AA               	movwf	___awdiv@divisor
  2190  00A0  01AB               	clrf	___awdiv@divisor+1
  2191  00A1  0021               	movlb	1	; select bank1
  2192  00A2  084B               	movf	_ui8_duty_cycle_mat^(0+128),w
  2193  00A3  0020               	movlb	0	; select bank0
  2194  00A4  00A4               	movwf	___wmul@multiplier
  2195  00A5  3005               	movlw	5
  2196  00A6  01A5               	clrf	___wmul@multiplier+1
  2197  00A7  00A6               	movwf	___wmul@multiplicand
  2198  00A8  01A7               	clrf	___wmul@multiplicand+1
  2199  00A9  3196  263C  3180   	fcall	___wmul
  2200  00AC  0825               	movf	?___wmul+1,w
  2201  00AD  00AD               	movwf	___awdiv@dividend+1
  2202  00AE  0824               	movf	?___wmul,w
  2203  00AF  00AC               	movwf	___awdiv@dividend
  2204  00B0  21B7  3180         	fcall	___awdiv
  2205  00B2  082A               	movf	?___awdiv,w
  2206  00B3                     L1:	
  2207  00B3  00E4               	movwf	_ui8_duty_cycle_BLDC
  2208                           
  2209                           ;main.c: 891: }
  2210                           ;main.c: 947: Get_Analog_Value( );
  2211  00B4  2290  3180         	fcall	_Get_Analog_Value
  2212                           
  2213                           ;main.c: 993: if( ui8_Task_Cont3ms > 2 )
  2214  00B6  3003               	movlw	3
  2215  00B7  0022               	movlb	2	; select bank2
  2216  00B8  0258               	subwf	_ui8_Task_Cont3ms^(0+256),w
  2217  00B9  1803               	btfsc	3,0
  2218                           
  2219                           ;main.c: 995: {
  2220                           ;main.c: 997: ui8_Task_Cont3ms = 0;
  2221  00BA  01D8               	clrf	_ui8_Task_Cont3ms^(0+256)
  2222                           
  2223                           ;main.c: 1032: }
  2224                           ;main.c: 1038: if( ui8_Task_Cont5ms > 4 )
  2225  00BB  3005               	movlw	5
  2226  00BC  0257               	subwf	_ui8_Task_Cont5ms^(0+256),w
  2227  00BD  1C03               	skipc
  2228  00BE  298F               	goto	l14300
  2229                           
  2230                           ;main.c: 1040: {
  2231                           ;main.c: 1044: ui8_Task_Cont5ms = 0;
  2232  00BF  01D7               	clrf	_ui8_Task_Cont5ms^(0+256)
  2233  00C0  0064               	clrwdt	;# 
  2234                           
  2235                           ;main.c: 1052: ui8_PWM_dc_mat = PWMReadDC( );
  2236  00C1  2205  3180         	fcall	_PWMReadDC
  2237  00C3  0020               	movlb	0	; select bank0
  2238  00C4  00DE               	movwf	_ui8_PWM_dc_mat
  2239                           
  2240                           ;main.c: 1055: ui16_PWM_Freq_mat = ui16_PWM_Freq_In;
  2241  00C5  0022               	movlb	2	; select bank2
  2242  00C6  0828               	movf	(_ui16_PWM_Freq_In+1)^(0+256),w
  2243  00C7  00AA               	movwf	(_ui16_PWM_Freq_mat+1)^(0+256)
  2244  00C8  0827               	movf	_ui16_PWM_Freq_In^(0+256),w
  2245  00C9  00A9               	movwf	_ui16_PWM_Freq_mat^(0+256)
  2246                           
  2247                           ;main.c: 1056: ui16_Speed_mat = ui16_speed_fil;
  2248  00CA  0021               	movlb	1	; select bank1
  2249  00CB  0833               	movf	(_ui16_speed_fil+1)^(0+128),w
  2250  00CC  0020               	movlb	0	; select bank0
  2251  00CD  00D7               	movwf	_ui16_Speed_mat+1
  2252  00CE  0021               	movlb	1	; select bank1
  2253  00CF  0832               	movf	_ui16_speed_fil^(0+128),w
  2254  00D0  0020               	movlb	0	; select bank0
  2255  00D1  00D6               	movwf	_ui16_Speed_mat
  2256                           
  2257                           ;main.c: 1057: ui16_mat_inpTemp = ui16_NTC_Temp_bldc_mean_cal;
  2258  00D2  0023               	movlb	3	; select bank3
  2259  00D3  085B               	movf	(_ui16_NTC_Temp_bldc_mean_cal+1)^(0+384),w
  2260  00D4  0022               	movlb	2	; select bank2
  2261  00D5  00A6               	movwf	(_ui16_mat_inpTemp+1)^(0+256)
  2262  00D6  0023               	movlb	3	; select bank3
  2263  00D7  085A               	movf	_ui16_NTC_Temp_bldc_mean_cal^(0+384),w
  2264  00D8  0022               	movlb	2	; select bank2
  2265  00D9  00A5               	movwf	_ui16_mat_inpTemp^(0+256)
  2266                           
  2267                           ;main.c: 1058: ui8_Ki_mat = 5;
  2268  00DA  3005               	movlw	5
  2269  00DB  0023               	movlb	3	; select bank3
  2270  00DC  00CA               	movwf	_ui8_Ki_mat^(0+384)
  2271  00DD  01CB               	clrf	(_ui8_Ki_mat+1)^(0+384)
  2272                           
  2273                           ;main.c: 1059: ui8_Kp_mat = 0;
  2274  00DE  0022               	movlb	2	; select bank2
  2275  00DF  01DD               	clrf	_ui8_Kp_mat^(0+256)
  2276                           
  2277                           ;main.c: 1069: if( ui8_error_Flags.bits.B1 == 1 )
  2278  00E0  0020               	movlb	0	; select bank0
  2279  00E1  1CE5               	btfss	_ui8_error_Flags,1
  2280  00E2  28FB               	goto	l14262
  2281                           
  2282                           ;main.c: 1071: {
  2283                           ;main.c: 1074: ui16_Speed_demand_mat = ( PWM_trans_table[ ( ui8_PWM_dc_mat>>1 ) ] )>>1;
  2284  00E3  365E               	lsrf	_ui8_PWM_dc_mat,w
  2285  00E4  23D6  3180         	fcall	PL8	;call to abstracted procedure
  2286  00E6  3689               	lsrf	9,f
  2287  00E7  0023               	movlb	3	; select bank3
  2288  00E8  00C8               	movwf	_ui16_Speed_demand_mat^(0+384)
  2289  00E9  305F               	movlw	low ((_PWM_trans_table+95)| (0+32768))
  2290  00EA  01C9               	clrf	(_ui16_Speed_demand_mat+1)^(0+384)
  2291                           
  2292                           ;main.c: 1077: ui16_Speed_demand_mat_Max = ( PWM_trans_table[ 95 ] )>>1;
  2293  00EB  0084               	movwf	4
  2294  00EC  3098               	movlw	high ((_PWM_trans_table+95)| (0+32768))
  2295  00ED  0085               	movwf	5
  2296  00EE  0800               	movf	0,w	;code access
  2297  00EF  3689               	lsrf	9,f
  2298  00F0  00C6               	movwf	_ui16_Speed_demand_mat_Max^(0+384)
  2299  00F1  300B               	movlw	low ((_PWM_trans_table+11)| (0+32768))
  2300  00F2  01C7               	clrf	(_ui16_Speed_demand_mat_Max+1)^(0+384)
  2301                           
  2302                           ;main.c: 1080: ui16_Speed_demand_mat_min = ( PWM_trans_table[ 11 ] )>>1;
  2303  00F3  0084               	movwf	4
  2304  00F4  3098               	movlw	high ((_PWM_trans_table+11)| (0+32768))
  2305  00F5  0085               	movwf	5
  2306  00F6  0800               	movf	0,w	;code access
  2307  00F7  3689               	lsrf	9,f
  2308  00F8  00C4               	movwf	_ui16_Speed_demand_mat_min^(0+384)
  2309  00F9  01C5               	clrf	(_ui16_Speed_demand_mat_min+1)^(0+384)
  2310                           
  2311                           ;main.c: 1082: }
  2312  00FA  292A               	goto	l14264
  2313  00FB                     l14262:	
  2314                           
  2315                           ;main.c: 1085: else
  2316                           ;main.c: 1086: {
  2317                           ;main.c: 1089: ui16_Speed_demand_mat = PWM_trans_table[ ( ui8_PWM_dc_mat>>1 ) ] * 4 / 5;
  2318  00FB  365E               	lsrf	_ui8_PWM_dc_mat,w
  2319  00FC  23D6  3180         	fcall	PL8	;call to abstracted procedure
  2320  00FE  23E5  3180         	fcall	PL50	;call to abstracted procedure
  2321  0100  21B7  3180         	fcall	___awdiv
  2322  0102  082B               	movf	?___awdiv+1,w
  2323  0103  0023               	movlb	3	; select bank3
  2324  0104  00C9               	movwf	(_ui16_Speed_demand_mat+1)^(0+384)
  2325  0105  0020               	movlb	0	; select bank0
  2326  0106  082A               	movf	?___awdiv,w
  2327  0107  0023               	movlb	3	; select bank3
  2328  0108  00C8               	movwf	_ui16_Speed_demand_mat^(0+384)
  2329                           
  2330                           ;main.c: 1092: ui16_Speed_demand_mat_Max = ( PWM_trans_table[ 95 ] ) * 4 / 5;
  2331  0109  305F               	movlw	low ((_PWM_trans_table+95)| (0+32768))
  2332  010A  0084               	movwf	4
  2333  010B  3098               	movlw	high ((_PWM_trans_table+95)| (0+32768))
  2334  010C  0085               	movwf	5
  2335  010D  0800               	movf	0,w	;code access
  2336  010E  0020               	movlb	0	; select bank0
  2337  010F  23E5  3180         	fcall	PL50	;call to abstracted procedure
  2338  0111  21B7  3180         	fcall	___awdiv
  2339  0113  082B               	movf	?___awdiv+1,w
  2340  0114  0023               	movlb	3	; select bank3
  2341  0115  00C7               	movwf	(_ui16_Speed_demand_mat_Max+1)^(0+384)
  2342  0116  0020               	movlb	0	; select bank0
  2343  0117  082A               	movf	?___awdiv,w
  2344  0118  0023               	movlb	3	; select bank3
  2345  0119  00C6               	movwf	_ui16_Speed_demand_mat_Max^(0+384)
  2346                           
  2347                           ;main.c: 1095: ui16_Speed_demand_mat_min = ( PWM_trans_table[ 11 ] ) * 4 / 5;
  2348  011A  300B               	movlw	low ((_PWM_trans_table+11)| (0+32768))
  2349  011B  0084               	movwf	4
  2350  011C  3098               	movlw	high ((_PWM_trans_table+11)| (0+32768))
  2351  011D  0085               	movwf	5
  2352  011E  0800               	movf	0,w	;code access
  2353  011F  0020               	movlb	0	; select bank0
  2354  0120  23E5  3180         	fcall	PL50	;call to abstracted procedure
  2355  0122  21B7               	fcall	___awdiv
  2356  0123  082B               	movf	?___awdiv+1,w
  2357  0124  0023               	movlb	3	; select bank3
  2358  0125  00C5               	movwf	(_ui16_Speed_demand_mat_min+1)^(0+384)
  2359  0126  0020               	movlb	0	; select bank0
  2360  0127  082A               	movf	?___awdiv,w
  2361  0128  0023               	movlb	3	; select bank3
  2362  0129  00C4               	movwf	_ui16_Speed_demand_mat_min^(0+384)
  2363  012A                     l14264:	
  2364                           
  2365                           ;main.c: 1097: }
  2366                           ;main.c: 1132: ui8_BattVolt_mat = ( unsigned char )( ui16_fir_Bat_mittel>>2 );
  2367  012A  0022               	movlb	2	; select bank2
  2368  012B  083A               	movf	(_ui16_fir_Bat_mittel+1)^(0+256),w
  2369  012C  0023               	movlb	3	; select bank3
  2370  012D  00EB               	movwf	(??_main^(0+384)+1)
  2371  012E  0022               	movlb	2	; select bank2
  2372  012F  0839               	movf	_ui16_fir_Bat_mittel^(0+256),w
  2373  0130  0023               	movlb	3	; select bank3
  2374  0131  00EA               	movwf	??_main^(0+384)
  2375  0132  36EB               	lsrf	(??_main^(0+384)+1),f
  2376  0133  0CEA               	rrf	??_main^(0+384),f
  2377  0134  36EB               	lsrf	(??_main^(0+384)+1),f
  2378  0135  0CEA               	rrf	??_main^(0+384),f
  2379  0136  086A               	movf	??_main^(0+384),w
  2380  0137  0021               	movlb	1	; select bank1
  2381  0138  00B0               	movwf	_ui8_BattVolt_mat^(0+128)
  2382  0139  01B1               	clrf	(_ui8_BattVolt_mat+1)^(0+128)
  2383                           
  2384                           ;main.c: 1133: ui16_mat_Current = ui16_fir_IPhase_mean.w;
  2385  013A  0022               	movlb	2	; select bank2
  2386  013B  0838               	movf	(_ui16_fir_IPhase_mean+1)^(0+256),w
  2387  013C  0021               	movlb	1	; select bank1
  2388  013D  00AF               	movwf	(_ui16_mat_Current+1)^(0+128)
  2389  013E  0022               	movlb	2	; select bank2
  2390  013F  0837               	movf	_ui16_fir_IPhase_mean^(0+256),w
  2391  0140  0021               	movlb	1	; select bank1
  2392  0141  00AE               	movwf	_ui16_mat_Current^(0+128)
  2393                           
  2394                           ;main.c: 1134: bool_mat_currAlarm_bldc = MotorFlags.bits.B0;
  2395  0142  3000               	movlw	0
  2396  0143  0020               	movlb	0	; select bank0
  2397  0144  1863               	btfsc	_MotorFlags,0
  2398  0145  3001               	movlw	1
  2399  0146  0021               	movlb	1	; select bank1
  2400  0147  00CA               	movwf	_bool_mat_currAlarm_bldc^(0+128)
  2401                           
  2402                           ;main.c: 1145: bool_ControlLoopMode = 0;
  2403  0148  01C9               	clrf	_bool_ControlLoopMode^(0+128)
  2404                           
  2405                           ;main.c: 1153: BVH2_Appl_Layer( );
  2406  0149  3188  209B  3180   	fcall	_BVH2_Appl_Layer
  2407                           
  2408                           ;main.c: 1156: ui8_ResetMatlab = 0;
  2409  014C  0021               	movlb	1	; select bank1
  2410  014D  01EF               	clrf	_ui8_ResetMatlab^(0+128)
  2411                           
  2412                           ;main.c: 1162: if( ui8_duty_cycle_mat == 0 )
  2413  014E  084B               	movf	_ui8_duty_cycle_mat^(0+128),w
  2414  014F  1D03               	btfss	3,2
  2415  0150  2954               	goto	l14280
  2416                           
  2417                           ;main.c: 1164: {
  2418                           ;main.c: 1166: InitMotorStop( );
  2419  0151  21F7  3180         	fcall	_InitMotorStop
  2420                           
  2421                           ;main.c: 1169: }
  2422  0153  2956               	goto	l14282
  2423  0154                     l14280:	
  2424                           
  2425                           ;main.c: 1172: else
  2426                           ;main.c: 1173: {
  2427                           ;main.c: 1175: InitMotorRun( );
  2428  0154  2392  3180         	fcall	_InitMotorRun
  2429  0156                     l14282:	
  2430                           
  2431                           ;main.c: 1178: }
  2432                           ;main.c: 1185: ui8_error_Flags.bits.B0 = bool_PWMin_err_Alarm;
  2433  0156  0022               	movlb	2	; select bank2
  2434  0157  085C               	movf	_bool_PWMin_err_Alarm^(0+256),w
  2435  0158  3901               	andlw	1
  2436  0159  0020               	movlb	0	; select bank0
  2437  015A  1065               	bcf	_ui8_error_Flags,0
  2438  015B  1D03               	skipz
  2439  015C  1465               	bsf	_ui8_error_Flags,0
  2440                           
  2441                           ;main.c: 1186: ui8_error_Flags.bits.B1 = bool_CPU_TempAlarm;
  2442  015D  0021               	movlb	1	; select bank1
  2443  015E  085C               	movf	_bool_CPU_TempAlarm^(0+128),w
  2444  015F  3901               	andlw	1
  2445  0160  0020               	movlb	0	; select bank0
  2446  0161  10E5               	bcf	_ui8_error_Flags,1
  2447  0162  1D03               	skipz
  2448  0163  14E5               	bsf	_ui8_error_Flags,1
  2449                           
  2450                           ;main.c: 1187: ui8_error_Flags.bits.B7 = bool_CPU_TempRedAlarm;
  2451  0164  0022               	movlb	2	; select bank2
  2452  0165  085B               	movf	_bool_CPU_TempRedAlarm^(0+256),w
  2453  0166  3901               	andlw	1
  2454  0167  0020               	movlb	0	; select bank0
  2455  0168  13E5               	bcf	_ui8_error_Flags,7
  2456  0169  1D03               	skipz
  2457  016A  17E5               	bsf	_ui8_error_Flags,7
  2458                           
  2459                           ;main.c: 1188: ui8_error_Flags.bits.B2 = bool_HighCurrentAlarm;
  2460  016B  0021               	movlb	1	; select bank1
  2461  016C  0859               	movf	_bool_HighCurrentAlarm^(0+128),w
  2462  016D  3901               	andlw	1
  2463  016E  0020               	movlb	0	; select bank0
  2464  016F  1165               	bcf	_ui8_error_Flags,2
  2465  0170  1D03               	skipz
  2466  0171  1565               	bsf	_ui8_error_Flags,2
  2467                           
  2468                           ;main.c: 1189: ui8_error_Flags.bits.B3 = bool_MotorStalled;
  2469  0172  0021               	movlb	1	; select bank1
  2470  0173  085A               	movf	_bool_MotorStalled^(0+128),w
  2471  0174  3901               	andlw	1
  2472  0175  0020               	movlb	0	; select bank0
  2473  0176  11E5               	bcf	_ui8_error_Flags,3
  2474  0177  1D03               	skipz
  2475  0178  15E5               	bsf	_ui8_error_Flags,3
  2476                           
  2477                           ;main.c: 1190: ui8_error_Flags.bits.B4 = bool_DryRunningAlarm;
  2478  0179  0021               	movlb	1	; select bank1
  2479  017A  085B               	movf	_bool_DryRunningAlarm^(0+128),w
  2480  017B  3901               	andlw	1
  2481  017C  0020               	movlb	0	; select bank0
  2482  017D  1265               	bcf	_ui8_error_Flags,4
  2483  017E  1D03               	skipz
  2484  017F  1665               	bsf	_ui8_error_Flags,4
  2485                           
  2486                           ;main.c: 1191: ui8_error_Flags.bits.B6 = bool_UbatAlarm;
  2487  0180  0022               	movlb	2	; select bank2
  2488  0181  085A               	movf	_bool_UbatAlarm^(0+256),w
  2489  0182  3901               	andlw	1
  2490  0183  0020               	movlb	0	; select bank0
  2491  0184  1365               	bcf	_ui8_error_Flags,6
  2492  0185  1D03               	skipz
  2493  0186  1765               	bsf	_ui8_error_Flags,6
  2494                           
  2495                           ;main.c: 1192: ui8_error_Flags.bits.B5 = bool_PWMin_Freq_err_Alarm;
  2496  0187  0022               	movlb	2	; select bank2
  2497  0188  0859               	movf	_bool_PWMin_Freq_err_Alarm^(0+256),w
  2498  0189  3901               	andlw	1
  2499  018A  0020               	movlb	0	; select bank0
  2500  018B  12E5               	bcf	_ui8_error_Flags,5
  2501  018C  1D03               	skipz
  2502  018D  16E5               	bsf	_ui8_error_Flags,5
  2503                           
  2504                           ;main.c: 1197: MotorFlags.bits.B0 = 0;
  2505  018E  1063               	bcf	_MotorFlags,0
  2506  018F                     l14300:	
  2507                           
  2508                           ;main.c: 1253: }
  2509                           ;main.c: 1259: if( ui8_Task_Cont100ms == 25 )
  2510  018F  3019               	movlw	25
  2511  0190  0021               	movlb	1	; select bank1
  2512  0191  0648               	xorwf	_ui8_Task_Cont100ms^(0+128),w
  2513  0192  1D03               	btfss	3,2
  2514  0193  29A0               	goto	l14310
  2515                           
  2516                           ;main.c: 1261: {
  2517                           ;main.c: 1272: SetDiagAlarm( );
  2518  0194  2365               	fcall	_SetDiagAlarm
  2519                           
  2520                           ;main.c: 1311: if ((read_eeprom_data(0x55)==0x55) || (RC5 == 0))
  2521  0195  3055               	movlw	85
  2522  0196  3195  25BD  3180   	fcall	_read_eeprom_data
  2523  0199  3A55               	xorlw	85
  2524  019A  1D03               	btfss	3,2
  2525  019B  1E8E               	btfss	14,5	;volatile
  2526  019C  29A0               	goto	l14310
  2527                           
  2528                           ;main.c: 1320: else
  2529                           ;main.c: 1321: {
  2530                           ;main.c: 1324: Receive_Diag(0x11);
  2531  019D  3011               	movlw	17
  2532  019E  2300  3180         	fcall	_Receive_Diag
  2533  01A0                     l14310:	
  2534                           
  2535                           ;main.c: 1328: }
  2536                           ;main.c: 1336: }
  2537                           ;main.c: 1342: if( ui8_Task_Cont100ms == 37 )
  2538  01A0  3025               	movlw	37
  2539  01A1  0021               	movlb	1	; select bank1
  2540  01A2  0648               	xorwf	_ui8_Task_Cont100ms^(0+128),w
  2541  01A3  1D03               	btfss	3,2
  2542  01A4  29B0               	goto	l14322
  2543                           
  2544                           ;main.c: 1344: {
  2545                           ;main.c: 1350: if ((read_eeprom_data(0x55)==0x55) || (RC5==0) )
  2546  01A5  3055               	movlw	85
  2547  01A6  3195  25BD  3180   	fcall	_read_eeprom_data
  2548  01A9  3A55               	xorlw	85
  2549  01AA  1D03               	btfss	3,2
  2550  01AB  1E8E               	btfss	14,5	;volatile
  2551  01AC  29B0               	goto	l14322
  2552                           
  2553                           ;main.c: 1359: else
  2554                           ;main.c: 1360: {
  2555                           ;main.c: 1363: EOL();
  2556  01AD  3191  212A  3180   	fcall	_EOL
  2557  01B0                     l14322:	
  2558                           
  2559                           ;main.c: 1474: }
  2560                           ;main.c: 1480: if( ui8_Task_Cont100ms > 100 )
  2561  01B0  3065               	movlw	101
  2562  01B1  0021               	movlb	1	; select bank1
  2563  01B2  0248               	subwf	_ui8_Task_Cont100ms^(0+128),w
  2564  01B3  1803               	btfsc	3,0
  2565                           
  2566                           ;main.c: 1482: {
  2567                           ;main.c: 1486: ui8_Task_Cont100ms = 0;
  2568  01B4  01C8               	clrf	_ui8_Task_Cont100ms^(0+128)
  2569                           
  2570                           ;main.c: 1526: }
  2571                           ;main.c: 1554: bool_start_demand_mat = 0;
  2572  01B5  01E6               	clrf	_bool_start_demand_mat^(0+128)
  2573                           
  2574                           ;main.c: 1560: }
  2575  01B6  287A               	goto	l14216
  2576  01B7                     __end_of_main:	
  2577  01B7                     __ptext16:	
  2578 ;; *************** function ___awdiv *****************
  2579 ;; Defined at:
  2580 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
  2581 ;; Parameters:    Size  Location     Type
  2582 ;;  divisor         2   10[BANK0 ] int 
  2583 ;;  dividend        2   12[BANK0 ] int 
  2584 ;; Auto vars:     Size  Location     Type
  2585 ;;  quotient        2   16[BANK0 ] int 
  2586 ;;  sign            1   15[BANK0 ] unsigned char 
  2587 ;;  counter         1   14[BANK0 ] unsigned char 
  2588 ;; Return value:  Size  Location     Type
  2589 ;;                  2   10[BANK0 ] int 
  2590 ;; Registers used:
  2591 ;;		wreg, status,2, status,0
  2592 ;; Tracked objects:
  2593 ;;		On entry : 1F/0
  2594 ;;		On exit  : 1F/0
  2595 ;;		Unchanged: 0/0
  2596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2597 ;;      Params:         0       4       0       0       0       0       0       0
  2598 ;;      Locals:         0       4       0       0       0       0       0       0
  2599 ;;      Temps:          0       0       0       0       0       0       0       0
  2600 ;;      Totals:         0       8       0       0       0       0       0       0
  2601 ;;Total ram usage:        8 bytes
  2602 ;; Hardware stack levels used:    1
  2603 ;; Hardware stack levels required when called:    3
  2604 ;; This function calls:
  2605 ;;		Nothing
  2606 ;; This function is called by:
  2607 ;;		_main
  2608 ;; This function uses a non-reentrant model
  2609 ;;
  2610                           
  2611                           
  2612                           ;psect for function ___awdiv
  2613  01B7                     ___awdiv:	
  2614                           
  2615                           ;incstack = 0
  2616                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2617  01B7  01AF               	clrf	___awdiv@sign
  2618  01B8  1FAB               	btfss	___awdiv@divisor+1,7
  2619  01B9  29C1               	goto	l9064
  2620  01BA  09AA               	comf	___awdiv@divisor,f
  2621  01BB  09AB               	comf	___awdiv@divisor+1,f
  2622  01BC  0AAA               	incf	___awdiv@divisor,f
  2623  01BD  1903               	skipnz
  2624  01BE  0AAB               	incf	___awdiv@divisor+1,f
  2625  01BF  01AF               	clrf	___awdiv@sign
  2626  01C0  0AAF               	incf	___awdiv@sign,f
  2627  01C1                     l9064:	
  2628  01C1  1FAD               	btfss	___awdiv@dividend+1,7
  2629  01C2  29CA               	goto	l9070
  2630  01C3  09AC               	comf	___awdiv@dividend,f
  2631  01C4  09AD               	comf	___awdiv@dividend+1,f
  2632  01C5  0AAC               	incf	___awdiv@dividend,f
  2633  01C6  1903               	skipnz
  2634  01C7  0AAD               	incf	___awdiv@dividend+1,f
  2635  01C8  3001               	movlw	1
  2636  01C9  06AF               	xorwf	___awdiv@sign,f
  2637  01CA                     l9070:	
  2638  01CA  01B0               	clrf	___awdiv@quotient
  2639  01CB  01B1               	clrf	___awdiv@quotient+1
  2640  01CC  082A               	movf	___awdiv@divisor,w
  2641  01CD  042B               	iorwf	___awdiv@divisor+1,w
  2642  01CE  1903               	btfsc	3,2
  2643  01CF  29EA               	goto	l9092
  2644  01D0  01AE               	clrf	___awdiv@counter
  2645  01D1                     L11:	
  2646  01D1  0AAE               	incf	___awdiv@counter,f
  2647  01D2  1BAB               	btfsc	___awdiv@divisor+1,7
  2648  01D3  29D7               	goto	l9080
  2649  01D4  35AA               	lslf	___awdiv@divisor,f
  2650  01D5  0DAB               	rlf	___awdiv@divisor+1,f
  2651  01D6  29D1               	goto	L11
  2652  01D7                     l9080:	
  2653  01D7  35B0               	lslf	___awdiv@quotient,f
  2654  01D8  0DB1               	rlf	___awdiv@quotient+1,f
  2655  01D9  082B               	movf	___awdiv@divisor+1,w
  2656  01DA  022D               	subwf	___awdiv@dividend+1,w
  2657  01DB  1D03               	skipz
  2658  01DC  29DF               	goto	u6905
  2659  01DD  082A               	movf	___awdiv@divisor,w
  2660  01DE  022C               	subwf	___awdiv@dividend,w
  2661  01DF                     u6905:	
  2662  01DF  1C03               	skipc
  2663  01E0  29E6               	goto	l9088
  2664  01E1  082A               	movf	___awdiv@divisor,w
  2665  01E2  02AC               	subwf	___awdiv@dividend,f
  2666  01E3  082B               	movf	___awdiv@divisor+1,w
  2667  01E4  3BAD               	subwfb	___awdiv@dividend+1,f
  2668  01E5  1430               	bsf	___awdiv@quotient,0
  2669  01E6                     l9088:	
  2670  01E6  36AB               	lsrf	___awdiv@divisor+1,f
  2671  01E7  0CAA               	rrf	___awdiv@divisor,f
  2672  01E8  0BAE               	decfsz	___awdiv@counter,f
  2673  01E9  29D7               	goto	l9080
  2674  01EA                     l9092:	
  2675  01EA  082F               	movf	___awdiv@sign,w
  2676  01EB  1903               	btfsc	3,2
  2677  01EC  29F2               	goto	l9096
  2678  01ED  09B0               	comf	___awdiv@quotient,f
  2679  01EE  09B1               	comf	___awdiv@quotient+1,f
  2680  01EF  0AB0               	incf	___awdiv@quotient,f
  2681  01F0  1903               	skipnz
  2682  01F1  0AB1               	incf	___awdiv@quotient+1,f
  2683  01F2                     l9096:	
  2684  01F2  0831               	movf	___awdiv@quotient+1,w
  2685  01F3  00AB               	movwf	?___awdiv+1
  2686  01F4  0830               	movf	___awdiv@quotient,w
  2687  01F5  00AA               	movwf	?___awdiv
  2688  01F6  0008               	return
  2689  01F7                     __end_of___awdiv:	
  2690  01F7                     __ptext38:	
  2691 ;; *************** function _InitMotorStop *****************
  2692 ;; Defined at:
  2693 ;;		line 2221 in file "../bldc.c"
  2694 ;; Parameters:    Size  Location     Type
  2695 ;;		None
  2696 ;; Auto vars:     Size  Location     Type
  2697 ;;		None
  2698 ;; Return value:  Size  Location     Type
  2699 ;;                  1    wreg      void 
  2700 ;; Registers used:
  2701 ;;		status,2
  2702 ;; Tracked objects:
  2703 ;;		On entry : 1E/1
  2704 ;;		On exit  : 1F/0
  2705 ;;		Unchanged: 0/0
  2706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2707 ;;      Params:         0       0       0       0       0       0       0       0
  2708 ;;      Locals:         0       0       0       0       0       0       0       0
  2709 ;;      Temps:          0       0       0       0       0       0       0       0
  2710 ;;      Totals:         0       0       0       0       0       0       0       0
  2711 ;;Total ram usage:        0 bytes
  2712 ;; Hardware stack levels used:    1
  2713 ;; Hardware stack levels required when called:    3
  2714 ;; This function calls:
  2715 ;;		Nothing
  2716 ;; This function is called by:
  2717 ;;		_EOL
  2718 ;;		_main
  2719 ;; This function uses a non-reentrant model
  2720 ;;
  2721                           
  2722                           
  2723                           ;psect for function _InitMotorStop
  2724  01F7                     _InitMotorStop:	
  2725                           
  2726                           ;bldc.c: 2226: if( 1 == MotorFlags.bits.B6 )
  2727                           
  2728                           ;incstack = 0
  2729                           ; Regs used in _InitMotorStop: [status,2]
  2730  01F7  0020               	movlb	0	; select bank0
  2731  01F8  1F63               	btfss	_MotorFlags,6
  2732  01F9  0008               	return
  2733                           
  2734                           ;bldc.c: 2229: {
  2735                           ;bldc.c: 2231: LATC1 = 0;
  2736  01FA  0022               	movlb	2	; select bank2
  2737  01FB  108E               	bcf	14,1	;volatile
  2738                           
  2739                           ;bldc.c: 2232: LATC3 = 0;
  2740  01FC  118E               	bcf	14,3	;volatile
  2741                           
  2742                           ;bldc.c: 2233: LATC4 = 0;
  2743  01FD  120E               	bcf	14,4	;volatile
  2744                           
  2745                           ;bldc.c: 2235: CCP1ASE = 0;
  2746  01FE  0025               	movlb	5	; select bank5
  2747  01FF  1395               	bcf	21,7	;volatile
  2748                           
  2749                           ;bldc.c: 2236: CCPR1L = 0;
  2750  0200  0191               	clrf	17	;volatile
  2751                           
  2752                           ;bldc.c: 2237: MotorFlags.bits.B6 = 0;
  2753  0201  0020               	movlb	0	; select bank0
  2754  0202  1363               	bcf	_MotorFlags,6
  2755                           
  2756                           ;bldc.c: 2238: MotorFlags.bits.B7 = 0;
  2757  0203  13E3               	bcf	_MotorFlags,7
  2758  0204  0008               	return
  2759  0205                     __end_of_InitMotorStop:	
  2760  0205                     __ptext30:	
  2761 ;; *************** function _PWMReadDC *****************
  2762 ;; Defined at:
  2763 ;;		line 361 in file "../pwm.c"
  2764 ;; Parameters:    Size  Location     Type
  2765 ;;		None
  2766 ;; Auto vars:     Size  Location     Type
  2767 ;;		None
  2768 ;; Return value:  Size  Location     Type
  2769 ;;                  1    wreg      unsigned char 
  2770 ;; Registers used:
  2771 ;;		wreg, status,2, status,0, pclath, cstack
  2772 ;; Tracked objects:
  2773 ;;		On entry : 0/2
  2774 ;;		On exit  : 1F/2
  2775 ;;		Unchanged: 0/0
  2776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2777 ;;      Params:         0       0       0       0       0       0       0       0
  2778 ;;      Locals:         0       0       0       0       0       0       0       0
  2779 ;;      Temps:          0       0       0       0       0       0       0       0
  2780 ;;      Totals:         0       0       0       0       0       0       0       0
  2781 ;;Total ram usage:        0 bytes
  2782 ;; Hardware stack levels used:    1
  2783 ;; Hardware stack levels required when called:    4
  2784 ;; This function calls:
  2785 ;;		___ltdiv
  2786 ;;		___tmul
  2787 ;; This function is called by:
  2788 ;;		_EOL
  2789 ;;		_main
  2790 ;; This function uses a non-reentrant model
  2791 ;;
  2792                           
  2793                           
  2794                           ;psect for function _PWMReadDC
  2795  0205                     _PWMReadDC:	
  2796                           
  2797                           ;pwm.c: 366: ui8_PWMinDC_sav = (unsigned char) ( 200*(unsigned short long )(ui16_Duty_Cy
      +                          cle_In) / ui16_PWM_Freq_In ) ;
  2798                           
  2799                           ;incstack = 0
  2800                           ; Regs used in _PWMReadDC: [wreg+status,2+status,0+pclath+cstack]
  2801  0205  0022               	movlb	2	; select bank2
  2802  0206  0827               	movf	_ui16_PWM_Freq_In^(0+256),w
  2803  0207  0020               	movlb	0	; select bank0
  2804  0208  00AD               	movwf	___ltdiv@divisor
  2805  0209  0022               	movlb	2	; select bank2
  2806  020A  0828               	movf	(_ui16_PWM_Freq_In+1)^(0+256),w
  2807  020B  0020               	movlb	0	; select bank0
  2808  020C  00AE               	movwf	___ltdiv@divisor+1
  2809  020D  01AF               	clrf	___ltdiv@divisor+2
  2810  020E  0022               	movlb	2	; select bank2
  2811  020F  0860               	movf	_ui16_Duty_Cycle_In^(0+256),w
  2812  0210  0020               	movlb	0	; select bank0
  2813  0211  00A4               	movwf	___tmul@multiplier
  2814  0212  0022               	movlb	2	; select bank2
  2815  0213  0861               	movf	(_ui16_Duty_Cycle_In+1)^(0+256),w
  2816  0214  0020               	movlb	0	; select bank0
  2817  0215  00A5               	movwf	___tmul@multiplier+1
  2818  0216  30C8               	movlw	200
  2819  0217  01A6               	clrf	___tmul@multiplier+2
  2820  0218  00A7               	movwf	___tmul@multiplicand
  2821  0219  01A8               	clrf	___tmul@multiplicand+1
  2822  021A  01A9               	clrf	___tmul@multiplicand+2
  2823  021B  2273  3180         	fcall	___tmul
  2824  021D  0824               	movf	?___tmul,w
  2825  021E  00B0               	movwf	___ltdiv@dividend
  2826  021F  0825               	movf	?___tmul+1,w
  2827  0220  00B1               	movwf	___ltdiv@dividend+1
  2828  0221  0826               	movf	?___tmul+2,w
  2829  0222  00B2               	movwf	___ltdiv@dividend+2
  2830  0223  2241  3180         	fcall	___ltdiv
  2831  0225  082D               	movf	?___ltdiv,w
  2832  0226  0021               	movlb	1	; select bank1
  2833  0227  00C6               	movwf	_ui8_PWMinDC_sav^(0+128)
  2834                           
  2835                           ;pwm.c: 368: if( ui8_PWMinDC_sav == 0 )
  2836  0228  0846               	movf	_ui8_PWMinDC_sav^(0+128),w
  2837  0229  1D03               	btfss	3,2
  2838  022A  2A36               	goto	l12346
  2839                           
  2840                           ;pwm.c: 370: {
  2841                           ;pwm.c: 374: ui8_PWMin_failCnt++;
  2842  022B  0022               	movlb	2	; select bank2
  2843  022C  3005               	movlw	5
  2844  022D  0AD2               	incf	_ui8_PWMin_failCnt^(0+256),f
  2845                           
  2846                           ;pwm.c: 376: if( ui8_PWMin_failCnt >= 5 )
  2847  022E  0252               	subwf	_ui8_PWMin_failCnt^(0+256),w
  2848  022F  1C03               	skipc
  2849  0230  2A3E               	goto	l12352
  2850                           
  2851                           ;pwm.c: 378: {
  2852                           ;pwm.c: 380: ui8_Duty_Cycle_In_Ratio = ui8_PWMinDC_sav;
  2853  0231  0021               	movlb	1	; select bank1
  2854  0232  0846               	movf	_ui8_PWMinDC_sav^(0+128),w
  2855  0233  0022               	movlb	2	; select bank2
  2856  0234  00D3               	movwf	_ui8_Duty_Cycle_In_Ratio^(0+256)
  2857  0235  2A3E               	goto	l12352
  2858  0236                     l12346:	
  2859                           
  2860                           ;pwm.c: 391: else
  2861                           ;pwm.c: 392: {
  2862                           ;pwm.c: 396: ui8_PWMin_failCnt = 0;
  2863  0236  0022               	movlb	2	; select bank2
  2864  0237  01D2               	clrf	_ui8_PWMin_failCnt^(0+256)
  2865                           
  2866                           ;pwm.c: 399: ui8_Duty_Cycle_In_Ratio = ui8_PWMinDC_sav;
  2867  0238  0021               	movlb	1	; select bank1
  2868  0239  0846               	movf	_ui8_PWMinDC_sav^(0+128),w
  2869  023A  0022               	movlb	2	; select bank2
  2870  023B  00D3               	movwf	_ui8_Duty_Cycle_In_Ratio^(0+256)
  2871                           
  2872                           ;pwm.c: 401: ui16_Duty_Cycle_In = 0;
  2873  023C  01E0               	clrf	_ui16_Duty_Cycle_In^(0+256)
  2874  023D  01E1               	clrf	(_ui16_Duty_Cycle_In+1)^(0+256)
  2875  023E                     l12352:	
  2876                           
  2877                           ;pwm.c: 403: }
  2878                           ;pwm.c: 408: return ( 200 - ui8_Duty_Cycle_In_Ratio );
  2879  023E  0853               	movf	_ui8_Duty_Cycle_In_Ratio^(0+256),w
  2880  023F  3CC8               	sublw	200
  2881  0240  0008               	return
  2882  0241                     __end_of_PWMReadDC:	
  2883  0241                     __ptext32:	
  2884 ;; *************** function ___ltdiv *****************
  2885 ;; Defined at:
  2886 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ltdiv.c"
  2887 ;; Parameters:    Size  Location     Type
  2888 ;;  divisor         3   13[BANK0 ] unsigned um
  2889 ;;  dividend        3   16[BANK0 ] unsigned um
  2890 ;; Auto vars:     Size  Location     Type
  2891 ;;  quotient        3   19[BANK0 ] unsigned um
  2892 ;;  counter         1   22[BANK0 ] unsigned char 
  2893 ;; Return value:  Size  Location     Type
  2894 ;;                  3   13[BANK0 ] unsigned um
  2895 ;; Registers used:
  2896 ;;		wreg, status,2, status,0
  2897 ;; Tracked objects:
  2898 ;;		On entry : 1F/0
  2899 ;;		On exit  : 1F/0
  2900 ;;		Unchanged: 0/0
  2901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2902 ;;      Params:         0       6       0       0       0       0       0       0
  2903 ;;      Locals:         0       4       0       0       0       0       0       0
  2904 ;;      Temps:          0       0       0       0       0       0       0       0
  2905 ;;      Totals:         0      10       0       0       0       0       0       0
  2906 ;;Total ram usage:       10 bytes
  2907 ;; Hardware stack levels used:    1
  2908 ;; Hardware stack levels required when called:    3
  2909 ;; This function calls:
  2910 ;;		Nothing
  2911 ;; This function is called by:
  2912 ;;		_PWMReadDC
  2913 ;; This function uses a non-reentrant model
  2914 ;;
  2915                           
  2916                           
  2917                           ;psect for function ___ltdiv
  2918  0241                     ___ltdiv:	
  2919                           
  2920                           ;incstack = 0
  2921                           ; Regs used in ___ltdiv: [wreg+status,2+status,0]
  2922  0241  01B3               	clrf	___ltdiv@quotient
  2923  0242  01B4               	clrf	___ltdiv@quotient+1
  2924  0243  01B5               	clrf	___ltdiv@quotient+2
  2925  0244  082F               	movf	___ltdiv@divisor+2,w
  2926  0245  042E               	iorwf	___ltdiv@divisor+1,w
  2927  0246  042D               	iorwf	___ltdiv@divisor,w
  2928  0247  1903               	skipnz
  2929  0248  2A6C               	goto	l12254
  2930  0249  01B6               	clrf	___ltdiv@counter
  2931  024A                     L17:	
  2932  024A  0AB6               	incf	___ltdiv@counter,f
  2933  024B  1BAF               	btfsc	___ltdiv@divisor+2,7
  2934  024C  2A51               	goto	l12242
  2935  024D  35AD               	lslf	___ltdiv@divisor,f
  2936  024E  0DAE               	rlf	___ltdiv@divisor+1,f
  2937  024F  0DAF               	rlf	___ltdiv@divisor+2,f
  2938  0250  2A4A               	goto	L17
  2939  0251                     l12242:	
  2940  0251  35B3               	lslf	___ltdiv@quotient,f
  2941  0252  0DB4               	rlf	___ltdiv@quotient+1,f
  2942  0253  0DB5               	rlf	___ltdiv@quotient+2,f
  2943  0254  082F               	movf	___ltdiv@divisor+2,w
  2944  0255  0232               	subwf	___ltdiv@dividend+2,w
  2945  0256  1D03               	skipz
  2946  0257  2A5E               	goto	u10475
  2947  0258  082E               	movf	___ltdiv@divisor+1,w
  2948  0259  0231               	subwf	___ltdiv@dividend+1,w
  2949  025A  1D03               	skipz
  2950  025B  2A5E               	goto	u10475
  2951  025C  082D               	movf	___ltdiv@divisor,w
  2952  025D  0230               	subwf	___ltdiv@dividend,w
  2953  025E                     u10475:	
  2954  025E  1C03               	skipc
  2955  025F  2A67               	goto	l12250
  2956  0260  082D               	movf	___ltdiv@divisor,w
  2957  0261  02B0               	subwf	___ltdiv@dividend,f
  2958  0262  082E               	movf	___ltdiv@divisor+1,w
  2959  0263  3BB1               	subwfb	___ltdiv@dividend+1,f
  2960  0264  082F               	movf	___ltdiv@divisor+2,w
  2961  0265  3BB2               	subwfb	___ltdiv@dividend+2,f
  2962  0266  1433               	bsf	___ltdiv@quotient,0
  2963  0267                     l12250:	
  2964  0267  36AF               	lsrf	___ltdiv@divisor+2,f
  2965  0268  0CAE               	rrf	___ltdiv@divisor+1,f
  2966  0269  0CAD               	rrf	___ltdiv@divisor,f
  2967  026A  0BB6               	decfsz	___ltdiv@counter,f
  2968  026B  2A51               	goto	l12242
  2969  026C                     l12254:	
  2970  026C  0833               	movf	___ltdiv@quotient,w
  2971  026D  00AD               	movwf	?___ltdiv
  2972  026E  0834               	movf	___ltdiv@quotient+1,w
  2973  026F  00AE               	movwf	?___ltdiv+1
  2974  0270  0835               	movf	___ltdiv@quotient+2,w
  2975  0271  00AF               	movwf	?___ltdiv+2
  2976  0272  0008               	return
  2977  0273                     __end_of___ltdiv:	
  2978  0273                     __ptext31:	
  2979 ;; *************** function ___tmul *****************
  2980 ;; Defined at:
  2981 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul24.c"
  2982 ;; Parameters:    Size  Location     Type
  2983 ;;  multiplier      3    4[BANK0 ] unsigned um
  2984 ;;  multiplicand    3    7[BANK0 ] unsigned um
  2985 ;; Auto vars:     Size  Location     Type
  2986 ;;  product         3   10[BANK0 ] unsigned um
  2987 ;; Return value:  Size  Location     Type
  2988 ;;                  3    4[BANK0 ] unsigned um
  2989 ;; Registers used:
  2990 ;;		wreg, status,2, status,0
  2991 ;; Tracked objects:
  2992 ;;		On entry : 1F/0
  2993 ;;		On exit  : 1F/0
  2994 ;;		Unchanged: 0/0
  2995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2996 ;;      Params:         0       6       0       0       0       0       0       0
  2997 ;;      Locals:         0       3       0       0       0       0       0       0
  2998 ;;      Temps:          0       0       0       0       0       0       0       0
  2999 ;;      Totals:         0       9       0       0       0       0       0       0
  3000 ;;Total ram usage:        9 bytes
  3001 ;; Hardware stack levels used:    1
  3002 ;; Hardware stack levels required when called:    3
  3003 ;; This function calls:
  3004 ;;		Nothing
  3005 ;; This function is called by:
  3006 ;;		_PWMReadDC
  3007 ;; This function uses a non-reentrant model
  3008 ;;
  3009                           
  3010                           
  3011                           ;psect for function ___tmul
  3012  0273                     ___tmul:	
  3013                           
  3014                           ;incstack = 0
  3015                           ; Regs used in ___tmul: [wreg+status,2+status,0]
  3016  0273  01AA               	clrf	___tmul@product
  3017  0274  01AB               	clrf	___tmul@product+1
  3018  0275  01AC               	clrf	___tmul@product+2
  3019  0276                     l2067:	
  3020  0276  1C24               	btfss	___tmul@multiplier,0
  3021  0277  2A7E               	goto	l12224
  3022  0278  0827               	movf	___tmul@multiplicand,w
  3023  0279  07AA               	addwf	___tmul@product,f
  3024  027A  0828               	movf	___tmul@multiplicand+1,w
  3025  027B  3DAB               	addwfc	___tmul@product+1,f
  3026  027C  0829               	movf	___tmul@multiplicand+2,w
  3027  027D  3DAC               	addwfc	___tmul@product+2,f
  3028  027E                     l12224:	
  3029  027E  35A7               	lslf	___tmul@multiplicand,f
  3030  027F  0DA8               	rlf	___tmul@multiplicand+1,f
  3031  0280  0DA9               	rlf	___tmul@multiplicand+2,f
  3032  0281  36A6               	lsrf	___tmul@multiplier+2,f
  3033  0282  0CA5               	rrf	___tmul@multiplier+1,f
  3034  0283  0CA4               	rrf	___tmul@multiplier,f
  3035  0284  0826               	movf	___tmul@multiplier+2,w
  3036  0285  0425               	iorwf	___tmul@multiplier+1,w
  3037  0286  0424               	iorwf	___tmul@multiplier,w
  3038  0287  1D03               	skipz
  3039  0288  2A76               	goto	l2067
  3040  0289  082A               	movf	___tmul@product,w
  3041  028A  00A4               	movwf	?___tmul
  3042  028B  082B               	movf	___tmul@product+1,w
  3043  028C  00A5               	movwf	?___tmul+1
  3044  028D  082C               	movf	___tmul@product+2,w
  3045  028E  00A6               	movwf	?___tmul+2
  3046  028F  0008               	return
  3047  0290                     __end_of___tmul:	
  3048  0290                     __ptext20:	
  3049 ;; *************** function _Get_Analog_Value *****************
  3050 ;; Defined at:
  3051 ;;		line 442 in file "../adc.c"
  3052 ;; Parameters:    Size  Location     Type
  3053 ;;		None
  3054 ;; Auto vars:     Size  Location     Type
  3055 ;;		None
  3056 ;; Return value:  Size  Location     Type
  3057 ;;                  1    wreg      void 
  3058 ;; Registers used:
  3059 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3060 ;; Tracked objects:
  3061 ;;		On entry : 1F/0
  3062 ;;		On exit  : 1F/3
  3063 ;;		Unchanged: 0/0
  3064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3065 ;;      Params:         0       0       0       0       0       0       0       0
  3066 ;;      Locals:         0       0       0       0       0       0       0       0
  3067 ;;      Temps:          0       0       0       0       0       0       0       0
  3068 ;;      Totals:         0       0       0       0       0       0       0       0
  3069 ;;Total ram usage:        0 bytes
  3070 ;; Hardware stack levels used:    1
  3071 ;; Hardware stack levels required when called:    4
  3072 ;; This function calls:
  3073 ;;		_FILTER_IPhase
  3074 ;;		_FILTER_Temp
  3075 ;;		_FILTER_Ubat
  3076 ;; This function is called by:
  3077 ;;		_main
  3078 ;; This function uses a non-reentrant model
  3079 ;;
  3080                           
  3081                           
  3082                           ;psect for function _Get_Analog_Value
  3083  0290                     _Get_Analog_Value:	
  3084                           
  3085                           ;adc.c: 446: FILTER_Ubat( );
  3086                           
  3087                           ;incstack = 0
  3088                           ; Regs used in _Get_Analog_Value: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3089  0290  2295  3180         	fcall	_FILTER_Ubat
  3090                           
  3091                           ;adc.c: 447: FILTER_IPhase( );
  3092  0292  23EF  3180         	fcall	_FILTER_IPhase
  3093                           
  3094                           ;adc.c: 448: FILTER_Temp( );
  3095  0294  2EEE               	ljmp	l6392
  3096  0295                     __end_of_Get_Analog_Value:	
  3097  0295                     __ptext21:	
  3098 ;; *************** function _FILTER_Ubat *****************
  3099 ;; Defined at:
  3100 ;;		line 264 in file "../adc.c"
  3101 ;; Parameters:    Size  Location     Type
  3102 ;;		None
  3103 ;; Auto vars:     Size  Location     Type
  3104 ;;		None
  3105 ;; Return value:  Size  Location     Type
  3106 ;;                  1    wreg      void 
  3107 ;; Registers used:
  3108 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  3109 ;; Tracked objects:
  3110 ;;		On entry : 1F/0
  3111 ;;		On exit  : 1D/1
  3112 ;;		Unchanged: 0/0
  3113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3114 ;;      Params:         0       0       0       0       0       0       0       0
  3115 ;;      Locals:         0       0       0       0       0       0       0       0
  3116 ;;      Temps:          0      12       0       0       0       0       0       0
  3117 ;;      Totals:         0      12       0       0       0       0       0       0
  3118 ;;Total ram usage:       12 bytes
  3119 ;; Hardware stack levels used:    1
  3120 ;; Hardware stack levels required when called:    3
  3121 ;; This function calls:
  3122 ;;		Nothing
  3123 ;; This function is called by:
  3124 ;;		_Get_Analog_Value
  3125 ;; This function uses a non-reentrant model
  3126 ;;
  3127                           
  3128                           
  3129                           ;psect for function _FILTER_Ubat
  3130  0295                     _FILTER_Ubat:	
  3131                           
  3132                           ;adc.c: 271: inputArray1[ windowPtr1 ] = ui16_Ubat_bldc.w;
  3133                           
  3134                           ;incstack = 0
  3135                           ; Regs used in _FILTER_Ubat: [wreg-fsr1h+status,2+status,0]
  3136  0295  258F  3180         	fcall	PL96	;call to abstracted procedure
  3137  0297  0020               	movlb	0	; select bank0
  3138  0298  0866               	movf	_ui16_Ubat_bldc,w	;volatile
  3139  0299  3FC0               	movwi [0]fsr1
  3140  029A  0867               	movf	_ui16_Ubat_bldc+1,w	;volatile
  3141  029B  3FC1               	movwi [1]fsr1
  3142                           
  3143                           ;adc.c: 272: filter1 = inputArray1[ 0 ] + inputArray1[ 1 ] + inputArray1[ 2 ] + inputArr
      +                          ay1[ 3 ] + inputArray1[ 4 ] + inputArray1[ 5 ] + inputArray1[ 6 ] + inputArray1[ 7 ];
  3144  029C  304E               	movlw	((low (_inputArray1| (0+512)))& (0+255)+14)
  3145  029D  0086               	movwf	6
  3146  029E  304C               	movlw	((low (_inputArray1| (0+512)))& (0+255)+12)
  3147  029F  0084               	movwf	4
  3148  02A0  3002               	movlw	2	; select bank4/5
  3149  02A1  0085               	movwf	5
  3150  02A2  0024               	movlb	4	; select bank4
  3151  02A3  0844               	movf	(_inputArray1^(0+512)+4),w
  3152  02A4  0742               	addwf	(_inputArray1^(0+512)+2),w
  3153  02A5  0020               	movlb	0	; select bank0
  3154  02A6  00A4               	movwf	??_FILTER_Ubat
  3155  02A7  0024               	movlb	4	; select bank4
  3156  02A8  0845               	movf	((_inputArray1+1)^(0+512)+4),w
  3157  02A9  3D43               	addwfc	((_inputArray1+1)^(0+512)+2),w
  3158  02AA  0020               	movlb	0	; select bank0
  3159  02AB  00A5               	movwf	??_FILTER_Ubat+1
  3160  02AC  0024               	movlb	4	; select bank4
  3161  02AD  0846               	movf	(_inputArray1^(0+512)+6),w
  3162  02AE  0020               	movlb	0	; select bank0
  3163  02AF  0724               	addwf	??_FILTER_Ubat,w
  3164  02B0  00A6               	movwf	??_FILTER_Ubat+2
  3165  02B1  0024               	movlb	4	; select bank4
  3166  02B2  0847               	movf	((_inputArray1+1)^(0+512)+6),w
  3167  02B3  0020               	movlb	0	; select bank0
  3168  02B4  3D25               	addwfc	??_FILTER_Ubat+1,w
  3169  02B5  00A7               	movwf	??_FILTER_Ubat+3
  3170  02B6  0024               	movlb	4	; select bank4
  3171  02B7  0848               	movf	(_inputArray1^(0+512)+8),w
  3172  02B8  0020               	movlb	0	; select bank0
  3173  02B9  0726               	addwf	??_FILTER_Ubat+2,w
  3174  02BA  00A8               	movwf	??_FILTER_Ubat+4
  3175  02BB  0024               	movlb	4	; select bank4
  3176  02BC  0849               	movf	((_inputArray1+1)^(0+512)+8),w
  3177  02BD  0020               	movlb	0	; select bank0
  3178  02BE  3D27               	addwfc	??_FILTER_Ubat+3,w
  3179  02BF  00A9               	movwf	??_FILTER_Ubat+5
  3180  02C0  0024               	movlb	4	; select bank4
  3181  02C1  084A               	movf	(_inputArray1^(0+512)+10),w
  3182  02C2  0020               	movlb	0	; select bank0
  3183  02C3  0728               	addwf	??_FILTER_Ubat+4,w
  3184  02C4  00AA               	movwf	??_FILTER_Ubat+6
  3185  02C5  0024               	movlb	4	; select bank4
  3186  02C6  084B               	movf	((_inputArray1+1)^(0+512)+10),w
  3187  02C7  0020               	movlb	0	; select bank0
  3188  02C8  3D29               	addwfc	??_FILTER_Ubat+5,w
  3189  02C9  00AB               	movwf	??_FILTER_Ubat+7
  3190  02CA  3F00               	moviw [0]fsr0
  3191  02CB  072A               	addwf	??_FILTER_Ubat+6,w
  3192  02CC  00AC               	movwf	??_FILTER_Ubat+8
  3193  02CD  3F01               	moviw [1]fsr0
  3194  02CE  3D2B               	addwfc	??_FILTER_Ubat+7,w
  3195  02CF  00AD               	movwf	??_FILTER_Ubat+9
  3196  02D0  3F40               	moviw [0]fsr1
  3197  02D1  072C               	addwf	??_FILTER_Ubat+8,w
  3198  02D2  00AE               	movwf	??_FILTER_Ubat+10
  3199  02D3  3F41               	moviw [1]fsr1
  3200  02D4  3D2D               	addwfc	??_FILTER_Ubat+9,w
  3201  02D5  00AF               	movwf	??_FILTER_Ubat+11
  3202  02D6  0024               	movlb	4	; select bank4
  3203  02D7  0840               	movf	_inputArray1^(0+512),w
  3204  02D8  0020               	movlb	0	; select bank0
  3205  02D9  072E               	addwf	??_FILTER_Ubat+10,w
  3206  02DA  0023               	movlb	3	; select bank3
  3207  02DB  00E0               	movwf	_filter1^(0+384)
  3208  02DC  0024               	movlb	4	; select bank4
  3209  02DD  0841               	movf	(_inputArray1+1)^(0+512),w
  3210  02DE  0020               	movlb	0	; select bank0
  3211  02DF  3D2F               	addwfc	??_FILTER_Ubat+11,w
  3212  02E0  0023               	movlb	3	; select bank3
  3213  02E1  00E1               	movwf	(_filter1+1)^(0+384)
  3214                           
  3215                           ;adc.c: 273: ui16_fir_Bat_mittel = filter1>>3;
  3216  02E2  0020               	movlb	0	; select bank0
  3217  02E3  00A5               	movwf	??_FILTER_Ubat+1
  3218  02E4  0023               	movlb	3	; select bank3
  3219  02E5  0860               	movf	_filter1^(0+384),w
  3220  02E6  0020               	movlb	0	; select bank0
  3221  02E7  00A4               	movwf	??_FILTER_Ubat
  3222  02E8  36A5               	lsrf	??_FILTER_Ubat+1,f
  3223  02E9  0CA4               	rrf	??_FILTER_Ubat,f
  3224  02EA  36A5               	lsrf	??_FILTER_Ubat+1,f
  3225  02EB  0CA4               	rrf	??_FILTER_Ubat,f
  3226  02EC  36A5               	lsrf	??_FILTER_Ubat+1,f
  3227  02ED  0CA4               	rrf	??_FILTER_Ubat,f
  3228  02EE  0824               	movf	??_FILTER_Ubat,w
  3229  02EF  0022               	movlb	2	; select bank2
  3230  02F0  00B9               	movwf	_ui16_fir_Bat_mittel^(0+256)
  3231  02F1  0020               	movlb	0	; select bank0
  3232  02F2  0825               	movf	??_FILTER_Ubat+1,w
  3233  02F3  0022               	movlb	2	; select bank2
  3234  02F4  00BA               	movwf	(_ui16_fir_Bat_mittel+1)^(0+256)
  3235                           
  3236                           ;adc.c: 275: if( ++windowPtr1 >= 8 )
  3237  02F5  3008               	movlw	8
  3238  02F6  0021               	movlb	1	; select bank1
  3239  02F7  0AE7               	incf	_windowPtr1^(0+128),f
  3240  02F8  0267               	subwf	_windowPtr1^(0+128),w
  3241  02F9  1C03               	skipc
  3242  02FA  0008               	return
  3243                           
  3244                           ;adc.c: 277: {
  3245                           ;adc.c: 279: windowPtr1 = 0;
  3246  02FB  01E7               	clrf	_windowPtr1^(0+128)
  3247                           
  3248                           ;adc.c: 280: filter1 = 0;
  3249  02FC  0023               	movlb	3	; select bank3
  3250  02FD  01E0               	clrf	_filter1^(0+384)
  3251  02FE  01E1               	clrf	(_filter1+1)^(0+384)
  3252  02FF  0008               	return
  3253  0300                     __end_of_FILTER_Ubat:	
  3254  0300                     __ptext18:	
  3255 ;; *************** function _Receive_Diag *****************
  3256 ;; Defined at:
  3257 ;;		line 315 in file "../lin.c"
  3258 ;; Parameters:    Size  Location     Type
  3259 ;;  id              1    wreg     unsigned char 
  3260 ;; Auto vars:     Size  Location     Type
  3261 ;;  id              1   19[BANK0 ] unsigned char 
  3262 ;; Return value:  Size  Location     Type
  3263 ;;                  1    wreg      void 
  3264 ;; Registers used:
  3265 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3266 ;; Tracked objects:
  3267 ;;		On entry : 1F/0
  3268 ;;		On exit  : 1F/1
  3269 ;;		Unchanged: 0/0
  3270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3271 ;;      Params:         0       0       0       0       0       0       0       0
  3272 ;;      Locals:         0       1       0       0       0       0       0       0
  3273 ;;      Temps:          0       1       0       0       0       0       0       0
  3274 ;;      Totals:         0       2       0       0       0       0       0       0
  3275 ;;Total ram usage:        2 bytes
  3276 ;; Hardware stack levels used:    1
  3277 ;; Hardware stack levels required when called:    6
  3278 ;; This function calls:
  3279 ;;		__ELINMIntGetPointer
  3280 ;;		__ELINMIntReceiveMessage
  3281 ;; This function is called by:
  3282 ;;		_main
  3283 ;; This function uses a non-reentrant model
  3284 ;;
  3285                           
  3286                           
  3287                           ;psect for function _Receive_Diag
  3288  0300                     _Receive_Diag:	
  3289                           
  3290                           ;incstack = 0
  3291                           ; Regs used in _Receive_Diag: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3292                           ;Receive_Diag@id stored from wreg
  3293  0300  00B3               	movwf	Receive_Diag@id
  3294  0301                     l916:	
  3295                           ;lin.c: 320: {
  3296                           ;lin.c: 321: ;
  3297                           
  3298  0301  1DE0               	btfss	__ELINMIntStatus,3
  3299  0302  2B01               	goto	l916
  3300                           
  3301                           ;lin.c: 322: }
  3302                           ;lin.c: 323: ;
  3303                           ;lin.c: 324: _ELINMIntReceiveMessage ( 5, id, 8 );
  3304  0303  0833               	movf	Receive_Diag@id,w
  3305  0304  00AF               	movwf	__ELINMIntReceiveMessage@_ELINM_id
  3306  0305  3008               	movlw	8
  3307  0306  00B0               	movwf	__ELINMIntReceiveMessage@_ELINM_size
  3308  0307  3005               	movlw	5
  3309  0308  2350  3180         	fcall	__ELINMIntReceiveMessage
  3310  030A                     l919:	
  3311                           ;lin.c: 326: {
  3312                           
  3313  030A  1DE0               	btfss	__ELINMIntStatus,3
  3314  030B  2B0A               	goto	l919
  3315                           
  3316                           ;lin.c: 328: }
  3317                           ;lin.c: 329: ;
  3318                           ;lin.c: 330: if( ( ErrorCode == ( _ELINMIntStatus.ELINMIntStatusByte & 0xF0 ) ))
  3319  030C  30F0               	movlw	240
  3320  030D  0560               	andwf	__ELINMIntStatus,w
  3321  030E  00B2               	movwf	??_Receive_Diag
  3322  030F  0021               	movlb	1	; select bank1
  3323  0310  064C               	xorwf	_ErrorCode^(0+128),w
  3324  0311  1903               	btfsc	3,2
  3325  0312  0008               	return
  3326                           
  3327                           ;lin.c: 335: else
  3328                           ;lin.c: 336: {
  3329                           ;lin.c: 337: pt = _ELINMIntGetPointer ( 5, 0 );
  3330  0313  0020               	movlb	0	; select bank0
  3331  0314  3005               	movlw	5
  3332  0315  01A4               	clrf	__ELINMIntGetPointer@_ELINMInt_position
  3333  0316  3196  2656  3180   	fcall	__ELINMIntGetPointer
  3334  0319  00DF               	movwf	_pt
  3335                           
  3336                           ;lin.c: 338: my_msg[ 0 ] = *pt;
  3337  031A  0086               	movwf	6
  3338  031B  3002               	movlw	2	; select bank4/5
  3339  031C  0087               	movwf	7
  3340  031D  0801               	movf	1,w
  3341  031E  0023               	movlb	3	; select bank3
  3342  031F  00B0               	movwf	_my_msg^(0+384)
  3343                           
  3344                           ;lin.c: 339: pt++;
  3345                           
  3346                           ;lin.c: 340: my_msg[ 1 ] = *pt;
  3347  0320  23DE  3180         	fcall	PL28	;call to abstracted procedure
  3348  0322  00B1               	movwf	(_my_msg^(0+384)+1)
  3349                           
  3350                           ;lin.c: 341: pt++;
  3351                           
  3352                           ;lin.c: 342: my_msg[ 2 ] = *pt;
  3353  0323  23DE  3180         	fcall	PL28	;call to abstracted procedure
  3354  0325  00B2               	movwf	(_my_msg^(0+384)+2)
  3355                           
  3356                           ;lin.c: 343: pt++;
  3357                           
  3358                           ;lin.c: 344: my_msg[ 3 ] = *pt;
  3359  0326  23DE  3180         	fcall	PL28	;call to abstracted procedure
  3360  0328  00B3               	movwf	(_my_msg^(0+384)+3)
  3361                           
  3362                           ;lin.c: 345: pt++;
  3363                           
  3364                           ;lin.c: 346: my_msg[ 4 ] = *pt;
  3365  0329  23DE  3180         	fcall	PL28	;call to abstracted procedure
  3366  032B  00B4               	movwf	(_my_msg^(0+384)+4)
  3367                           
  3368                           ;lin.c: 347: pt++;
  3369                           
  3370                           ;lin.c: 348: my_msg[ 5 ] = *pt;
  3371  032C  23DE  3180         	fcall	PL28	;call to abstracted procedure
  3372  032E  00B5               	movwf	(_my_msg^(0+384)+5)
  3373                           
  3374                           ;lin.c: 349: pt++;
  3375                           
  3376                           ;lin.c: 350: my_msg[ 6 ] = *pt;
  3377  032F  23DE  3180         	fcall	PL28	;call to abstracted procedure
  3378  0331  00B6               	movwf	(_my_msg^(0+384)+6)
  3379                           
  3380                           ;lin.c: 351: pt++;
  3381                           
  3382                           ;lin.c: 352: my_msg[ 7 ] = *pt;
  3383  0332  23DE               	fcall	PL28	;call to abstracted procedure
  3384  0333  00B7               	movwf	(_my_msg^(0+384)+7)
  3385                           
  3386                           ;lin.c: 354: ui8_b_DResServID_c = my_msg[ 0 ];
  3387  0334  0830               	movf	_my_msg^(0+384),w
  3388  0335  0021               	movlb	1	; select bank1
  3389  0336  00D8               	movwf	_ui8_b_DResServID_c^(0+128)
  3390                           
  3391                           ;lin.c: 355: ui8_b_DResLocID_c = my_msg[ 1 ];
  3392  0337  0023               	movlb	3	; select bank3
  3393  0338  0831               	movf	(_my_msg^(0+384)+1),w
  3394  0339  0020               	movlb	0	; select bank0
  3395  033A  00E2               	movwf	_ui8_b_DResLocID_c
  3396                           
  3397                           ;lin.c: 356: ui8_b_DResB0_c = my_msg[ 2 ];
  3398  033B  0023               	movlb	3	; select bank3
  3399  033C  0832               	movf	(_my_msg^(0+384)+2),w
  3400  033D  0020               	movlb	0	; select bank0
  3401  033E  00E1               	movwf	_ui8_b_DResB0_c
  3402                           
  3403                           ;lin.c: 357: ui8_b_DResB1_c = my_msg[ 3 ];
  3404  033F  0023               	movlb	3	; select bank3
  3405  0340  0833               	movf	(_my_msg^(0+384)+3),w
  3406  0341  0021               	movlb	1	; select bank1
  3407  0342  00D7               	movwf	_ui8_b_DResB1_c^(0+128)
  3408                           
  3409                           ;lin.c: 358: ui8_b_DResB2_c = my_msg[ 4 ];
  3410  0343  0023               	movlb	3	; select bank3
  3411  0344  0834               	movf	(_my_msg^(0+384)+4),w
  3412  0345  0021               	movlb	1	; select bank1
  3413  0346  00D6               	movwf	_ui8_b_DResB2_c^(0+128)
  3414                           
  3415                           ;lin.c: 359: ui8_b_DResB3_c = my_msg[ 5 ];
  3416  0347  0023               	movlb	3	; select bank3
  3417  0348  0835               	movf	(_my_msg^(0+384)+5),w
  3418  0349  0021               	movlb	1	; select bank1
  3419  034A  00D5               	movwf	_ui8_b_DResB3_c^(0+128)
  3420                           
  3421                           ;lin.c: 361: ui8_b_DResB5_c = my_msg[ 7 ];
  3422  034B  0023               	movlb	3	; select bank3
  3423  034C  0836               	movf	(_my_msg^(0+384)+6),w
  3424  034D  0021               	movlb	1	; select bank1
  3425  034E  00D4               	movwf	_ui8_b_DResB4_c^(0+128)
  3426  034F  0008               	return
  3427  0350                     __end_of_Receive_Diag:	
  3428  0350                     __ptext19:	
  3429 ;; *************** function __ELINMIntReceiveMessage *****************
  3430 ;; Defined at:
  3431 ;;		line 1321 in file "../lin.c"
  3432 ;; Parameters:    Size  Location     Type
  3433 ;;  _ELINM_tag      1    wreg     unsigned char 
  3434 ;;  _ELINM_id       1   15[BANK0 ] unsigned char 
  3435 ;;  _ELINM_size     1   16[BANK0 ] unsigned char 
  3436 ;; Auto vars:     Size  Location     Type
  3437 ;;  _ELINM_tag      1   17[BANK0 ] unsigned char 
  3438 ;; Return value:  Size  Location     Type
  3439 ;;                  1    wreg      void 
  3440 ;; Registers used:
  3441 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3442 ;; Tracked objects:
  3443 ;;		On entry : 1F/0
  3444 ;;		On exit  : 1F/0
  3445 ;;		Unchanged: 0/0
  3446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3447 ;;      Params:         0       2       0       0       0       0       0       0
  3448 ;;      Locals:         0       1       0       0       0       0       0       0
  3449 ;;      Temps:          0       0       0       0       0       0       0       0
  3450 ;;      Totals:         0       3       0       0       0       0       0       0
  3451 ;;Total ram usage:        3 bytes
  3452 ;; Hardware stack levels used:    1
  3453 ;; Hardware stack levels required when called:    5
  3454 ;; This function calls:
  3455 ;;		__ELINMIntSendMessage
  3456 ;; This function is called by:
  3457 ;;		_Receive_Diag
  3458 ;; This function uses a non-reentrant model
  3459 ;;
  3460                           
  3461                           
  3462                           ;psect for function __ELINMIntReceiveMessage
  3463  0350                     __ELINMIntReceiveMessage:	
  3464                           
  3465                           ;lin.c: 1331: {
  3466                           ;lin.c: 1333: _ELINMIntMessageTag = _ELINM_tag;
  3467                           
  3468                           ;incstack = 0
  3469                           ; Regs used in __ELINMIntReceiveMessage: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  3470  0350  1DE0               	btfss	__ELINMIntStatus,3
  3471  0351  0008               	return
  3472                           
  3473                           ;lin.c: 1334: _ELINMIntRXMessageSize.SIZE = _ELINM_size;
  3474  0352  0830               	movf	__ELINMIntReceiveMessage@_ELINM_size,w
  3475  0353  0022               	movlb	2	; select bank2
  3476  0354  00DF               	movwf	__ELINMIntRXMessageSize^(0+256)
  3477                           
  3478                           ;lin.c: 1335: _ELINMIntStatus.ELINMINTSTS.RX = 1;
  3479  0355  0020               	movlb	0	; select bank0
  3480  0356  14E0               	bsf	__ELINMIntStatus,1
  3481                           
  3482                           ;lin.c: 1336: _ELINMIntRXCRC.CRC = 0;
  3483  0357  0023               	movlb	3	; select bank3
  3484  0358  01D0               	clrf	__ELINMIntRXCRC^(0+384)
  3485  0359  01D1               	clrf	(__ELINMIntRXCRC+1)^(0+384)
  3486                           
  3487                           ;lin.c: 1337: _ELINMIntSendMessage ( _ELINM_id, 0, ( ( ( ( ( 0 + 3 ) * 15L ) + 44L ) * (
      +                           100L * 1000000L / 19200L ) / 128L ) / 100L ), ( ( ( ( ( ( ( ( 0 + 3 ) * 15L ) + 44L ) +
      +                           1L ) * 14L ) / 10L ) * ( 100L * 1000000L / 19200L ) / 128L ) / 100L ) );
  3488  035A  0020               	movlb	0	; select bank0
  3489  035B  3024               	movlw	36
  3490  035C  01A5               	clrf	__ELINMIntSendMessage@_ELINM_size
  3491  035D  00A6               	movwf	__ELINMIntSendMessage@_ELINM_fmin
  3492  035E  3033               	movlw	51
  3493  035F  01A7               	clrf	__ELINMIntSendMessage@_ELINM_fmin+1
  3494  0360  00A8               	movwf	__ELINMIntSendMessage@_ELINM_fmax
  3495  0361  01A9               	clrf	__ELINMIntSendMessage@_ELINM_fmax+1
  3496  0362  082F               	movf	__ELINMIntReceiveMessage@_ELINM_id,w
  3497  0363  3197  2F75         	ljmp	__ELINMIntSendMessage
  3498  0365                     __end_of__ELINMIntReceiveMessage:	
  3499  0365                     __ptext17:	
  3500 ;; *************** function _SetDiagAlarm *****************
  3501 ;; Defined at:
  3502 ;;		line 210 in file "../diag.c"
  3503 ;; Parameters:    Size  Location     Type
  3504 ;;		None
  3505 ;; Auto vars:     Size  Location     Type
  3506 ;;		None
  3507 ;; Return value:  Size  Location     Type
  3508 ;;                  1    wreg      void 
  3509 ;; Registers used:
  3510 ;;		wreg, status,2, status,0, pclath, cstack
  3511 ;; Tracked objects:
  3512 ;;		On entry : 1F/1
  3513 ;;		On exit  : 1F/2
  3514 ;;		Unchanged: 0/0
  3515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3516 ;;      Params:         0       0       0       0       0       0       0       0
  3517 ;;      Locals:         0       0       0       0       0       0       0       0
  3518 ;;      Temps:          0       0       0       0       0       0       0       0
  3519 ;;      Totals:         0       0       0       0       0       0       0       0
  3520 ;;Total ram usage:        0 bytes
  3521 ;; Hardware stack levels used:    1
  3522 ;; Hardware stack levels required when called:    4
  3523 ;; This function calls:
  3524 ;;		_PWM_Write_Out
  3525 ;; This function is called by:
  3526 ;;		_main
  3527 ;; This function uses a non-reentrant model
  3528 ;;
  3529                           
  3530                           
  3531                           ;psect for function _SetDiagAlarm
  3532  0365                     _SetDiagAlarm:	
  3533                           
  3534                           ;diag.c: 219: if( ui8_error_Flags.bits.B6 )
  3535                           
  3536                           ;incstack = 0
  3537                           ; Regs used in _SetDiagAlarm: [wreg+status,2+status,0+pclath+cstack]
  3538  0365  0020               	movlb	0	; select bank0
  3539  0366  1F65               	btfss	_ui8_error_Flags,6
  3540  0367  2B6B               	goto	l12780
  3541                           
  3542                           ;diag.c: 221: {
  3543                           ;diag.c: 223: PWM_Write_Out( 88 );
  3544  0368  3058               	movlw	88
  3545  0369  3196  2E51         	ljmp	_PWM_Write_Out
  3546  036B                     l12780:	
  3547                           ;diag.c: 226: }
  3548                           
  3549                           
  3550                           ;diag.c: 229: else
  3551                           ;diag.c: 230: {
  3552                           ;diag.c: 232: if( bool_CPU_TempAlarm )
  3553  036B  0021               	movlb	1	; select bank1
  3554  036C  085C               	movf	_bool_CPU_TempAlarm^(0+128),w
  3555  036D  1903               	btfsc	3,2
  3556  036E  2B72               	goto	l12784
  3557                           
  3558                           ;diag.c: 235: {
  3559                           ;diag.c: 237: PWM_Write_Out( 33 );
  3560  036F  3021               	movlw	33
  3561  0370  3196  2E51         	ljmp	_PWM_Write_Out
  3562  0372                     l12784:	
  3563                           ;diag.c: 240: }
  3564                           
  3565                           
  3566                           ;diag.c: 243: else
  3567                           ;diag.c: 244: {
  3568                           ;diag.c: 246: if( bool_DryRunningAlarm )
  3569  0372  085B               	movf	_bool_DryRunningAlarm^(0+128),w
  3570  0373  1903               	btfsc	3,2
  3571  0374  2B78               	goto	l12788
  3572                           
  3573                           ;diag.c: 248: {
  3574                           ;diag.c: 250: PWM_Write_Out( 66 );
  3575  0375  3042               	movlw	66
  3576  0376  3196  2E51         	ljmp	_PWM_Write_Out
  3577  0378                     l12788:	
  3578                           ;diag.c: 253: }
  3579                           
  3580                           
  3581                           ;diag.c: 256: else
  3582                           ;diag.c: 257: {
  3583                           ;diag.c: 259: if( bool_MotorStalled )
  3584  0378  085A               	movf	_bool_MotorStalled^(0+128),w
  3585  0379  1903               	btfsc	3,2
  3586  037A  2B7E               	goto	l12792
  3587                           
  3588                           ;diag.c: 261: {
  3589                           ;diag.c: 263: PWM_Write_Out( 55 );
  3590  037B  3037               	movlw	55
  3591  037C  3196  2E51         	ljmp	_PWM_Write_Out
  3592  037E                     l12792:	
  3593                           ;diag.c: 266: }
  3594                           
  3595                           
  3596                           ;diag.c: 269: else
  3597                           ;diag.c: 270: {
  3598                           ;diag.c: 272: if( bool_HighCurrentAlarm )
  3599  037E  0859               	movf	_bool_HighCurrentAlarm^(0+128),w
  3600  037F  1903               	btfsc	3,2
  3601  0380  2B84               	goto	l534
  3602                           
  3603                           ;diag.c: 274: {
  3604                           ;diag.c: 276: PWM_Write_Out( 44 );
  3605  0381  302C               	movlw	44
  3606  0382  3196  2E51         	ljmp	_PWM_Write_Out
  3607  0384                     l534:	
  3608                           ;diag.c: 278: }
  3609                           
  3610                           
  3611                           ;diag.c: 281: else
  3612                           ;diag.c: 282: {
  3613                           ;diag.c: 284: if( ui8_error_Flags.bits.B5 )
  3614  0384  0020               	movlb	0	; select bank0
  3615  0385  1EE5               	btfss	_ui8_error_Flags,5
  3616  0386  2B8A               	goto	l536
  3617                           
  3618                           ;diag.c: 287: {
  3619                           ;diag.c: 289: PWM_Write_Out( 77 );
  3620  0387  304D               	movlw	77
  3621  0388  3196  2E51         	ljmp	_PWM_Write_Out
  3622  038A                     l536:	
  3623                           ;diag.c: 292: }
  3624                           
  3625                           
  3626                           ;diag.c: 295: else
  3627                           ;diag.c: 296: {
  3628                           ;diag.c: 298: if( ui8_error_Flags.bits.B0 )
  3629  038A  1C65               	btfss	_ui8_error_Flags,0
  3630  038B  2B8F               	goto	l12800
  3631                           
  3632                           ;diag.c: 300: {
  3633                           ;diag.c: 302: PWM_Write_Out( 22 );
  3634  038C  3016               	movlw	22
  3635  038D  3196  2E51         	ljmp	_PWM_Write_Out
  3636  038F                     l12800:	
  3637                           ;diag.c: 305: }
  3638                           
  3639                           
  3640                           ;diag.c: 308: else
  3641                           ;diag.c: 309: {
  3642                           ;diag.c: 311: PWM_Write_Out( 11 );
  3643  038F  300B               	movlw	11
  3644  0390  3196  2E51         	ljmp	_PWM_Write_Out
  3645  0392                     __end_of_SetDiagAlarm:	
  3646  0392                     __ptext6:	
  3647 ;; *************** function _InitMotorRun *****************
  3648 ;; Defined at:
  3649 ;;		line 2170 in file "../bldc.c"
  3650 ;; Parameters:    Size  Location     Type
  3651 ;;		None
  3652 ;; Auto vars:     Size  Location     Type
  3653 ;;		None
  3654 ;; Return value:  Size  Location     Type
  3655 ;;                  1    wreg      void 
  3656 ;; Registers used:
  3657 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3658 ;; Tracked objects:
  3659 ;;		On entry : 1E/1
  3660 ;;		On exit  : 1F/0
  3661 ;;		Unchanged: 0/0
  3662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3663 ;;      Params:         0       0       0       0       0       0       0       0
  3664 ;;      Locals:         0       0       0       0       0       0       0       0
  3665 ;;      Temps:          0       0       0       0       0       0       0       0
  3666 ;;      Totals:         0       0       0       0       0       0       0       0
  3667 ;;Total ram usage:        0 bytes
  3668 ;; Hardware stack levels used:    1
  3669 ;; Hardware stack levels required when called:    4
  3670 ;; This function calls:
  3671 ;;		_commutate
  3672 ;; This function is called by:
  3673 ;;		_init_bldc
  3674 ;;		_main
  3675 ;; This function uses a non-reentrant model
  3676 ;;
  3677                           
  3678                           
  3679                           ;psect for function _InitMotorRun
  3680  0392                     _InitMotorRun:	
  3681  0392                     l6240:	
  3682                           ;incstack = 0
  3683                           ; Regs used in _InitMotorRun: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3684                           
  3685                           
  3686                           ;bldc.c: 2175: if( 0 == MotorFlags.bits.B6 )
  3687  0392  0020               	movlb	0	; select bank0
  3688  0393  1B63               	btfsc	_MotorFlags,6
  3689  0394  0008               	return
  3690  0395  30A6               	movlw	166
  3691                           
  3692                           ;bldc.c: 2178: {
  3693                           ;bldc.c: 2180: MotorFlags.bits.B5 = 0;
  3694  0396  12E3               	bcf	_MotorFlags,5
  3695                           
  3696                           ;bldc.c: 2181: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 600 * 2 ) 
      +                          );
  3697  0397  0022               	movlb	2	; select bank2
  3698  0398  00B1               	movwf	_ui16_comm_time_max^(0+256)
  3699  0399  01B2               	clrf	(_ui16_comm_time_max+1)^(0+256)
  3700                           
  3701                           ;bldc.c: 2182: comm_state = 1;
  3702  039A  0021               	movlb	1	; select bank1
  3703  039B  01E4               	clrf	_comm_state^(0+128)
  3704  039C  0AE4               	incf	_comm_state^(0+128),f
  3705                           
  3706                           ;bldc.c: 2183: ui16_step_cnt = 0;
  3707  039D  01B8               	clrf	_ui16_step_cnt^(0+128)
  3708  039E  01B9               	clrf	(_ui16_step_cnt+1)^(0+128)
  3709                           
  3710                           ;bldc.c: 2184: ui8_duty_cycle_BLDC = 0;
  3711  039F  0020               	movlb	0	; select bank0
  3712  03A0  01E4               	clrf	_ui8_duty_cycle_BLDC
  3713                           
  3714                           ;bldc.c: 2186: bemf_filter = 0;
  3715  03A1  01DA               	clrf	_comm_time
  3716  03A2  01DB               	clrf	_comm_time+1
  3717                           
  3718                           ;bldc.c: 2188: phase_delay_counter_debug = 0;
  3719  03A3  0023               	movlb	3	; select bank3
  3720  03A4  01D6               	clrf	_phase_delay_counter^(0+384)
  3721  03A5  01D7               	clrf	(_phase_delay_counter+1)^(0+384)
  3722                           
  3723                           ;bldc.c: 2189: PSTR1CON = 0;
  3724  03A6  0025               	movlb	5	; select bank5
  3725  03A7  0196               	clrf	22	;volatile
  3726                           
  3727                           ;bldc.c: 2192: MotorFlags.bits.B3 = 1 ;
  3728  03A8  0020               	movlb	0	; select bank0
  3729  03A9  15E3               	bsf	_MotorFlags,3
  3730                           
  3731                           ;bldc.c: 2194: ui16_phase_angle = 100;
  3732  03AA  1763               	bsf	_MotorFlags,6
  3733                           
  3734                           ;bldc.c: 2195: ui8_StartupPWM = 0 ;
  3735  03AB  0021               	movlb	1	; select bank1
  3736  03AC  01E5               	clrf	_ui8_StartupPWM^(0+128)
  3737                           
  3738                           ;bldc.c: 2196: CCPR1L = 0 ;
  3739  03AD  0025               	movlb	5	; select bank5
  3740  03AE  0191               	clrf	17	;volatile
  3741                           
  3742                           ;bldc.c: 2198: ui8_zero_cros_cnt = 0 ;
  3743  03AF  0021               	movlb	1	; select bank1
  3744  03B0  01DF               	clrf	_ui8_sampleState^(0+128)
  3745                           
  3746                           ;bldc.c: 2199: MotorFlags.bits.B4 = 1 ;
  3747  03B1  0020               	movlb	0	; select bank0
  3748  03B2  1663               	bsf	_MotorFlags,4
  3749                           
  3750                           ;bldc.c: 2207: commutate( );
  3751  03B3  319A  2A9A         	ljmp	l5902
  3752  03B5                     __end_of_InitMotorRun:	
  3753  03B5                     __ptext3:	
  3754 ;; *************** function _clear_timer *****************
  3755 ;; Defined at:
  3756 ;;		line 302 in file "../timer.c"
  3757 ;; Parameters:    Size  Location     Type
  3758 ;;  ui8_TmrNb       1    wreg     unsigned char 
  3759 ;; Auto vars:     Size  Location     Type
  3760 ;;  ui8_TmrNb       1    4[BANK0 ] unsigned char 
  3761 ;; Return value:  Size  Location     Type
  3762 ;;                  1    wreg      void 
  3763 ;; Registers used:
  3764 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3765 ;; Tracked objects:
  3766 ;;		On entry : 1F/0
  3767 ;;		On exit  : 17/0
  3768 ;;		Unchanged: 0/0
  3769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3770 ;;      Params:         0       0       0       0       0       0       0       0
  3771 ;;      Locals:         0       1       0       0       0       0       0       0
  3772 ;;      Temps:          0       0       0       0       0       0       0       0
  3773 ;;      Totals:         0       1       0       0       0       0       0       0
  3774 ;;Total ram usage:        1 bytes
  3775 ;; Hardware stack levels used:    1
  3776 ;; Hardware stack levels required when called:    3
  3777 ;; This function calls:
  3778 ;;		Nothing
  3779 ;; This function is called by:
  3780 ;;		_main
  3781 ;;		_timer_init
  3782 ;; This function uses a non-reentrant model
  3783 ;;
  3784                           
  3785                           
  3786                           ;psect for function _clear_timer
  3787  03B5                     _clear_timer:	
  3788                           
  3789                           ;incstack = 0
  3790                           ; Regs used in _clear_timer: [wreg-fsr0h+status,2+status,0]
  3791                           ;clear_timer@ui8_TmrNb stored from wreg
  3792  03B5  00A4               	movwf	clear_timer@ui8_TmrNb
  3793                           
  3794                           ;timer.c: 306: switch( ui8_TmrNb )
  3795  03B6  2BC4               	goto	l6340
  3796  03B7                     l6328:	
  3797                           
  3798                           ;timer.c: 312: {
  3799                           ;timer.c: 314: TMR0 = 0;
  3800  03B7  0195               	clrf	21	;volatile
  3801                           
  3802                           ;timer.c: 315: break;
  3803  03B8  0008               	return
  3804  03B9                     l6330:	
  3805                           
  3806                           ;timer.c: 322: {
  3807                           ;timer.c: 324: TMR1L = 0x00;
  3808  03B9  0196               	clrf	22	;volatile
  3809                           
  3810                           ;timer.c: 325: TMR1H = 0x00;
  3811  03BA  0197               	clrf	23	;volatile
  3812                           
  3813                           ;timer.c: 326: break;
  3814  03BB  0008               	return
  3815  03BC                     l6332:	
  3816                           
  3817                           ;timer.c: 333: {
  3818                           ;timer.c: 335: TMR2 = 0;
  3819  03BC  019A               	clrf	26	;volatile
  3820                           
  3821                           ;timer.c: 336: break;
  3822  03BD  0008               	return
  3823  03BE                     l6334:	
  3824                           
  3825                           ;timer.c: 343: {
  3826                           ;timer.c: 345: TMR4 = 0;
  3827  03BE  0028               	movlb	8	; select bank8
  3828  03BF  0195               	clrf	21	;volatile
  3829                           
  3830                           ;timer.c: 346: break;
  3831  03C0  0008               	return
  3832  03C1                     l6336:	
  3833                           
  3834                           ;timer.c: 353: {
  3835                           ;timer.c: 355: TMR6 = 0;
  3836  03C1  0028               	movlb	8	; select bank8
  3837  03C2  019C               	clrf	28	;volatile
  3838                           
  3839                           ;timer.c: 356: break;
  3840  03C3  0008               	return
  3841  03C4                     l6340:	
  3842  03C4  0824               	movf	clear_timer@ui8_TmrNb,w
  3843                           
  3844                           ; Switch size 1, requested type "space"
  3845                           ; Number of cases is 5, Range of values is 0 to 6
  3846                           ; switch strategies available:
  3847                           ; Name         Instructions Cycles
  3848                           ; simple_byte           16     9 (average)
  3849                           ; direct_byte           20     6 (fixed)
  3850                           ; jumptable            260     6 (fixed)
  3851                           ;	Chosen strategy is simple_byte
  3852  03C5  3A00               	xorlw	0	; case 0
  3853  03C6  1903               	skipnz
  3854  03C7  2BB7               	goto	l6328
  3855  03C8  3A01               	xorlw	1	; case 1
  3856  03C9  1903               	skipnz
  3857  03CA  2BB9               	goto	l6330
  3858  03CB  3A03               	xorlw	3	; case 2
  3859  03CC  1903               	skipnz
  3860  03CD  2BBC               	goto	l6332
  3861  03CE  3A06               	xorlw	6	; case 4
  3862  03CF  1903               	skipnz
  3863  03D0  2BBE               	goto	l6334
  3864  03D1  3A02               	xorlw	2	; case 6
  3865  03D2  1903               	skipnz
  3866  03D3  2BC1               	goto	l6336
  3867  03D4  2BD5               	goto	l1942
  3868  03D5                     l1942:	
  3869  03D5  0008               	return
  3870  03D6                     __end_of_clear_timer:	
  3871  03D6                     PL8:	
  3872  03D6  3E00               	addlw	low (_PWM_trans_table| (0+32768))
  3873  03D7  0084               	movwf	4
  3874  03D8  3098               	movlw	high (_PWM_trans_table| (0+32768))
  3875  03D9  1803               	skipnc
  3876  03DA  3E01               	addlw	1
  3877  03DB  0085               	movwf	5
  3878  03DC  0800               	movf	0,w	;code access
  3879  03DD  0008               	return
  3880  03DE                     __end_ofPL8:	
  3881  03DE                     PL28:	
  3882  03DE  0020               	movlb	0	; select bank0
  3883  03DF  0ADF               	incf	_pt,f
  3884  03E0  085F               	movf	_pt,w
  3885  03E1  0086               	movwf	6
  3886  03E2  0801               	movf	1,w
  3887  03E3  0023               	movlb	3	; select bank3
  3888  03E4  0008               	return
  3889  03E5                     __end_ofPL28:	
  3890  03E5                     PL50:	
  3891  03E5  00AC               	movwf	___awdiv@dividend
  3892  03E6  3005               	movlw	5
  3893  03E7  01AD               	clrf	___awdiv@dividend+1
  3894  03E8  35AC               	lslf	___awdiv@dividend,f
  3895  03E9  0DAD               	rlf	___awdiv@dividend+1,f
  3896  03EA  35AC               	lslf	___awdiv@dividend,f
  3897  03EB  0DAD               	rlf	___awdiv@dividend+1,f
  3898  03EC  00AA               	movwf	___awdiv@divisor
  3899  03ED  01AB               	clrf	___awdiv@divisor+1
  3900  03EE  0008               	return
  3901  03EF                     __end_ofPL50:	
  3902  03EF                     __ptext23:	
  3903 ;; *************** function _FILTER_IPhase *****************
  3904 ;; Defined at:
  3905 ;;		line 357 in file "../adc.c"
  3906 ;; Parameters:    Size  Location     Type
  3907 ;;		None
  3908 ;; Auto vars:     Size  Location     Type
  3909 ;;		None
  3910 ;; Return value:  Size  Location     Type
  3911 ;;                  1    wreg      void 
  3912 ;; Registers used:
  3913 ;;		wreg, status,2, status,0
  3914 ;; Tracked objects:
  3915 ;;		On entry : 1D/1
  3916 ;;		On exit  : 1F/3
  3917 ;;		Unchanged: 0/0
  3918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3919 ;;      Params:         0       0       0       0       0       0       0       0
  3920 ;;      Locals:         0       0       0       0       0       0       0       0
  3921 ;;      Temps:          0       2       0       0       0       0       0       0
  3922 ;;      Totals:         0       2       0       0       0       0       0       0
  3923 ;;Total ram usage:        2 bytes
  3924 ;; Hardware stack levels used:    1
  3925 ;; Hardware stack levels required when called:    3
  3926 ;; This function calls:
  3927 ;;		Nothing
  3928 ;; This function is called by:
  3929 ;;		_Get_Analog_Value
  3930 ;; This function uses a non-reentrant model
  3931 ;;
  3932                           
  3933                           
  3934                           ;psect for function _FILTER_IPhase
  3935  03EF                     _FILTER_IPhase:	
  3936                           
  3937                           ;adc.c: 363: filter3 = filter3 + ui16_IPhase1_bldc.w;
  3938                           
  3939                           ;incstack = 0
  3940                           ; Regs used in _FILTER_IPhase: [wreg+status,2+status,0]
  3941  03EF  0022               	movlb	2	; select bank2
  3942  03F0  083B               	movf	_ui16_IPhase1_bldc^(0+256),w	;volatile
  3943  03F1  0023               	movlb	3	; select bank3
  3944  03F2  07DE               	addwf	_filter3^(0+384),f
  3945  03F3  0022               	movlb	2	; select bank2
  3946  03F4  083C               	movf	(_ui16_IPhase1_bldc+1)^(0+256),w	;volatile
  3947  03F5  0023               	movlb	3	; select bank3
  3948  03F6  3DDF               	addwfc	(_filter3+1)^(0+384),f
  3949                           
  3950                           ;adc.c: 364: ui16_fir_IPhase_mean.w = filter3>>6;
  3951  03F7  085F               	movf	(_filter3+1)^(0+384),w
  3952  03F8  0020               	movlb	0	; select bank0
  3953  03F9  00A5               	movwf	??_FILTER_IPhase+1
  3954  03FA  0023               	movlb	3	; select bank3
  3955  03FB  085E               	movf	_filter3^(0+384),w
  3956  03FC  0020               	movlb	0	; select bank0
  3957  03FD  00A4               	movwf	??_FILTER_IPhase
  3958  03FE  3006               	movlw	6
  3959  03FF                     u3585:	
  3960  03FF  36A5               	lsrf	??_FILTER_IPhase+1,f
  3961  0400  0CA4               	rrf	??_FILTER_IPhase,f
  3962  0401  0B89               	decfsz	9,f
  3963  0402  2BFF               	goto	u3585
  3964  0403  0824               	movf	??_FILTER_IPhase,w
  3965  0404  0022               	movlb	2	; select bank2
  3966  0405  00B7               	movwf	_ui16_fir_IPhase_mean^(0+256)
  3967  0406  0020               	movlb	0	; select bank0
  3968  0407  0825               	movf	??_FILTER_IPhase+1,w
  3969  0408  0022               	movlb	2	; select bank2
  3970  0409  00B8               	movwf	(_ui16_fir_IPhase_mean+1)^(0+256)
  3971                           
  3972                           ;adc.c: 365: filter3 = filter3 - ui16_fir_IPhase_mean.w;
  3973  040A  0837               	movf	_ui16_fir_IPhase_mean^(0+256),w
  3974  040B  0023               	movlb	3	; select bank3
  3975  040C  02DE               	subwf	_filter3^(0+384),f
  3976  040D  0022               	movlb	2	; select bank2
  3977  040E  0838               	movf	(_ui16_fir_IPhase_mean+1)^(0+256),w
  3978  040F  0023               	movlb	3	; select bank3
  3979  0410  3BDF               	subwfb	(_filter3+1)^(0+384),f
  3980  0411  0008               	return
  3981  0412                     __end_of_FILTER_IPhase:	
  3982  0412                     __ptext1:	
  3983 ;; *************** function _system_init *****************
  3984 ;; Defined at:
  3985 ;;		line 545 in file "../main.c"
  3986 ;; Parameters:    Size  Location     Type
  3987 ;;		None
  3988 ;; Auto vars:     Size  Location     Type
  3989 ;;		None
  3990 ;; Return value:  Size  Location     Type
  3991 ;;                  1    wreg      void 
  3992 ;; Registers used:
  3993 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3994 ;; Tracked objects:
  3995 ;;		On entry : B1F/0
  3996 ;;		On exit  : 1F/0
  3997 ;;		Unchanged: 0/0
  3998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3999 ;;      Params:         0       0       0       0       0       0       0       0
  4000 ;;      Locals:         0       0       0       0       0       0       0       0
  4001 ;;      Temps:          0       0       0       0       0       0       0       0
  4002 ;;      Totals:         0       0       0       0       0       0       0       0
  4003 ;;Total ram usage:        0 bytes
  4004 ;; Hardware stack levels used:    1
  4005 ;; Hardware stack levels required when called:    6
  4006 ;; This function calls:
  4007 ;;		_ADC_Init
  4008 ;;		_DiagInit
  4009 ;;		_EnableMCP201
  4010 ;;		_FILTER_Init
  4011 ;;		_I_calibrationInit
  4012 ;;		_Oscill_Source_Block
  4013 ;;		_PWM_Capture_init
  4014 ;;		__ELINMIntInitialize
  4015 ;;		_init_bldc
  4016 ;;		_init_ports
  4017 ;;		_timer_init
  4018 ;; This function is called by:
  4019 ;;		_main
  4020 ;; This function uses a non-reentrant model
  4021 ;;
  4022                           
  4023                           
  4024                           ;psect for function _system_init
  4025  0412                     _system_init:	
  4026                           
  4027                           ;main.c: 549: OPTION_REG = 0b10000001;
  4028                           
  4029                           ;incstack = 0
  4030                           ; Regs used in _system_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4031  0412  3081               	movlw	129
  4032  0413  0021               	movlb	1	; select bank1
  4033  0414  0095               	movwf	21	;volatile
  4034                           
  4035                           ;main.c: 558: ui8_ResetMatlab = 1;
  4036  0415  01EF               	clrf	_ui8_ResetMatlab^(0+128)
  4037  0416  0AEF               	incf	_ui8_ResetMatlab^(0+128),f
  4038                           
  4039                           ;main.c: 559: GIE = 0;
  4040  0417  138B               	bcf	11,7	;volatile
  4041                           
  4042                           ;main.c: 560: INTCON = 0;
  4043  0418  018B               	clrf	11	;volatile
  4044                           
  4045                           ;main.c: 561: PIE1 = 0;
  4046  0419  0191               	clrf	17	;volatile
  4047                           
  4048                           ;main.c: 562: PIE2 = 0;
  4049  041A  0192               	clrf	18	;volatile
  4050                           
  4051                           ;main.c: 565: ui16_Timer_VaL1 = 0;
  4052  041B  0193               	clrf	19	;volatile
  4053                           
  4054                           ;main.c: 566: ui8_Task_Cont3ms = 0;
  4055  041C  0022               	movlb	2	; select bank2
  4056  041D  01D8               	clrf	_ui8_Task_Cont3ms^(0+256)
  4057                           
  4058                           ;main.c: 567: ui8_Task_Cont5ms = 0;
  4059  041E  01D7               	clrf	_ui8_Task_Cont5ms^(0+256)
  4060                           
  4061                           ;main.c: 571: ui8_Sync_Cont10ms = 0;
  4062  041F  0021               	movlb	1	; select bank1
  4063  0420  3049               	movlw	73
  4064  0421  01C8               	clrf	_ui8_Task_Cont100ms^(0+128)
  4065                           
  4066                           ;main.c: 573: ui16_dryRun_Thresh = 73;
  4067  0422  0023               	movlb	3	; select bank3
  4068  0423  00E8               	movwf	_ui16_dryRun_Thresh^(0+384)
  4069  0424  30E8               	movlw	232
  4070  0425  01E9               	clrf	(_ui16_dryRun_Thresh+1)^(0+384)
  4071                           
  4072                           ;main.c: 575: ui16_Current_Thresh = 1000;
  4073  0426  00E6               	movwf	_ui16_Current_Thresh^(0+384)
  4074  0427  3003               	movlw	3
  4075  0428  00E7               	movwf	(_ui16_Current_Thresh^(0+384)+1)
  4076                           
  4077                           ;main.c: 577: init_ports( );
  4078  0429  2554  3180         	fcall	_init_ports
  4079                           
  4080                           ;main.c: 581: EnableMCP201( );
  4081  042B  249B  3180         	fcall	_EnableMCP201
  4082                           
  4083                           ;main.c: 582: _ELINMIntInitialize( );
  4084  042D  253C  3180         	fcall	__ELINMIntInitialize
  4085                           
  4086                           ;main.c: 588: Oscill_Source_Block( );
  4087  042F  24E4  3180         	fcall	_Oscill_Source_Block
  4088                           
  4089                           ;main.c: 589: timer_init( 1 );
  4090  0431  3001               	movlw	1
  4091  0432  244C  3180         	fcall	_timer_init
  4092                           
  4093                           ;main.c: 590: timer_init( 4 );
  4094  0434  3004               	movlw	4
  4095  0435  244C  3180         	fcall	_timer_init
  4096                           
  4097                           ;main.c: 591: timer_init( 6 );
  4098  0437  3006               	movlw	6
  4099  0438  244C  3180         	fcall	_timer_init
  4100                           
  4101                           ;main.c: 594: PWM_Capture_init( 5 );
  4102  043A  3005               	movlw	5
  4103  043B  24EA  3180         	fcall	_PWM_Capture_init
  4104                           
  4105                           ;main.c: 595: ADC_Init( );
  4106  043D  2485  3180         	fcall	_ADC_Init
  4107                           
  4108                           ;main.c: 596: DiagInit( );
  4109  043F  248F  3180         	fcall	_DiagInit
  4110                           
  4111                           ;main.c: 597: FILTER_Init( );
  4112  0441  24B6               	fcall	_FILTER_Init
  4113                           
  4114                           ;main.c: 600: ui16_Temp_cal = 0;
  4115  0442  0023               	movlb	3	; select bank3
  4116  0443  01E2               	clrf	_ui16_Temp_cal^(0+384)
  4117  0444  01E3               	clrf	(_ui16_Temp_cal+1)^(0+384)
  4118                           
  4119                           ;main.c: 610: I_calibrationInit();
  4120  0445  3190  20A1  3180   	fcall	_I_calibrationInit
  4121                           
  4122                           ;main.c: 612: init_bldc( );
  4123  0448  256C               	fcall	_init_bldc
  4124                           
  4125                           ;main.c: 614: PEIE = 1;
  4126  0449  170B               	bsf	11,6	;volatile
  4127                           
  4128                           ;main.c: 615: GIE = 1;
  4129  044A  178B               	bsf	11,7	;volatile
  4130  044B  0008               	return
  4131  044C                     __end_of_system_init:	
  4132  044C                     __ptext2:	
  4133 ;; *************** function _timer_init *****************
  4134 ;; Defined at:
  4135 ;;		line 73 in file "../timer.c"
  4136 ;; Parameters:    Size  Location     Type
  4137 ;;  ui8_TmrNb       1    wreg     unsigned char 
  4138 ;; Auto vars:     Size  Location     Type
  4139 ;;  ui8_TmrNb       1    5[BANK0 ] unsigned char 
  4140 ;; Return value:  Size  Location     Type
  4141 ;;                  1    wreg      void 
  4142 ;; Registers used:
  4143 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4144 ;; Tracked objects:
  4145 ;;		On entry : 16/1
  4146 ;;		On exit  : 16/0
  4147 ;;		Unchanged: 0/0
  4148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4149 ;;      Params:         0       0       0       0       0       0       0       0
  4150 ;;      Locals:         0       1       0       0       0       0       0       0
  4151 ;;      Temps:          0       0       0       0       0       0       0       0
  4152 ;;      Totals:         0       1       0       0       0       0       0       0
  4153 ;;Total ram usage:        1 bytes
  4154 ;; Hardware stack levels used:    1
  4155 ;; Hardware stack levels required when called:    4
  4156 ;; This function calls:
  4157 ;;		_clear_timer
  4158 ;; This function is called by:
  4159 ;;		_system_init
  4160 ;; This function uses a non-reentrant model
  4161 ;;
  4162                           
  4163                           
  4164                           ;psect for function _timer_init
  4165  044C                     _timer_init:	
  4166                           
  4167                           ;incstack = 0
  4168                           ; Regs used in _timer_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4169                           ;timer_init@ui8_TmrNb stored from wreg
  4170  044C  0020               	movlb	0	; select bank0
  4171  044D  00A5               	movwf	timer_init@ui8_TmrNb
  4172                           
  4173                           ;timer.c: 77: switch( ui8_TmrNb )
  4174  044E  2C73               	goto	l6658
  4175  044F                     l6628:	
  4176                           
  4177                           ;timer.c: 83: {
  4178                           ;timer.c: 86: clear_timer( 0 );
  4179  044F  3000               	movlw	0
  4180  0450  23B5               	fcall	_clear_timer
  4181                           
  4182                           ;timer.c: 87: TMR0IE = 0;
  4183  0451  128B               	bcf	11,5	;volatile
  4184                           
  4185                           ;timer.c: 88: break;
  4186  0452  0008               	return
  4187  0453                     l6632:	
  4188                           
  4189                           ;timer.c: 95: {
  4190                           ;timer.c: 98: clear_timer( 1 );
  4191  0453  3001               	movlw	1
  4192  0454  23B5               	fcall	_clear_timer
  4193                           
  4194                           ;timer.c: 99: T1CON = 0b01110101;
  4195  0455  3075               	movlw	117
  4196  0456  0020               	movlb	0	; select bank0
  4197  0457  0098               	movwf	24	;volatile
  4198                           
  4199                           ;timer.c: 100: TMR1IE = 0;
  4200  0458  0021               	movlb	1	; select bank1
  4201  0459  1011               	bcf	17,0	;volatile
  4202                           
  4203                           ;timer.c: 101: break;
  4204  045A  0008               	return
  4205  045B                     l6638:	
  4206                           
  4207                           ;timer.c: 108: {
  4208                           ;timer.c: 111: clear_timer( 2 );
  4209  045B  3002               	movlw	2
  4210  045C  23B5               	fcall	_clear_timer
  4211                           
  4212                           ;timer.c: 112: T2CON = 0b00000111;
  4213  045D  3007               	movlw	7
  4214  045E  0020               	movlb	0	; select bank0
  4215  045F  009C               	movwf	28	;volatile
  4216                           
  4217                           ;timer.c: 113: TMR2IE = 0;
  4218  0460  0021               	movlb	1	; select bank1
  4219  0461  1091               	bcf	17,1	;volatile
  4220                           
  4221                           ;timer.c: 114: break;
  4222  0462  0008               	return
  4223  0463                     l6644:	
  4224                           
  4225                           ;timer.c: 121: {
  4226                           ;timer.c: 124: clear_timer( 4 );
  4227  0463  3004               	movlw	4
  4228  0464  23B5               	fcall	_clear_timer
  4229                           
  4230                           ;timer.c: 125: T4CON = 0b00001110;
  4231  0465  300E               	movlw	14
  4232  0466  0028               	movlb	8	; select bank8
  4233  0467  0097               	movwf	23	;volatile
  4234                           
  4235                           ;timer.c: 129: TMR4IE = 1;
  4236  0468  0021               	movlb	1	; select bank1
  4237  0469  1493               	bsf	19,1	;volatile
  4238                           
  4239                           ;timer.c: 131: break;
  4240  046A  0008               	return
  4241  046B                     l6650:	
  4242                           
  4243                           ;timer.c: 138: {
  4244                           ;timer.c: 141: clear_timer( 6 );
  4245  046B  3006               	movlw	6
  4246  046C  23B5               	fcall	_clear_timer
  4247                           
  4248                           ;timer.c: 142: T6CON = 0b00000101;
  4249  046D  3005               	movlw	5
  4250  046E  0028               	movlb	8	; select bank8
  4251  046F  009E               	movwf	30	;volatile
  4252                           
  4253                           ;timer.c: 147: TMR6IE = 1;
  4254  0470  0021               	movlb	1	; select bank1
  4255  0471  1593               	bsf	19,3	;volatile
  4256                           
  4257                           ;timer.c: 169: break;
  4258  0472  0008               	return
  4259  0473                     l6658:	
  4260  0473  0825               	movf	timer_init@ui8_TmrNb,w
  4261                           
  4262                           ; Switch size 1, requested type "space"
  4263                           ; Number of cases is 5, Range of values is 0 to 6
  4264                           ; switch strategies available:
  4265                           ; Name         Instructions Cycles
  4266                           ; simple_byte           16     9 (average)
  4267                           ; direct_byte           20     6 (fixed)
  4268                           ; jumptable            260     6 (fixed)
  4269                           ;	Chosen strategy is simple_byte
  4270  0474  3A00               	xorlw	0	; case 0
  4271  0475  1903               	skipnz
  4272  0476  2C4F               	goto	l6628
  4273  0477  3A01               	xorlw	1	; case 1
  4274  0478  1903               	skipnz
  4275  0479  2C53               	goto	l6632
  4276  047A  3A03               	xorlw	3	; case 2
  4277  047B  1903               	skipnz
  4278  047C  2C5B               	goto	l6638
  4279  047D  3A06               	xorlw	6	; case 4
  4280  047E  1903               	skipnz
  4281  047F  2C63               	goto	l6644
  4282  0480  3A02               	xorlw	2	; case 6
  4283  0481  1903               	skipnz
  4284  0482  2C6B               	goto	l6650
  4285  0483  2C84               	goto	l1919
  4286  0484                     l1919:	
  4287  0484  0008               	return
  4288  0485                     __end_of_timer_init:	
  4289  0485                     __ptext15:	
  4290 ;; *************** function _ADC_Init *****************
  4291 ;; Defined at:
  4292 ;;		line 102 in file "../adc.c"
  4293 ;; Parameters:    Size  Location     Type
  4294 ;;		None
  4295 ;; Auto vars:     Size  Location     Type
  4296 ;;		None
  4297 ;; Return value:  Size  Location     Type
  4298 ;;                  1    wreg      void 
  4299 ;; Registers used:
  4300 ;;		wreg, status,2
  4301 ;; Tracked objects:
  4302 ;;		On entry : 18/1
  4303 ;;		On exit  : 1F/2
  4304 ;;		Unchanged: 0/0
  4305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4306 ;;      Params:         0       0       0       0       0       0       0       0
  4307 ;;      Locals:         0       0       0       0       0       0       0       0
  4308 ;;      Temps:          0       0       0       0       0       0       0       0
  4309 ;;      Totals:         0       0       0       0       0       0       0       0
  4310 ;;Total ram usage:        0 bytes
  4311 ;; Hardware stack levels used:    1
  4312 ;; Hardware stack levels required when called:    3
  4313 ;; This function calls:
  4314 ;;		Nothing
  4315 ;; This function is called by:
  4316 ;;		_system_init
  4317 ;; This function uses a non-reentrant model
  4318 ;;
  4319                           
  4320                           
  4321                           ;psect for function _ADC_Init
  4322  0485                     _ADC_Init:	
  4323                           
  4324                           ;adc.c: 106: ADCON1 = 0b10100000;
  4325                           
  4326                           ;incstack = 0
  4327                           ; Regs used in _ADC_Init: [wreg+status,2]
  4328  0485  30A0               	movlw	160
  4329  0486  0021               	movlb	1	; select bank1
  4330  0487  009E               	movwf	30	;volatile
  4331                           
  4332                           ;adc.c: 108: ADCON0 = 0b00000000;
  4333  0488  019D               	clrf	29	;volatile
  4334                           
  4335                           ;adc.c: 109: ADON = 1;
  4336  0489  141D               	bsf	29,0	;volatile
  4337                           
  4338                           ;adc.c: 111: ui8_temp_calibration = 0;
  4339  048A  0022               	movlb	2	; select bank2
  4340  048B  0817               	movf	23,w	;volatile
  4341  048C  3830               	iorlw	48
  4342  048D  0097               	movwf	23	;volatile
  4343  048E  0008               	return
  4344  048F                     __end_of_ADC_Init:	
  4345  048F                     __ptext14:	
  4346 ;; *************** function _DiagInit *****************
  4347 ;; Defined at:
  4348 ;;		line 148 in file "../diag.c"
  4349 ;; Parameters:    Size  Location     Type
  4350 ;;		None
  4351 ;; Auto vars:     Size  Location     Type
  4352 ;;		None
  4353 ;; Return value:  Size  Location     Type
  4354 ;;                  1    wreg      void 
  4355 ;; Registers used:
  4356 ;;		wreg, status,2, status,0, pclath, cstack
  4357 ;; Tracked objects:
  4358 ;;		On entry : 1F/2
  4359 ;;		On exit  : 1F/2
  4360 ;;		Unchanged: 0/0
  4361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4362 ;;      Params:         0       0       0       0       0       0       0       0
  4363 ;;      Locals:         0       0       0       0       0       0       0       0
  4364 ;;      Temps:          0       0       0       0       0       0       0       0
  4365 ;;      Totals:         0       0       0       0       0       0       0       0
  4366 ;;Total ram usage:        0 bytes
  4367 ;; Hardware stack levels used:    1
  4368 ;; Hardware stack levels required when called:    4
  4369 ;; This function calls:
  4370 ;;		_PWM_Write_Out
  4371 ;; This function is called by:
  4372 ;;		_system_init
  4373 ;; This function uses a non-reentrant model
  4374 ;;
  4375                           
  4376                           
  4377                           ;psect for function _DiagInit
  4378  048F                     _DiagInit:	
  4379                           
  4380                           ;diag.c: 162: ui8_error_Flags.b = 0;
  4381                           
  4382                           ;incstack = 0
  4383                           ; Regs used in _DiagInit: [wreg+status,2+status,0+pclath+cstack]
  4384  048F  0020               	movlb	0	; select bank0
  4385  0490  300B               	movlw	11
  4386  0491  01E5               	clrf	_ui8_error_Flags
  4387                           
  4388                           ;diag.c: 163: PWM_Write_Out( 11 );
  4389  0492  3196  2651         	fcall	_PWM_Write_Out
  4390                           
  4391                           ;diag.c: 165: ui16_IPhase1_bldc_cal.w = 0;
  4392  0494  01E6               	clrf	_ui16_IPhase1_bldc_cal^(0+256)
  4393  0495  01E7               	clrf	(_ui16_IPhase1_bldc_cal+1)^(0+256)
  4394                           
  4395                           ;diag.c: 166: ui16_IPhase2_bldc_cal.w = 0;
  4396  0496  01E4               	clrf	_ui16_IPhase2_bldc_cal^(0+256)
  4397  0497  01E5               	clrf	(_ui16_IPhase2_bldc_cal+1)^(0+256)
  4398                           
  4399                           ;diag.c: 167: ui16_IPhase3_bldc_cal.w = 0;
  4400  0498  01E2               	clrf	_ui16_IPhase3_bldc_cal^(0+256)
  4401  0499  01E3               	clrf	(_ui16_IPhase3_bldc_cal+1)^(0+256)
  4402  049A  0008               	return
  4403  049B                     __end_of_DiagInit:	
  4404  049B                     __ptext13:	
  4405 ;; *************** function _EnableMCP201 *****************
  4406 ;; Defined at:
  4407 ;;		line 434 in file "../lin.c"
  4408 ;; Parameters:    Size  Location     Type
  4409 ;;		None
  4410 ;; Auto vars:     Size  Location     Type
  4411 ;;  _dcnt           1    6[BANK0 ] unsigned char 
  4412 ;;  _dcnt           1    5[BANK0 ] unsigned char 
  4413 ;;  _dcnt           1    4[BANK0 ] unsigned char 
  4414 ;; Return value:  Size  Location     Type
  4415 ;;                  1    wreg      void 
  4416 ;; Registers used:
  4417 ;;		status,2
  4418 ;; Tracked objects:
  4419 ;;		On entry : 1F/1
  4420 ;;		On exit  : 1F/0
  4421 ;;		Unchanged: 0/0
  4422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4423 ;;      Params:         0       0       0       0       0       0       0       0
  4424 ;;      Locals:         0       3       0       0       0       0       0       0
  4425 ;;      Temps:          0       0       0       0       0       0       0       0
  4426 ;;      Totals:         0       3       0       0       0       0       0       0
  4427 ;;Total ram usage:        3 bytes
  4428 ;; Hardware stack levels used:    1
  4429 ;; Hardware stack levels required when called:    3
  4430 ;; This function calls:
  4431 ;;		Nothing
  4432 ;; This function is called by:
  4433 ;;		_system_init
  4434 ;; This function uses a non-reentrant model
  4435 ;;
  4436                           
  4437                           
  4438                           ;psect for function _EnableMCP201
  4439  049B                     _EnableMCP201:	
  4440                           
  4441                           ;lin.c: 448: { unsigned char _dcnt; if( 200L >= 4 ) _dcnt = ( 200L * ( 32000000UL ) / 2 
      +                          ); else _dcnt = 1; while( --_dcnt > 0 ) { asm( "nop" ); asm( "nop" ); continue; } } ;
  4442                           
  4443                           ;incstack = 0
  4444                           ; Regs used in _EnableMCP201: [status,2]
  4445  049B  0020               	movlb	0	; select bank0
  4446  049C  128E               	bcf	14,5	;volatile
  4447  049D  01A4               	clrf	EnableMCP201@_dcnt
  4448  049E  2CA1               	goto	l940
  4449  049F                     l941:	
  4450  049F  0000               	nop	;# 
  4451  04A0  0000               	nop	;# 
  4452  04A1                     l940:	
  4453  04A1  0020               	movlb	0	; select bank0
  4454  04A2  0BA4               	decfsz	EnableMCP201@_dcnt,f
  4455  04A3  2C9F               	goto	l941
  4456                           
  4457                           ;lin.c: 450: { unsigned char _dcnt; if( 200L >= 4 ) _dcnt = ( 200L * ( 32000000UL ) / 2 
      +                          ); else _dcnt = 1; while( --_dcnt > 0 ) { asm( "nop" ); asm( "nop" ); continue; } } ;
  4458  04A4  168E               	bsf	14,5	;volatile
  4459  04A5  01A5               	clrf	EnableMCP201@_dcnt_712
  4460  04A6  2CA9               	goto	l945
  4461  04A7                     l946:	
  4462  04A7  0000               	nop	;# 
  4463  04A8  0000               	nop	;# 
  4464  04A9                     l945:	
  4465  04A9  0020               	movlb	0	; select bank0
  4466  04AA  0BA5               	decfsz	EnableMCP201@_dcnt_712,f
  4467  04AB  2CA7               	goto	l946
  4468                           
  4469                           ;lin.c: 452: { unsigned char _dcnt; if( 200L >= 4 ) _dcnt = ( 200L * ( 32000000UL ) / 2 
      +                          ); else _dcnt = 1; while( --_dcnt > 0 ) { asm( "nop" ); asm( "nop" ); continue; } } ;
  4470  04AC  128E               	bcf	14,5	;volatile
  4471  04AD  01A6               	clrf	EnableMCP201@_dcnt_713
  4472  04AE  2CB1               	goto	l950
  4473  04AF                     l951:	
  4474  04AF  0000               	nop	;# 
  4475  04B0  0000               	nop	;# 
  4476  04B1                     l950:	
  4477  04B1  0020               	movlb	0	; select bank0
  4478  04B2  0BA6               	decfsz	EnableMCP201@_dcnt_713,f
  4479  04B3  2CAF               	goto	l951
  4480                           
  4481                           ;lin.c: 453: RC5 = 1;
  4482  04B4  168E               	bsf	14,5	;volatile
  4483  04B5  0008               	return
  4484  04B6                     __end_of_EnableMCP201:	
  4485  04B6                     __ptext12:	
  4486 ;; *************** function _FILTER_Init *****************
  4487 ;; Defined at:
  4488 ;;		line 226 in file "../adc.c"
  4489 ;; Parameters:    Size  Location     Type
  4490 ;;		None
  4491 ;; Auto vars:     Size  Location     Type
  4492 ;;		None
  4493 ;; Return value:  Size  Location     Type
  4494 ;;                  1    wreg      void 
  4495 ;; Registers used:
  4496 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4497 ;; Tracked objects:
  4498 ;;		On entry : 1F/2
  4499 ;;		On exit  : 1F/1
  4500 ;;		Unchanged: 0/0
  4501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4502 ;;      Params:         0       0       0       0       0       0       0       0
  4503 ;;      Locals:         0       0       0       0       0       0       0       0
  4504 ;;      Temps:          0       0       0       0       0       0       0       0
  4505 ;;      Totals:         0       0       0       0       0       0       0       0
  4506 ;;Total ram usage:        0 bytes
  4507 ;; Hardware stack levels used:    1
  4508 ;; Hardware stack levels required when called:    4
  4509 ;; This function calls:
  4510 ;;		_ADC_Read
  4511 ;;		_ADC_Wait
  4512 ;; This function is called by:
  4513 ;;		_system_init
  4514 ;; This function uses a non-reentrant model
  4515 ;;
  4516                           
  4517                           
  4518                           ;psect for function _FILTER_Init
  4519  04B6                     _FILTER_Init:	
  4520                           
  4521                           ;adc.c: 230: for( windowPtr1 = 0; windowPtr1 < 8; windowPtr1++ )
  4522                           
  4523                           ;incstack = 0
  4524                           ; Regs used in _FILTER_Init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4525  04B6  0021               	movlb	1	; select bank1
  4526  04B7  01E7               	clrf	_windowPtr1^(0+128)
  4527  04B8                     l12260:	
  4528  04B8  3008               	movlw	8
  4529  04B9  0267               	subwf	_windowPtr1^(0+128),w
  4530  04BA  1803               	btfsc	3,0
  4531  04BB  0008               	return
  4532                           
  4533                           ;adc.c: 232: {
  4534                           ;adc.c: 234: ( ADCON0 = ( 0x0C << 2 ) | 0x01 );
  4535  04BC  3031               	movlw	49
  4536  04BD  009D               	movwf	29	;volatile
  4537                           
  4538                           ;adc.c: 235: ADC_Wait( );
  4539  04BE  3196  2623  3180   	fcall	_ADC_Wait
  4540                           
  4541                           ;adc.c: 236: ui16_Ubat_bldc.w = ADC_Read( );
  4542  04C1  24CF  3180         	fcall	_ADC_Read
  4543  04C3  0825               	movf	?_ADC_Read+1,w
  4544  04C4  00E7               	movwf	_ui16_Ubat_bldc+1	;volatile
  4545  04C5  0824               	movf	?_ADC_Read,w
  4546  04C6  00E6               	movwf	_ui16_Ubat_bldc	;volatile
  4547                           
  4548                           ;adc.c: 237: inputArray1[ windowPtr1 ] = 350;
  4549  04C7  258F  3180         	fcall	PL96	;call to abstracted procedure
  4550  04C9  305E               	movlw	94
  4551  04CA  3FC0               	movwi [0]fsr1
  4552  04CB  3001               	movlw	1
  4553  04CC  3FC1               	movwi [1]fsr1
  4554  04CD  0AE7               	incf	_windowPtr1^(0+128),f
  4555  04CE  2CB8               	goto	l12260
  4556  04CF                     __end_of_FILTER_Init:	
  4557  04CF                     __ptext40:	
  4558 ;; *************** function _ADC_Read *****************
  4559 ;; Defined at:
  4560 ;;		line 175 in file "../adc.c"
  4561 ;; Parameters:    Size  Location     Type
  4562 ;;		None
  4563 ;; Auto vars:     Size  Location     Type
  4564 ;;  i               1    6[BANK0 ] unsigned char 
  4565 ;; Return value:  Size  Location     Type
  4566 ;;                  2    4[BANK0 ] unsigned int 
  4567 ;; Registers used:
  4568 ;;		wreg, status,2, status,0
  4569 ;; Tracked objects:
  4570 ;;		On entry : 0/1
  4571 ;;		On exit  : 1F/0
  4572 ;;		Unchanged: 0/0
  4573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4574 ;;      Params:         0       2       0       0       0       0       0       0
  4575 ;;      Locals:         0       1       0       0       0       0       0       0
  4576 ;;      Temps:          0       0       0       0       0       0       0       0
  4577 ;;      Totals:         0       3       0       0       0       0       0       0
  4578 ;;Total ram usage:        3 bytes
  4579 ;; Hardware stack levels used:    1
  4580 ;; Hardware stack levels required when called:    3
  4581 ;; This function calls:
  4582 ;;		Nothing
  4583 ;; This function is called by:
  4584 ;;		_FILTER_Init
  4585 ;;		_EOL
  4586 ;;		_I_calibrationInit
  4587 ;; This function uses a non-reentrant model
  4588 ;;
  4589                           
  4590                           
  4591                           ;psect for function _ADC_Read
  4592  04CF                     _ADC_Read:	
  4593                           
  4594                           ;adc.c: 179: unsigned char i;
  4595                           ;adc.c: 180: i = 0;
  4596                           
  4597                           ;incstack = 0
  4598                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  4599  04CF  0020               	movlb	0	; select bank0
  4600  04D0  01A6               	clrf	ADC_Read@i
  4601  04D1                     l69:	
  4602                           ;adc.c: 182: while( GO_nDONE )
  4603                           
  4604  04D1  0021               	movlb	1	; select bank1
  4605  04D2  1C9D               	btfss	29,1	;volatile
  4606  04D3  2CDA               	goto	l12162
  4607                           
  4608                           ;adc.c: 184: {
  4609                           ;adc.c: 186: i++;
  4610  04D4  0020               	movlb	0	; select bank0
  4611  04D5  3041               	movlw	65
  4612  04D6  0AA6               	incf	ADC_Read@i,f
  4613                           
  4614                           ;adc.c: 189: if( i > 64 )
  4615  04D7  0226               	subwf	ADC_Read@i,w
  4616  04D8  1C03               	skipc
  4617  04D9  2CD1               	goto	l69
  4618  04DA                     l12162:	
  4619                           
  4620                           ;adc.c: 195: }
  4621                           ;adc.c: 198: }
  4622                           ;adc.c: 201: analog_value.b.hi = ADRESH;
  4623  04DA  0021               	movlb	1	; select bank1
  4624                           
  4625                           ;adc.c: 202: analog_value.b.lo = ADRESL;
  4626                           
  4627                           ;adc.c: 204: return analog_value.w;
  4628  04DB  319F  27A4         	fcall	PL114	;call to abstracted procedure
  4629  04DD  0020               	movlb	0	; select bank0
  4630  04DE  00A5               	movwf	?_ADC_Read+1
  4631  04DF  0021               	movlb	1	; select bank1
  4632  04E0  083A               	movf	_analog_value^(0+128),w	;volatile
  4633  04E1  0020               	movlb	0	; select bank0
  4634  04E2  00A4               	movwf	?_ADC_Read
  4635  04E3  0008               	return
  4636  04E4                     __end_of_ADC_Read:	
  4637  04E4                     __ptext10:	
  4638 ;; *************** function _Oscill_Source_Block *****************
  4639 ;; Defined at:
  4640 ;;		line 478 in file "../timer.c"
  4641 ;; Parameters:    Size  Location     Type
  4642 ;;		None
  4643 ;; Auto vars:     Size  Location     Type
  4644 ;;		None
  4645 ;; Return value:  Size  Location     Type
  4646 ;;                  1    wreg      void 
  4647 ;; Registers used:
  4648 ;;		wreg
  4649 ;; Tracked objects:
  4650 ;;		On entry : 1F/0
  4651 ;;		On exit  : 1F/1
  4652 ;;		Unchanged: 0/0
  4653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4654 ;;      Params:         0       0       0       0       0       0       0       0
  4655 ;;      Locals:         0       0       0       0       0       0       0       0
  4656 ;;      Temps:          0       0       0       0       0       0       0       0
  4657 ;;      Totals:         0       0       0       0       0       0       0       0
  4658 ;;Total ram usage:        0 bytes
  4659 ;; Hardware stack levels used:    1
  4660 ;; Hardware stack levels required when called:    3
  4661 ;; This function calls:
  4662 ;;		Nothing
  4663 ;; This function is called by:
  4664 ;;		_system_init
  4665 ;; This function uses a non-reentrant model
  4666 ;;
  4667                           
  4668                           
  4669                           ;psect for function _Oscill_Source_Block
  4670  04E4                     _Oscill_Source_Block:	
  4671                           
  4672                           ;timer.c: 482: OSCCON = 0xF0;
  4673                           
  4674                           ;incstack = 0
  4675                           ; Regs used in _Oscill_Source_Block: [wreg]
  4676  04E4  30F0               	movlw	240
  4677  04E5  0021               	movlb	1	; select bank1
  4678  04E6  0099               	movwf	25	;volatile
  4679                           
  4680                           ;timer.c: 483: WDTCON = 0b00010001;
  4681  04E7  3011               	movlw	17
  4682  04E8  0097               	movwf	23	;volatile
  4683  04E9  0008               	return
  4684  04EA                     __end_of_Oscill_Source_Block:	
  4685  04EA                     __ptext9:	
  4686 ;; *************** function _PWM_Capture_init *****************
  4687 ;; Defined at:
  4688 ;;		line 78 in file "../pwm.c"
  4689 ;; Parameters:    Size  Location     Type
  4690 ;;  ui8_CCP_Nb      1    wreg     unsigned char 
  4691 ;; Auto vars:     Size  Location     Type
  4692 ;;  ui8_CCP_Nb      1    4[BANK0 ] unsigned char 
  4693 ;; Return value:  Size  Location     Type
  4694 ;;                  1    wreg      void 
  4695 ;; Registers used:
  4696 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4697 ;; Tracked objects:
  4698 ;;		On entry : 16/1
  4699 ;;		On exit  : 18/0
  4700 ;;		Unchanged: 0/0
  4701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4702 ;;      Params:         0       0       0       0       0       0       0       0
  4703 ;;      Locals:         0       1       0       0       0       0       0       0
  4704 ;;      Temps:          0       0       0       0       0       0       0       0
  4705 ;;      Totals:         0       1       0       0       0       0       0       0
  4706 ;;Total ram usage:        1 bytes
  4707 ;; Hardware stack levels used:    1
  4708 ;; Hardware stack levels required when called:    3
  4709 ;; This function calls:
  4710 ;;		Nothing
  4711 ;; This function is called by:
  4712 ;;		_system_init
  4713 ;; This function uses a non-reentrant model
  4714 ;;
  4715                           
  4716                           
  4717                           ;psect for function _PWM_Capture_init
  4718  04EA                     _PWM_Capture_init:	
  4719                           
  4720                           ;incstack = 0
  4721                           ; Regs used in _PWM_Capture_init: [wreg-fsr0h+status,2+status,0]
  4722                           ;PWM_Capture_init@ui8_CCP_Nb stored from wreg
  4723  04EA  0020               	movlb	0	; select bank0
  4724  04EB  00A4               	movwf	PWM_Capture_init@ui8_CCP_Nb
  4725                           
  4726                           ;pwm.c: 83: ui8_PWMinDC_sav = 0;
  4727  04EC  0021               	movlb	1	; select bank1
  4728  04ED  01C6               	clrf	_ui8_PWMinDC_sav^(0+128)
  4729                           
  4730                           ;pwm.c: 84: ui8_PWMin_failCnt = 0;
  4731  04EE  0022               	movlb	2	; select bank2
  4732  04EF  01D2               	clrf	_ui8_PWMin_failCnt^(0+256)
  4733                           
  4734                           ;pwm.c: 93: switch( ui8_CCP_Nb )
  4735  04F0  0020               	movlb	0	; select bank0
  4736  04F1  0824               	movf	PWM_Capture_init@ui8_CCP_Nb,w
  4737                           
  4738                           ; Switch size 1, requested type "space"
  4739                           ; Number of cases is 5, Range of values is 1 to 5
  4740                           ; switch strategies available:
  4741                           ; Name         Instructions Cycles
  4742                           ; simple_byte           16     9 (average)
  4743                           ; direct_byte           19     9 (fixed)
  4744                           ; jumptable            263     9 (fixed)
  4745                           ;	Chosen strategy is simple_byte
  4746  04F2  3A01               	xorlw	1	; case 1
  4747  04F3  1903               	skipnz
  4748  04F4  2D02               	goto	l6662
  4749  04F5  3A03               	xorlw	3	; case 2
  4750  04F6  1903               	skipnz
  4751  04F7  2D0E               	goto	l6670
  4752  04F8  3A01               	xorlw	1	; case 3
  4753  04F9  1903               	skipnz
  4754  04FA  2D1A               	goto	l6678
  4755  04FB  3A07               	xorlw	7	; case 4
  4756  04FC  1903               	skipnz
  4757  04FD  2D26               	goto	l6686
  4758  04FE  3A01               	xorlw	1	; case 5
  4759  04FF  1903               	skipnz
  4760  0500  2D32               	goto	l6694
  4761  0501  2D3B               	goto	l1368
  4762  0502                     l6662:	
  4763                           
  4764                           ;pwm.c: 99: {
  4765                           ;pwm.c: 101: CCP1CON = 0x00;
  4766  0502  0025               	movlb	5	; select bank5
  4767  0503  0193               	clrf	19	;volatile
  4768                           
  4769                           ;pwm.c: 102: CCPR1L = 0x00;
  4770  0504  0191               	clrf	17	;volatile
  4771                           
  4772                           ;pwm.c: 103: CCPR1H = 0x00;
  4773  0505  0192               	clrf	18	;volatile
  4774                           
  4775                           ;pwm.c: 104: CCP1IE = 1;
  4776  0506  0021               	movlb	1	; select bank1
  4777  0507  1511               	bsf	17,2	;volatile
  4778                           
  4779                           ;pwm.c: 105: CCP1IF = 0;
  4780  0508  0020               	movlb	0	; select bank0
  4781  0509  1111               	bcf	17,2	;volatile
  4782                           
  4783                           ;pwm.c: 106: CCP1CON = 0x05;
  4784  050A  3005               	movlw	5
  4785  050B  0025               	movlb	5	; select bank5
  4786  050C  0093               	movwf	19	;volatile
  4787                           
  4788                           ;pwm.c: 107: break;
  4789  050D  0008               	return
  4790  050E                     l6670:	
  4791                           
  4792                           ;pwm.c: 114: {
  4793                           ;pwm.c: 116: CCP2CON = 0x00;
  4794  050E  0025               	movlb	5	; select bank5
  4795  050F  019A               	clrf	26	;volatile
  4796                           
  4797                           ;pwm.c: 117: CCPR2L = 0x00;
  4798  0510  0198               	clrf	24	;volatile
  4799                           
  4800                           ;pwm.c: 118: CCPR2H = 0x00;
  4801  0511  0199               	clrf	25	;volatile
  4802                           
  4803                           ;pwm.c: 119: CCP2IE = 1;
  4804  0512  0021               	movlb	1	; select bank1
  4805  0513  1412               	bsf	18,0	;volatile
  4806                           
  4807                           ;pwm.c: 120: CCP2IF = 0;
  4808  0514  0020               	movlb	0	; select bank0
  4809  0515  1012               	bcf	18,0	;volatile
  4810                           
  4811                           ;pwm.c: 121: CCP2CON = 0x05;
  4812  0516  3005               	movlw	5
  4813  0517  0025               	movlb	5	; select bank5
  4814  0518  009A               	movwf	26	;volatile
  4815                           
  4816                           ;pwm.c: 122: break;
  4817  0519  0008               	return
  4818  051A                     l6678:	
  4819                           
  4820                           ;pwm.c: 129: {
  4821                           ;pwm.c: 131: CCP3CON = 0x00;
  4822  051A  0026               	movlb	6	; select bank6
  4823  051B  0193               	clrf	19	;volatile
  4824                           
  4825                           ;pwm.c: 132: CCPR3L = 0x00;
  4826  051C  0191               	clrf	17	;volatile
  4827                           
  4828                           ;pwm.c: 133: CCPR3H = 0x00;
  4829  051D  0192               	clrf	18	;volatile
  4830                           
  4831                           ;pwm.c: 134: CCP3IE = 1;
  4832  051E  0021               	movlb	1	; select bank1
  4833  051F  1613               	bsf	19,4	;volatile
  4834                           
  4835                           ;pwm.c: 135: CCP3IF = 0;
  4836  0520  0020               	movlb	0	; select bank0
  4837  0521  1213               	bcf	19,4	;volatile
  4838                           
  4839                           ;pwm.c: 136: CCP3CON = 0x05;
  4840  0522  3005               	movlw	5
  4841  0523  0026               	movlb	6	; select bank6
  4842  0524  0093               	movwf	19	;volatile
  4843                           
  4844                           ;pwm.c: 137: break;
  4845  0525  0008               	return
  4846  0526                     l6686:	
  4847                           
  4848                           ;pwm.c: 144: {
  4849                           ;pwm.c: 146: CCP4CON = 0x00;
  4850  0526  0026               	movlb	6	; select bank6
  4851  0527  019A               	clrf	26	;volatile
  4852                           
  4853                           ;pwm.c: 147: CCPR4L = 0x00;
  4854  0528  0198               	clrf	24	;volatile
  4855                           
  4856                           ;pwm.c: 148: CCPR4H = 0x00;
  4857  0529  0199               	clrf	25	;volatile
  4858                           
  4859                           ;pwm.c: 149: CCP4IE = 1;
  4860  052A  0021               	movlb	1	; select bank1
  4861  052B  1693               	bsf	19,5	;volatile
  4862                           
  4863                           ;pwm.c: 150: CCP4IF = 0;
  4864  052C  0020               	movlb	0	; select bank0
  4865  052D  1293               	bcf	19,5	;volatile
  4866                           
  4867                           ;pwm.c: 151: CCP4CON = 0x05;
  4868  052E  3005               	movlw	5
  4869  052F  0026               	movlb	6	; select bank6
  4870  0530  009A               	movwf	26	;volatile
  4871                           
  4872                           ;pwm.c: 152: break;
  4873  0531  0008               	return
  4874  0532                     l6694:	
  4875                           
  4876                           ;pwm.c: 159: {
  4877                           ;pwm.c: 161: CCP5CON = 0x00;
  4878  0532  0026               	movlb	6	; select bank6
  4879  0533  019E               	clrf	30	;volatile
  4880                           
  4881                           ;pwm.c: 162: CCPR5L = 0x00;
  4882  0534  019C               	clrf	28	;volatile
  4883                           
  4884                           ;pwm.c: 163: CCPR5H = 0x00;
  4885  0535  019D               	clrf	29	;volatile
  4886                           
  4887                           ;pwm.c: 164: CCP5IE = 1;
  4888  0536  0021               	movlb	1	; select bank1
  4889  0537  1713               	bsf	19,6	;volatile
  4890                           
  4891                           ;pwm.c: 165: CCP5IF = 0;
  4892  0538  0020               	movlb	0	; select bank0
  4893  0539  1313               	bcf	19,6	;volatile
  4894                           
  4895                           ;pwm.c: 166: CCP5CON = 0x05;
  4896                           
  4897                           ;pwm.c: 167: break;
  4898  053A  2EE6               	ljmp	PL132	;call to abstracted procedure
  4899  053B                     l1368:	
  4900  053B  0008               	return
  4901  053C                     __end_of_PWM_Capture_init:	
  4902  053C                     __ptext8:	
  4903 ;; *************** function __ELINMIntInitialize *****************
  4904 ;; Defined at:
  4905 ;;		line 482 in file "../lin.c"
  4906 ;; Parameters:    Size  Location     Type
  4907 ;;		None
  4908 ;; Auto vars:     Size  Location     Type
  4909 ;;		None
  4910 ;; Return value:  Size  Location     Type
  4911 ;;                  1    wreg      unsigned char 
  4912 ;; Registers used:
  4913 ;;		wreg, status,2
  4914 ;; Tracked objects:
  4915 ;;		On entry : 1F/0
  4916 ;;		On exit  : 1F/0
  4917 ;;		Unchanged: 0/0
  4918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4919 ;;      Params:         0       0       0       0       0       0       0       0
  4920 ;;      Locals:         0       0       0       0       0       0       0       0
  4921 ;;      Temps:          0       0       0       0       0       0       0       0
  4922 ;;      Totals:         0       0       0       0       0       0       0       0
  4923 ;;Total ram usage:        0 bytes
  4924 ;; Hardware stack levels used:    1
  4925 ;; Hardware stack levels required when called:    3
  4926 ;; This function calls:
  4927 ;;		Nothing
  4928 ;; This function is called by:
  4929 ;;		_system_init
  4930 ;; This function uses a non-reentrant model
  4931 ;;
  4932                           
  4933                           
  4934                           ;psect for function __ELINMIntInitialize
  4935  053C                     __ELINMIntInitialize:	
  4936                           
  4937                           ;lin.c: 487: SPBRG = (((((((0x0AL*32000000L)/19200L)/0x04L)+5)/0x0AL)-2)&0x00FF);
  4938                           
  4939                           ;incstack = 0
  4940                           ; Regs used in __ELINMIntInitialize: [wreg+status,2]
  4941  053C  309F               	movlw	159
  4942  053D  0023               	movlb	3	; select bank3
  4943  053E  009B               	movwf	27	;volatile
  4944                           
  4945                           ;lin.c: 488: SPBRGH = (((((((0x0AL*32000000L)/19200L)/0x04L)+5)/0x0AL)-2)>>8);
  4946  053F  3001               	movlw	1
  4947  0540  009C               	movwf	28	;volatile
  4948                           
  4949                           ;lin.c: 489: TXSTA = 0x26;
  4950  0541  3026               	movlw	38
  4951  0542  009E               	movwf	30	;volatile
  4952                           
  4953                           ;lin.c: 490: RCSTA = 0x90;
  4954  0543  3090               	movlw	144
  4955  0544  009D               	movwf	29	;volatile
  4956                           
  4957                           ;lin.c: 491: BAUDCON = 0x48;
  4958  0545  3048               	movlw	72
  4959  0546  009F               	movwf	31	;volatile
  4960                           
  4961                           ;lin.c: 492: PIE1 = 0x00;
  4962  0547  0021               	movlb	1	; select bank1
  4963  0548  0191               	clrf	17	;volatile
  4964                           
  4965                           ;lin.c: 493: _ELINMIntSleepTimeout = ( ( 25000L * ( 100L * 1000000L / 19200L ) / 128L ) 
      +                          / 100L );
  4966  0549  0023               	movlb	3	; select bank3
  4967  054A  2684               	fcall	PL64	;call to abstracted procedure
  4968                           
  4969                           ;lin.c: 494: _ELINMIntSpace = (0+(((53300L/(((19200L*128L)+5000L)/10000L))+5L)/100L)-1)/
      +                          2;
  4970  054B  0022               	movlb	2	; select bank2
  4971  054C  01DE               	clrf	__ELINMIntSpace^(0+256)
  4972                           
  4973                           ;lin.c: 495: _ELINMIntStatus.ELINMIntStatusByte = 0;
  4974  054D  0020               	movlb	0	; select bank0
  4975  054E  01E0               	clrf	__ELINMIntStatus
  4976                           
  4977                           ;lin.c: 496: _ELINMIntStatus1.ELINMIntStatusByte = 0;
  4978  054F  0021               	movlb	1	; select bank1
  4979  0550  01D0               	clrf	__ELINMIntStatus1^(0+128)
  4980                           
  4981                           ;lin.c: 497: _ELINMIntStatus.ELINMINTSTS.IDLE = 1;
  4982  0551  0020               	movlb	0	; select bank0
  4983  0552  15E0               	bsf	__ELINMIntStatus,3
  4984  0553  0008               	return
  4985  0554                     __end_of__ELINMIntInitialize:	
  4986  0554                     __ptext4:	
  4987 ;; *************** function _init_ports *****************
  4988 ;; Defined at:
  4989 ;;		line 404 in file "../main.c"
  4990 ;; Parameters:    Size  Location     Type
  4991 ;;		None
  4992 ;; Auto vars:     Size  Location     Type
  4993 ;;		None
  4994 ;; Return value:  Size  Location     Type
  4995 ;;                  1    wreg      void 
  4996 ;; Registers used:
  4997 ;;		wreg, status,2, pclath, cstack
  4998 ;; Tracked objects:
  4999 ;;		On entry : B1F/3
  5000 ;;		On exit  : 1F/1
  5001 ;;		Unchanged: 0/0
  5002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5003 ;;      Params:         0       0       0       0       0       0       0       0
  5004 ;;      Locals:         0       0       0       0       0       0       0       0
  5005 ;;      Temps:          0       0       0       0       0       0       0       0
  5006 ;;      Totals:         0       0       0       0       0       0       0       0
  5007 ;;Total ram usage:        0 bytes
  5008 ;; Hardware stack levels used:    1
  5009 ;; Hardware stack levels required when called:    4
  5010 ;; This function calls:
  5011 ;;		_read_eeprom_data
  5012 ;; This function is called by:
  5013 ;;		_system_init
  5014 ;; This function uses a non-reentrant model
  5015 ;;
  5016                           
  5017                           
  5018                           ;psect for function _init_ports
  5019  0554                     _init_ports:	
  5020                           
  5021                           ;main.c: 411: ANSELA = 0b00100111;
  5022                           
  5023                           ;incstack = 0
  5024                           ; Regs used in _init_ports: [wreg+status,2+pclath+cstack]
  5025  0554  3027               	movlw	39
  5026  0555  008C               	movwf	12	;volatile
  5027                           
  5028                           ;main.c: 412: ANSELB = 0b00101001;
  5029  0556  3029               	movlw	41
  5030  0557  008D               	movwf	13	;volatile
  5031                           
  5032                           ;main.c: 415: LATA = 0;
  5033  0558  0022               	movlb	2	; select bank2
  5034  0559  018C               	clrf	12	;volatile
  5035                           
  5036                           ;main.c: 416: LATB = 0;
  5037  055A  018D               	clrf	13	;volatile
  5038                           
  5039                           ;main.c: 417: LATC = 0;
  5040  055B  018E               	clrf	14	;volatile
  5041                           
  5042                           ;main.c: 422: if ((read_eeprom_data(0x55)==0x55) || (RC5==0) )
  5043  055C  3055               	movlw	85
  5044  055D  3195  25BD  3180   	fcall	_read_eeprom_data
  5045  0560  3A55               	xorlw	85
  5046  0561  1903               	skipnz
  5047  0562  2D65               	goto	l12438
  5048  0563  1A8E               	btfsc	14,5	;volatile
  5049  0564  2D68               	goto	l12442
  5050  0565                     l12438:	
  5051                           
  5052                           ;main.c: 424: {
  5053                           ;main.c: 426: TRISA = 0b01111111;
  5054                           
  5055                           ;main.c: 435: TRISB = 0b00111001;
  5056  0565  2596               	fcall	PL104	;call to abstracted procedure
  5057                           
  5058                           ;main.c: 444: TRISC = 0b00000000;
  5059  0566  018E               	clrf	14	;volatile
  5060                           
  5061                           ;main.c: 455: }
  5062  0567  0008               	return
  5063  0568                     l12442:	
  5064                           
  5065                           ;main.c: 458: else
  5066                           ;main.c: 459: {
  5067                           ;main.c: 461: TRISA = 0b01111111;
  5068                           
  5069                           ;main.c: 470: TRISB = 0b00111001;
  5070  0568  2596               	fcall	PL104	;call to abstracted procedure
  5071                           
  5072                           ;main.c: 479: TRISC = 0b10000000;
  5073  0569  3080               	movlw	128
  5074  056A  008E               	movwf	14	;volatile
  5075  056B  0008               	return
  5076  056C                     __end_of_init_ports:	
  5077  056C                     __ptext5:	
  5078 ;; *************** function _init_bldc *****************
  5079 ;; Defined at:
  5080 ;;		line 207 in file "../bldc.c"
  5081 ;; Parameters:    Size  Location     Type
  5082 ;;		None
  5083 ;; Auto vars:     Size  Location     Type
  5084 ;;		None
  5085 ;; Return value:  Size  Location     Type
  5086 ;;                  1    wreg      void 
  5087 ;; Registers used:
  5088 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5089 ;; Tracked objects:
  5090 ;;		On entry : 1F/2
  5091 ;;		On exit  : 1F/0
  5092 ;;		Unchanged: 0/0
  5093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5094 ;;      Params:         0       0       0       0       0       0       0       0
  5095 ;;      Locals:         0       0       0       0       0       0       0       0
  5096 ;;      Temps:          0       0       0       0       0       0       0       0
  5097 ;;      Totals:         0       0       0       0       0       0       0       0
  5098 ;;Total ram usage:        0 bytes
  5099 ;; Hardware stack levels used:    1
  5100 ;; Hardware stack levels required when called:    5
  5101 ;; This function calls:
  5102 ;;		_InitMotorRun
  5103 ;; This function is called by:
  5104 ;;		_system_init
  5105 ;; This function uses a non-reentrant model
  5106 ;;
  5107                           
  5108                           
  5109                           ;psect for function _init_bldc
  5110  056C                     _init_bldc:	
  5111                           
  5112                           ;bldc.c: 218: PSTR1CON = 0;
  5113                           
  5114                           ;incstack = 0
  5115                           ; Regs used in _init_bldc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5116  056C  0025               	movlb	5	; select bank5
  5117  056D  0196               	clrf	22	;volatile
  5118                           
  5119                           ;bldc.c: 222: CM1CON0 = 0x80;
  5120  056E  3080               	movlw	128
  5121  056F  0022               	movlb	2	; select bank2
  5122  0570  0091               	movwf	17	;volatile
  5123                           
  5124                           ;bldc.c: 228: CM1CON1 = 0x00;
  5125  0571  0192               	clrf	18	;volatile
  5126                           
  5127                           ;bldc.c: 230: C1IE = 0;
  5128  0572  0021               	movlb	1	; select bank1
  5129  0573  1292               	bcf	18,5	;volatile
  5130                           
  5131                           ;bldc.c: 235: PWM1CON = 0x87;
  5132  0574  3087               	movlw	135
  5133  0575  0025               	movlb	5	; select bank5
  5134  0576  0094               	movwf	20	;volatile
  5135                           
  5136                           ;bldc.c: 239: CCP1AS = 0x800;
  5137  0577  0195               	clrf	21	;volatile
  5138                           
  5139                           ;bldc.c: 240: CCP1CON = 0x0C;
  5140  0578  300C               	movlw	12
  5141  0579  0093               	movwf	19	;volatile
  5142                           
  5143                           ;bldc.c: 246: CCPR1L = 0;
  5144  057A  0191               	clrf	17	;volatile
  5145                           
  5146                           ;bldc.c: 248: CCP2IE = 0;
  5147  057B  0021               	movlb	1	; select bank1
  5148  057C  1012               	bcf	18,0	;volatile
  5149                           
  5150                           ;bldc.c: 249: CCP2CON = 0x04;
  5151  057D  3004               	movlw	4
  5152  057E  0025               	movlb	5	; select bank5
  5153  057F  009A               	movwf	26	;volatile
  5154                           
  5155                           ;bldc.c: 250: CCPR2L = 0xff;
  5156  0580  30FF               	movlw	255
  5157  0581  0098               	movwf	24	;volatile
  5158                           
  5159                           ;bldc.c: 251: CCPR2H = 0xff;
  5160  0582  0099               	movwf	25	;volatile
  5161                           
  5162                           ;bldc.c: 253: PR2 = ( unsigned char ) ( 32000000UL / ( 16 * 20000UL ) );
  5163  0583  3064               	movlw	100
  5164  0584  0020               	movlb	0	; select bank0
  5165  0585  009B               	movwf	27	;volatile
  5166                           
  5167                           ;bldc.c: 255: T2CON = 0x05;
  5168  0586  3005               	movlw	5
  5169  0587  009C               	movwf	28	;volatile
  5170                           
  5171                           ;bldc.c: 260: ui8_BlankingCount = ( unsigned char ) ( 0.002 * 20000UL );
  5172  0588  3028               	movlw	40
  5173  0589  0021               	movlb	1	; select bank1
  5174  058A  00E3               	movwf	_ui8_BlankingCount^(0+128)
  5175                           
  5176                           ;bldc.c: 264: TMR2IE = 1;
  5177  058B  1491               	bsf	17,1	;volatile
  5178                           
  5179                           ;bldc.c: 267: MotorFlags.b = 0;
  5180  058C  0020               	movlb	0	; select bank0
  5181  058D  01E3               	clrf	_MotorFlags
  5182                           
  5183                           ;bldc.c: 270: InitMotorRun( );
  5184  058E  2B92               	ljmp	l6240
  5185  058F                     __end_of_init_bldc:	
  5186  058F                     PL96:	
  5187  058F  0021               	movlb	1	; select bank1
  5188  0590  3567               	lslf	_windowPtr1^(0+128),w
  5189  0591  3E40               	addlw	(low (_inputArray1| (0+512)))& (0+255)
  5190  0592  0086               	movwf	6
  5191  0593  3002               	movlw	2	; select bank4/5
  5192  0594  0087               	movwf	7
  5193  0595  0008               	return
  5194  0596                     __end_ofPL96:	
  5195  0596                     PL104:	
  5196  0596  307F               	movlw	127
  5197  0597  0021               	movlb	1	; select bank1
  5198  0598  008C               	movwf	12	;volatile
  5199  0599  3039               	movlw	57
  5200  059A  008D               	movwf	13	;volatile
  5201  059B  0008               	return
  5202  059C                     __end_ofPL104:	
  5203  059C                     __ptext60:	
  5204 ;; *************** function _ELINMIntHandler *****************
  5205 ;; Defined at:
  5206 ;;		line 555 in file "../lin.c"
  5207 ;; Parameters:    Size  Location     Type
  5208 ;;		None
  5209 ;; Auto vars:     Size  Location     Type
  5210 ;;		None
  5211 ;; Return value:  Size  Location     Type
  5212 ;;                  1    wreg      void 
  5213 ;; Registers used:
  5214 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5215 ;; Tracked objects:
  5216 ;;		On entry : 1F/0
  5217 ;;		On exit  : 1C/0
  5218 ;;		Unchanged: 0/0
  5219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5220 ;;      Params:         0       0       0       0       0       0       0       0
  5221 ;;      Locals:         0       0       0       0       0       0       0       0
  5222 ;;      Temps:          0       0       0       0       0       0       0       0
  5223 ;;      Totals:         0       0       0       0       0       0       0       0
  5224 ;;Total ram usage:        0 bytes
  5225 ;; Hardware stack levels used:    1
  5226 ;; Hardware stack levels required when called:    1
  5227 ;; This function calls:
  5228 ;;		__ELINMIntResetProtocol
  5229 ;; This function is called by:
  5230 ;;		_interrupt_handler
  5231 ;; This function uses a non-reentrant model
  5232 ;;
  5233                           
  5234                           
  5235                           ;psect for function _ELINMIntHandler
  5236  059C                     _ELINMIntHandler:	
  5237                           
  5238                           ;lin.c: 560: if( SENDB == 0)
  5239                           
  5240                           ;incstack = 0
  5241                           ; Regs used in _ELINMIntHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5242  059C  0023               	movlb	3	; select bank3
  5243  059D  199E               	btfsc	30,3	;volatile
  5244  059E  2E20               	goto	i1l8178
  5245                           
  5246                           ;lin.c: 563: {
  5247                           ;lin.c: 565: if( RCIF)
  5248  059F  0020               	movlb	0	; select bank0
  5249  05A0  1E91               	btfss	17,5	;volatile
  5250  05A1  2E20               	goto	i1l8178
  5251                           
  5252                           ;lin.c: 568: {
  5253                           ;lin.c: 572: if( _ELINMIntStatus.ELINMINTSTS.IDLE)
  5254  05A2  1DE0               	btfss	__ELINMIntStatus,3
  5255  05A3  2DB8               	goto	i1l964
  5256                           
  5257                           ;lin.c: 575: {
  5258                           ;lin.c: 577: if( ( RCSTA & 0x06 ) == 0)
  5259  05A4  0023               	movlb	3	; select bank3
  5260  05A5  081D               	movf	29,w	;volatile
  5261  05A6  3906               	andlw	6
  5262  05A7  1D03               	btfss	3,2
  5263  05A8  2E20               	goto	i1l8178
  5264                           
  5265                           ;lin.c: 580: {
  5266                           ;lin.c: 584: if( RCREG == 0x80)
  5267  05A9  3080               	movlw	128
  5268  05AA  0619               	xorwf	25,w	;volatile
  5269  05AB  1D03               	btfss	3,2
  5270  05AC  2E20               	goto	i1l8178
  5271                           
  5272                           ;lin.c: 587: {
  5273                           ;lin.c: 589: _ELINMIntSleepTimeout = ( ( 25000L * ( 100L * 1000000L / 19200L ) / 128L ) 
      +                          / 100L );
  5274  05AD  2684  3180         	fcall	PL64	;call to abstracted procedure
  5275                           
  5276                           ;lin.c: 590: _ELINMIntReadBack = RCREG;
  5277  05AF  0819               	movf	25,w	;volatile
  5278  05B0  0021               	movlb	1	; select bank1
  5279  05B1  00CE               	movwf	__ELINMIntReadBack^(0+128)
  5280                           
  5281                           ;lin.c: 593: if( _ELINMIntStatus1.ELINMINTSTS.WAKEUP_SENT)
  5282  05B2  1ED0               	btfss	__ELINMIntStatus1^(0+128),5
  5283  05B3  2DB6               	goto	i1l967
  5284                           
  5285                           ;lin.c: 596: {
  5286                           ;lin.c: 598: _ELINMIntStatus1.ELINMINTSTS.WAKEUP_SENT = 0;
  5287  05B4  12D0               	bcf	__ELINMIntStatus1^(0+128),5
  5288                           
  5289                           ;lin.c: 601: }
  5290  05B5  2E20               	goto	i1l8178
  5291  05B6                     i1l967:	
  5292                           
  5293                           ;lin.c: 604: else
  5294                           ;lin.c: 605: {
  5295                           ;lin.c: 607: _ELINMIntStatus1.ELINMINTSTS.WAKEUP = 1;
  5296  05B6  1450               	bsf	__ELINMIntStatus1^(0+128),0
  5297  05B7  2E20               	goto	i1l8178
  5298  05B8                     i1l964:	
  5299                           
  5300                           ;lin.c: 623: else
  5301                           ;lin.c: 624: {
  5302                           ;lin.c: 626: if( _ELINMIntStatus.ELINMINTSTS.TX)
  5303  05B8  1C60               	btfss	__ELINMIntStatus,0
  5304  05B9  2DF3               	goto	i1l970
  5305                           
  5306                           ;lin.c: 629: {
  5307                           ;lin.c: 633: if( ( RCSTA & 0x06 ) && _ELINMIntMessageBufferPointer)
  5308  05BA  0023               	movlb	3	; select bank3
  5309  05BB  081D               	movf	29,w	;volatile
  5310  05BC  3906               	andlw	6
  5311  05BD  1903               	btfsc	3,2
  5312  05BE  2DC3               	goto	i1l8126
  5313  05BF  0021               	movlb	1	; select bank1
  5314  05C0  084D               	movf	__ELINMIntMessageBufferPointer^(0+128),w
  5315  05C1  1D03               	btfss	3,2
  5316  05C2  2DFA               	goto	i1l8158
  5317  05C3                     i1l8126:	
  5318                           ;lin.c: 642: }
  5319                           
  5320                           ;lin.c: 636: {
  5321                           ;lin.c: 638: _ELINMIntResetProtocol(
  5322                           ;lin.c: 639: 0x08 + 0x04 + 0x70 );
  5323                           
  5324                           
  5325                           ;lin.c: 645: else
  5326                           ;lin.c: 646: {
  5327                           ;lin.c: 651: if( _ELINMIntMessageBufferPointer == 2)
  5328  05C3  3002               	movlw	2
  5329  05C4  0021               	movlb	1	; select bank1
  5330  05C5  064D               	xorwf	__ELINMIntMessageBufferPointer^(0+128),w
  5331  05C6  1903               	btfsc	3,2
  5332                           
  5333                           ;lin.c: 654: {
  5334                           ;lin.c: 656: _ELINMIntStatus1.ELINMINTSTS.HEADER = 0;
  5335  05C7  10D0               	bcf	__ELINMIntStatus1^(0+128),1
  5336                           
  5337                           ;lin.c: 659: }
  5338                           ;lin.c: 662: if( _ELINMIntSpace)
  5339  05C8  0022               	movlb	2	; select bank2
  5340  05C9  085E               	movf	__ELINMIntSpace^(0+256),w
  5341  05CA  1903               	btfsc	3,2
  5342  05CB  2DCE               	goto	i1l8134
  5343                           
  5344                           ;lin.c: 665: {
  5345                           ;lin.c: 667: _ELINMIntSpace--;
  5346  05CC  03DE               	decf	__ELINMIntSpace^(0+256),f
  5347                           
  5348                           ;lin.c: 670: }
  5349  05CD  2E20               	goto	i1l8178
  5350  05CE                     i1l8134:	
  5351                           
  5352                           ;lin.c: 673: else
  5353                           ;lin.c: 674: {
  5354                           ;lin.c: 676: if( _ELINMIntReadBack != RCREG)
  5355  05CE  0021               	movlb	1	; select bank1
  5356  05CF  084E               	movf	__ELINMIntReadBack^(0+128),w
  5357  05D0  0023               	movlb	3	; select bank3
  5358  05D1  0619               	xorwf	25,w	;volatile
  5359  05D2  1903               	skipnz
  5360  05D3  2DD6               	goto	i1l8138
  5361                           
  5362                           ;lin.c: 679: {
  5363                           ;lin.c: 681: _ELINMIntResetProtocol(0x08 + 0x04 + 0x60 );
  5364  05D4  306C               	movlw	108
  5365  05D5  2E1E               	goto	L60
  5366  05D6                     i1l8138:	
  5367                           ;lin.c: 684: }
  5368                           
  5369                           
  5370                           ;lin.c: 687: else
  5371                           ;lin.c: 688: {
  5372                           ;lin.c: 693: if( _ELINMIntMessageSize.SIZE)
  5373  05D6  0021               	movlb	1	; select bank1
  5374  05D7  084F               	movf	__ELINMIntMessageSize^(0+128),w
  5375  05D8  1903               	btfsc	3,2
  5376  05D9  2DE9               	goto	i1l978
  5377                           
  5378                           ;lin.c: 696: {
  5379                           ;lin.c: 698: _ELINMIntReadBack = RCREG;
  5380  05DA  0023               	movlb	3	; select bank3
  5381  05DB  0819               	movf	25,w	;volatile
  5382  05DC  0021               	movlb	1	; select bank1
  5383  05DD  00CE               	movwf	__ELINMIntReadBack^(0+128)
  5384                           
  5385                           ;lin.c: 699: _ELINMIntReadBack = _ELINMIntMessageBuffer[ _ELINMIntMessageBufferPointer ]
      +                          ;
  5386  05DE  084D               	movf	__ELINMIntMessageBufferPointer^(0+128),w
  5387  05DF  268B  3180         	fcall	PL106	;call to abstracted procedure
  5388  05E1  00CE               	movwf	__ELINMIntReadBack^(0+128)
  5389                           
  5390                           ;lin.c: 700: TXREG = _ELINMIntReadBack; _ELINMIntMessageSize.SIZE--;
  5391  05E2  0023               	movlb	3	; select bank3
  5392  05E3  009A               	movwf	26	;volatile
  5393  05E4  0021               	movlb	1	; select bank1
  5394  05E5  03CF               	decf	__ELINMIntMessageSize^(0+128),f
  5395  05E6                     i1l8148:	
  5396                           
  5397                           ;lin.c: 702: _ELINMIntSpace += (0+(((53300L/(((19200L*128L)+5000L)/10000L))+5L)/100L)-1)
      +                          /2;
  5398  05E6  0021               	movlb	1	; select bank1
  5399  05E7  0ACD               	incf	__ELINMIntMessageBufferPointer^(0+128),f
  5400                           
  5401                           ;lin.c: 705: }
  5402  05E8  2E20               	goto	i1l8178
  5403  05E9                     i1l978:	
  5404                           
  5405                           ;lin.c: 708: else
  5406                           ;lin.c: 709: {
  5407                           ;lin.c: 714: if( _ELINMIntStatus.ELINMINTSTS.RX)
  5408  05E9  0020               	movlb	0	; select bank0
  5409  05EA  1CE0               	btfss	__ELINMIntStatus,1
  5410  05EB  2DF0               	goto	i1l980
  5411                           
  5412                           ;lin.c: 717: {
  5413                           ;lin.c: 719: _ELINMIntStatus.ELINMINTSTS.TX = 0;
  5414  05EC  1060               	bcf	__ELINMIntStatus,0
  5415                           
  5416                           ;lin.c: 720: _ELINMIntMessageBufferPointer = 0;
  5417  05ED  0021               	movlb	1	; select bank1
  5418  05EE  01CD               	clrf	__ELINMIntMessageBufferPointer^(0+128)
  5419                           
  5420                           ;lin.c: 723: }
  5421  05EF  2E20               	goto	i1l8178
  5422  05F0                     i1l980:	
  5423                           
  5424                           ;lin.c: 726: else
  5425                           ;lin.c: 727: {
  5426                           ;lin.c: 732: _ELINMIntStatus1.ELINMINTSTS.FRAME = 0;
  5427  05F0  0021               	movlb	1	; select bank1
  5428  05F1  1150               	bcf	__ELINMIntStatus1^(0+128),2
  5429  05F2  2E1D               	goto	i1l8176
  5430  05F3                     i1l970:	
  5431                           ;lin.c: 733: _ELINMIntResetProtocol( 0x08 );
  5432                           
  5433                           
  5434                           ;lin.c: 755: else
  5435                           ;lin.c: 756: {
  5436                           ;lin.c: 758: if( _ELINMIntStatus.ELINMINTSTS.RX)
  5437  05F3  1CE0               	btfss	__ELINMIntStatus,1
  5438  05F4  2E20               	goto	i1l8178
  5439                           
  5440                           ;lin.c: 761: {
  5441                           ;lin.c: 765: if( RCSTA & 0x06)
  5442  05F5  0023               	movlb	3	; select bank3
  5443  05F6  081D               	movf	29,w	;volatile
  5444  05F7  3906               	andlw	6
  5445  05F8  1903               	btfsc	3,2
  5446  05F9  2DFC               	goto	i1l8160
  5447  05FA                     i1l8158:	
  5448                           
  5449                           ;lin.c: 768: {
  5450                           ;lin.c: 770: _ELINMIntResetProtocol( 0x08 + 0x04 + 0x70 );
  5451  05FA  307C               	movlw	124
  5452  05FB  2E1E               	goto	L60
  5453  05FC                     i1l8160:	
  5454                           ;lin.c: 773: }
  5455                           
  5456                           
  5457                           ;lin.c: 776: else
  5458                           ;lin.c: 777: {
  5459                           ;lin.c: 779: if( _ELINMIntRXMessageSize.SIZE)
  5460  05FC  0022               	movlb	2	; select bank2
  5461  05FD  085F               	movf	__ELINMIntRXMessageSize^(0+256),w
  5462  05FE  1903               	btfsc	3,2
  5463  05FF  2E14               	goto	i1l8172
  5464                           
  5465                           ;lin.c: 782: {
  5466                           ;lin.c: 784: _ELINMIntMessageBuffer [ _ELINMIntMessageBufferPointer ] = RCREG;
  5467  0600  0021               	movlb	1	; select bank1
  5468  0601  084D               	movf	__ELINMIntMessageBufferPointer^(0+128),w
  5469  0602  3E50               	addlw	(low (__ELINMIntMessageBuffer| (0+512)))& (0+255)
  5470  0603  0086               	movwf	6
  5471  0604  3002               	movlw	2	; select bank4/5
  5472  0605  0087               	movwf	7
  5473  0606  0023               	movlb	3	; select bank3
  5474  0607  0819               	movf	25,w	;volatile
  5475  0608  0081               	movwf	1
  5476                           
  5477                           ;lin.c: 785: _ELINMIntRXMessageSize.SIZE--;
  5478  0609  0022               	movlb	2	; select bank2
  5479  060A  03DF               	decf	__ELINMIntRXMessageSize^(0+256),f
  5480                           
  5481                           ;lin.c: 786: _ELINMIntRXCRC.CRC += RCREG;
  5482  060B  0023               	movlb	3	; select bank3
  5483  060C  0819               	movf	25,w	;volatile
  5484  060D  07D0               	addwf	__ELINMIntRXCRC^(0+384),f
  5485  060E  1803               	skipnc
  5486  060F  0AD1               	incf	(__ELINMIntRXCRC+1)^(0+384),f
  5487                           
  5488                           ;lin.c: 789: if( _ELINMIntRXCRC.CRCbits.CRC8)
  5489  0610  1C51               	btfss	(__ELINMIntRXCRC^(0+384)+1),0
  5490  0611  2DE6               	goto	i1l8148
  5491                           
  5492                           ;lin.c: 792: {
  5493                           ;lin.c: 794: _ELINMIntRXCRC.CRCL++;
  5494  0612  0AD0               	incf	__ELINMIntRXCRC^(0+384),f
  5495  0613  2DE6               	goto	i1l8148
  5496  0614                     i1l8172:	
  5497                           
  5498                           ;lin.c: 813: _ELINMIntRXCRC.CRCL += RCREG + 1;
  5499  0614  0023               	movlb	3	; select bank3
  5500  0615  0819               	movf	25,w	;volatile
  5501  0616  3E01               	addlw	1
  5502  0617  07D0               	addwf	__ELINMIntRXCRC^(0+384),f
  5503                           
  5504                           ;lin.c: 816: if( _ELINMIntRXCRC.CRCL )
  5505  0618  0850               	movf	__ELINMIntRXCRC^(0+384),w
  5506  0619  1903               	btfsc	3,2
  5507  061A  2E1D               	goto	i1l8176
  5508                           
  5509                           ;lin.c: 819: {
  5510                           ;lin.c: 821: _ELINMIntResetProtocol( 0x08 + 0x04 + 0x50 );
  5511  061B  305C               	movlw	92
  5512  061C  2E1E               	goto	L60
  5513  061D                     i1l8176:	
  5514                           ;lin.c: 824: }
  5515                           
  5516                           
  5517                           ;lin.c: 827: else
  5518                           ;lin.c: 828: {
  5519                           ;lin.c: 830: _ELINMIntResetProtocol( 0x08 );
  5520  061D  3008               	movlw	8
  5521  061E                     L60:	
  5522  061E  2675  3180         	fcall	__ELINMIntResetProtocol
  5523  0620                     i1l8178:	
  5524                           
  5525                           ;lin.c: 833: }
  5526                           ;lin.c: 836: }
  5527                           ;lin.c: 839: }
  5528                           ;lin.c: 843: }
  5529                           ;lin.c: 846: }
  5530                           ;lin.c: 849: }
  5531                           ;lin.c: 853: }
  5532                           ;lin.c: 856: }
  5533                           ;lin.c: 859: if( _ELINMIntStatus.ELINMINTSTS.IDLE == 0 )
  5534  0620  0020               	movlb	0	; select bank0
  5535  0621  19E0               	btfsc	__ELINMIntStatus,3
  5536  0622  2E61               	goto	i1l991
  5537                           
  5538                           ;lin.c: 862: {
  5539                           ;lin.c: 866: if( _ELINMIntStatus1.ELINMINTSTS.FRAME == 1)
  5540  0623  0021               	movlb	1	; select bank1
  5541  0624  1D50               	btfss	__ELINMIntStatus1^(0+128),2
  5542  0625  2E5A               	goto	i1l8208
  5543                           
  5544                           ;lin.c: 869: {
  5545                           ;lin.c: 871: if( _ELINMIntStatus1.ELINMINTSTS.HEADER == 1)
  5546  0626  1CD0               	btfss	__ELINMIntStatus1^(0+128),1
  5547  0627  2E3D               	goto	i1l8194
  5548                           
  5549                           ;lin.c: 874: {
  5550                           ;lin.c: 876: if( _ELINMIntTHeaderMin)
  5551  0628  0022               	movlb	2	; select bank2
  5552  0629  082B               	movf	__ELINMIntTHeaderMin^(0+256),w
  5553  062A  042C               	iorwf	(__ELINMIntTHeaderMin+1)^(0+256),w
  5554  062B  1903               	btfsc	3,2
  5555  062C  2E31               	goto	i1l8188
  5556                           
  5557                           ;lin.c: 879: {
  5558                           ;lin.c: 881: _ELINMIntTHeaderMin--;
  5559  062D  3001               	movlw	1
  5560  062E  02AB               	subwf	__ELINMIntTHeaderMin^(0+256),f
  5561  062F  3000               	movlw	0
  5562  0630  3BAC               	subwfb	(__ELINMIntTHeaderMin+1)^(0+256),f
  5563  0631                     i1l8188:	
  5564                           
  5565                           ;lin.c: 884: }
  5566                           ;lin.c: 887: if( _ELINMIntTHeaderMax)
  5567  0631  0023               	movlb	3	; select bank3
  5568  0632  084C               	movf	__ELINMIntTHeaderMax^(0+384),w
  5569  0633  044D               	iorwf	(__ELINMIntTHeaderMax+1)^(0+384),w
  5570  0634  1903               	btfsc	3,2
  5571  0635  2E3B               	goto	i1l8192
  5572                           
  5573                           ;lin.c: 890: {
  5574                           ;lin.c: 892: _ELINMIntTHeaderMax--;
  5575  0636  3001               	movlw	1
  5576  0637  02CC               	subwf	__ELINMIntTHeaderMax^(0+384),f
  5577  0638  3000               	movlw	0
  5578  0639  3BCD               	subwfb	(__ELINMIntTHeaderMax+1)^(0+384),f
  5579                           
  5580                           ;lin.c: 895: }
  5581  063A  2E45               	goto	i1l8198
  5582  063B                     i1l8192:	
  5583                           
  5584                           ;lin.c: 898: else
  5585                           ;lin.c: 899: {
  5586                           ;lin.c: 902: _ELINMIntResetProtocol( 0x08 + 0x04 + 0x20 );
  5587  063B  302C               	movlw	44
  5588  063C  2E43               	goto	L61
  5589  063D                     i1l8194:	
  5590                           
  5591                           ;lin.c: 911: else
  5592                           ;lin.c: 912: {
  5593                           ;lin.c: 917: if( _ELINMIntTHeaderMin)
  5594  063D  0022               	movlb	2	; select bank2
  5595  063E  082B               	movf	__ELINMIntTHeaderMin^(0+256),w
  5596  063F  042C               	iorwf	(__ELINMIntTHeaderMin+1)^(0+256),w
  5597  0640  1903               	btfsc	3,2
  5598  0641  2E45               	goto	i1l8198
  5599                           
  5600                           ;lin.c: 920: {
  5601                           ;lin.c: 922: _ELINMIntResetProtocol( 0x08 + 0x04 + 0x10 );
  5602  0642  301C               	movlw	28
  5603  0643                     L61:	
  5604  0643  2675  3180         	fcall	__ELINMIntResetProtocol
  5605  0645                     i1l8198:	
  5606                           
  5607                           ;lin.c: 925: }
  5608                           ;lin.c: 928: }
  5609                           ;lin.c: 931: if( _ELINMIntTFrameMin)
  5610  0645  0022               	movlb	2	; select bank2
  5611  0646  082D               	movf	__ELINMIntTFrameMin^(0+256),w
  5612  0647  042E               	iorwf	(__ELINMIntTFrameMin+1)^(0+256),w
  5613  0648  1903               	btfsc	3,2
  5614  0649  2E4E               	goto	i1l8202
  5615                           
  5616                           ;lin.c: 934: {
  5617                           ;lin.c: 936: _ELINMIntTFrameMin--;
  5618  064A  3001               	movlw	1
  5619  064B  02AD               	subwf	__ELINMIntTFrameMin^(0+256),f
  5620  064C  3000               	movlw	0
  5621  064D  3BAE               	subwfb	(__ELINMIntTFrameMin+1)^(0+256),f
  5622  064E                     i1l8202:	
  5623                           
  5624                           ;lin.c: 939: }
  5625                           ;lin.c: 942: if( _ELINMIntTFrameMax)
  5626  064E  0023               	movlb	3	; select bank3
  5627  064F  084E               	movf	__ELINMIntTFrameMax^(0+384),w
  5628  0650  044F               	iorwf	(__ELINMIntTFrameMax+1)^(0+384),w
  5629  0651  1903               	btfsc	3,2
  5630  0652  2E58               	goto	i1l8206
  5631                           
  5632                           ;lin.c: 945: {
  5633                           ;lin.c: 947: _ELINMIntTFrameMax--;
  5634  0653  3001               	movlw	1
  5635  0654  02CE               	subwf	__ELINMIntTFrameMax^(0+384),f
  5636  0655  3000               	movlw	0
  5637  0656  3BCF               	subwfb	(__ELINMIntTFrameMax+1)^(0+384),f
  5638                           
  5639                           ;lin.c: 950: }
  5640  0657  0008               	return
  5641  0658                     i1l8206:	
  5642                           
  5643                           ;lin.c: 953: else
  5644                           ;lin.c: 954: {
  5645                           ;lin.c: 957: _ELINMIntResetProtocol( 0x08 + 0x04 + 0x40 );
  5646  0658  304C               	movlw	76
  5647  0659  2E75               	ljmp	__ELINMIntResetProtocol
  5648  065A                     i1l8208:	
  5649                           
  5650                           ;lin.c: 966: else
  5651                           ;lin.c: 967: {
  5652                           ;lin.c: 972: if( _ELINMIntTFrameMin)
  5653  065A  0022               	movlb	2	; select bank2
  5654  065B  082D               	movf	__ELINMIntTFrameMin^(0+256),w
  5655  065C  042E               	iorwf	(__ELINMIntTFrameMin+1)^(0+256),w
  5656  065D  1903               	btfsc	3,2
  5657  065E  0008               	return
  5658                           
  5659                           ;lin.c: 975: {
  5660                           ;lin.c: 977: _ELINMIntResetProtocol( 0x08 + 0x04 + 0x30 );
  5661  065F  303C               	movlw	60
  5662  0660  2E75               	ljmp	__ELINMIntResetProtocol
  5663  0661                     i1l991:	
  5664                           
  5665                           ;lin.c: 990: else
  5666                           ;lin.c: 991: {
  5667                           ;lin.c: 993: if( _ELINMIntStatus1.ELINMINTSTS.WAKEUP_SENT == 0)
  5668  0661  0021               	movlb	1	; select bank1
  5669  0662  1AD0               	btfsc	__ELINMIntStatus1^(0+128),5
  5670  0663  0008               	return
  5671                           
  5672                           ;lin.c: 996: {
  5673                           ;lin.c: 998: if( _ELINMIntSleepTimeout)
  5674  0664  0023               	movlb	3	; select bank3
  5675  0665  0841               	movf	(__ELINMIntSleepTimeout+3)^(0+384),w
  5676  0666  0440               	iorwf	(__ELINMIntSleepTimeout+2)^(0+384),w
  5677  0667  043F               	iorwf	(__ELINMIntSleepTimeout+1)^(0+384),w
  5678  0668  043E               	iorwf	__ELINMIntSleepTimeout^(0+384),w
  5679  0669  1903               	skipnz
  5680  066A  2E72               	goto	i1l1006
  5681                           
  5682                           ;lin.c: 1001: {
  5683                           ;lin.c: 1003: _ELINMIntSleepTimeout--;
  5684  066B  3001               	movlw	1
  5685  066C  02BE               	subwf	__ELINMIntSleepTimeout^(0+384),f
  5686  066D  3000               	movlw	0
  5687  066E  3BBF               	subwfb	(__ELINMIntSleepTimeout+1)^(0+384),f
  5688  066F  3BC0               	subwfb	(__ELINMIntSleepTimeout+2)^(0+384),f
  5689  0670  3BC1               	subwfb	(__ELINMIntSleepTimeout+3)^(0+384),f
  5690                           
  5691                           ;lin.c: 1006: }
  5692  0671  0008               	return
  5693  0672                     i1l1006:	
  5694                           
  5695                           ;lin.c: 1009: else
  5696                           ;lin.c: 1010: {
  5697                           ;lin.c: 1012: _ELINMIntStatus1.ELINMINTSTS.SLEEP_TIMEOUT = 1;
  5698  0672  0021               	movlb	1	; select bank1
  5699  0673  1750               	bsf	__ELINMIntStatus1^(0+128),6
  5700  0674  0008               	return
  5701  0675                     __end_of_ELINMIntHandler:	
  5702  0675                     __ptext61:	
  5703 ;; *************** function __ELINMIntResetProtocol *****************
  5704 ;; Defined at:
  5705 ;;		line 524 in file "../lin.c"
  5706 ;; Parameters:    Size  Location     Type
  5707 ;;  code            1    wreg     unsigned char 
  5708 ;; Auto vars:     Size  Location     Type
  5709 ;;  code            1    0[COMMON] unsigned char 
  5710 ;; Return value:  Size  Location     Type
  5711 ;;                  1    wreg      void 
  5712 ;; Registers used:
  5713 ;;		wreg, status,2
  5714 ;; Tracked objects:
  5715 ;;		On entry : 1C/1
  5716 ;;		On exit  : 1F/3
  5717 ;;		Unchanged: 0/0
  5718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5719 ;;      Params:         0       0       0       0       0       0       0       0
  5720 ;;      Locals:         1       0       0       0       0       0       0       0
  5721 ;;      Temps:          0       0       0       0       0       0       0       0
  5722 ;;      Totals:         1       0       0       0       0       0       0       0
  5723 ;;Total ram usage:        1 bytes
  5724 ;; Hardware stack levels used:    1
  5725 ;; This function calls:
  5726 ;;		Nothing
  5727 ;; This function is called by:
  5728 ;;		_ELINMIntHandler
  5729 ;; This function uses a non-reentrant model
  5730 ;;
  5731                           
  5732                           
  5733                           ;psect for function __ELINMIntResetProtocol
  5734  0675                     __ELINMIntResetProtocol:	
  5735                           
  5736                           ;incstack = 0
  5737                           ; Regs used in __ELINMIntResetProtocol: [wreg+status,2]
  5738                           ;__ELINMIntResetProtocol@code stored from wreg
  5739  0675  00F0               	movwf	__ELINMIntResetProtocol@code
  5740                           
  5741                           ;lin.c: 529: _ELINMIntReadBack = RCREG;
  5742  0676  0023               	movlb	3	; select bank3
  5743  0677  0819               	movf	25,w	;volatile
  5744  0678  0021               	movlb	1	; select bank1
  5745  0679  00CE               	movwf	__ELINMIntReadBack^(0+128)
  5746                           
  5747                           ;lin.c: 530: _ELINMIntStatus1.ELINMIntStatusByte = 0;
  5748  067A  01D0               	clrf	__ELINMIntStatus1^(0+128)
  5749                           
  5750                           ;lin.c: 531: _ELINMIntRXCRC.CRC = 0;
  5751  067B  0023               	movlb	3	; select bank3
  5752  067C  01D0               	clrf	__ELINMIntRXCRC^(0+384)
  5753  067D  01D1               	clrf	(__ELINMIntRXCRC+1)^(0+384)
  5754                           
  5755                           ;lin.c: 532: _ELINMIntStatus.ELINMIntStatusByte = code;
  5756  067E  0870               	movf	__ELINMIntResetProtocol@code,w
  5757  067F  0020               	movlb	0	; select bank0
  5758  0680  00E0               	movwf	__ELINMIntStatus
  5759                           
  5760                           ;lin.c: 533: _ELINMIntSleepTimeout = ( ( 25000L * ( 100L * 1000000L / 19200L ) / 128L ) 
      +                          / 100L );
  5761  0681  0023               	movlb	3	; select bank3
  5762  0682  2684               	fcall	PL64	;call to abstracted procedure
  5763  0683  0008               	return
  5764  0684                     __end_of__ELINMIntResetProtocol:	
  5765  007E                     btemp	set	126	;btemp
  5766  007E                     int$flags	set	126
  5767  007E                     wtemp0	set	126
  5768  0684                     PL64:	
  5769  0684  3027               	movlw	39
  5770  0685  01C1               	clrf	(__ELINMIntSleepTimeout+3)^(0+384)
  5771  0686  01C0               	clrf	(__ELINMIntSleepTimeout+2)^(0+384)
  5772  0687  00BF               	movwf	(__ELINMIntSleepTimeout+1)^(0+384)
  5773  0688  30BB               	movlw	187
  5774  0689  00BE               	movwf	__ELINMIntSleepTimeout^(0+384)
  5775  068A  0008               	return
  5776  068B                     __end_ofPL64:	
  5777  068B                     PL106:	
  5778  068B  3E50               	addlw	(low (__ELINMIntMessageBuffer| (0+512)))& (0+255)
  5779  068C  0086               	movwf	6
  5780  068D  3002               	movlw	2	; select bank4/5
  5781  068E  0087               	movwf	7
  5782  068F  0801               	movf	1,w
  5783  0690  0008               	return
  5784  0691                     __end_ofPL106:	
  5785  0691                     __ptext50:	
  5786 ;; *************** function _interrupt_PWMCapture *****************
  5787 ;; Defined at:
  5788 ;;		line 438 in file "../pwm.c"
  5789 ;; Parameters:    Size  Location     Type
  5790 ;;		None
  5791 ;; Auto vars:     Size  Location     Type
  5792 ;;		None
  5793 ;; Return value:  Size  Location     Type
  5794 ;;                  1    wreg      void 
  5795 ;; Registers used:
  5796 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5797 ;; Tracked objects:
  5798 ;;		On entry : 1F/0
  5799 ;;		On exit  : 1B/2
  5800 ;;		Unchanged: 0/0
  5801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5802 ;;      Params:         0       0       0       0       0       0       0       0
  5803 ;;      Locals:         0       0       0       0       0       0       0       0
  5804 ;;      Temps:          0       0       0       0       0       0       0       0
  5805 ;;      Totals:         0       0       0       0       0       0       0       0
  5806 ;;Total ram usage:        0 bytes
  5807 ;; Hardware stack levels used:    1
  5808 ;; This function calls:
  5809 ;;		Nothing
  5810 ;; This function is called by:
  5811 ;;		_interrupt_handler
  5812 ;; This function uses a non-reentrant model
  5813 ;;
  5814                           
  5815                           
  5816                           ;psect for function _interrupt_PWMCapture
  5817  0691                     _interrupt_PWMCapture:	
  5818                           
  5819                           ;pwm.c: 450: switch( ui8_Pulse_State )
  5820                           
  5821                           ;incstack = 0
  5822                           ; Regs used in _interrupt_PWMCapture: [wreg-fsr0h+status,2+status,0]
  5823  0691  2ED3               	goto	i1l8232
  5824  0692                     i1l1387:	
  5825                           ;pwm.c: 452: {
  5826                           ;pwm.c: 454: case 0:
  5827                           
  5828                           
  5829                           ;pwm.c: 456: {
  5830                           ;pwm.c: 460: ui8_Pulse_State = 1;
  5831                           
  5832                           ;pwm.c: 461: ui16_Capt_Val0.b.lo = CCPR5L;
  5833  0692  26E0  3180         	fcall	PL102	;call to abstracted procedure
  5834  0694  00AC               	movwf	_ui16_Capt_Val0^(0+128)	;volatile
  5835                           
  5836                           ;pwm.c: 462: ui16_Capt_Val0.b.hi = CCPR5H;
  5837  0695  0026               	movlb	6	; select bank6
  5838  0696  081D               	movf	29,w	;volatile
  5839  0697  0021               	movlb	1	; select bank1
  5840  0698  00AD               	movwf	(_ui16_Capt_Val0^(0+128)+1)	;volatile
  5841                           
  5842                           ;pwm.c: 463: CCP5CON = 0x04;
  5843                           
  5844                           ;pwm.c: 464: break;
  5845  0699  2EEA               	ljmp	PL138	;call to abstracted procedure
  5846  069A                     i1l8220:	
  5847                           
  5848                           ;pwm.c: 472: {
  5849                           ;pwm.c: 476: ui8_Pulse_State = 2;
  5850  069A  3002               	movlw	2
  5851  069B  00D4               	movwf	_ui8_Pulse_State^(0+256)
  5852                           
  5853                           ;pwm.c: 477: ui16_Capt_Val1.b.lo = CCPR5L;
  5854  069C  0026               	movlb	6	; select bank6
  5855  069D  081C               	movf	28,w	;volatile
  5856  069E  0021               	movlb	1	; select bank1
  5857  069F  00AA               	movwf	_ui16_Capt_Val1^(0+128)	;volatile
  5858                           
  5859                           ;pwm.c: 478: ui16_Capt_Val1.b.hi = CCPR5H;
  5860  06A0  0026               	movlb	6	; select bank6
  5861  06A1  081D               	movf	29,w	;volatile
  5862  06A2  0021               	movlb	1	; select bank1
  5863  06A3  00AB               	movwf	(_ui16_Capt_Val1^(0+128)+1)	;volatile
  5864                           
  5865                           ;pwm.c: 479: CCP5CON = 0x05;
  5866                           
  5867                           ;pwm.c: 480: break;
  5868  06A4  2EE6               	ljmp	PL132	;call to abstracted procedure
  5869  06A5                     i1l1390:	
  5870                           ;pwm.c: 483: }
  5871                           ;pwm.c: 486: case 2:
  5872                           
  5873                           
  5874                           ;pwm.c: 488: {
  5875                           ;pwm.c: 492: ui8_Pulse_State = 1;
  5876                           
  5877                           ;pwm.c: 493: ui16_Capt_Val2.b.lo = CCPR5L;
  5878  06A5  26E0  3180         	fcall	PL102	;call to abstracted procedure
  5879  06A7  00A8               	movwf	_ui16_Capt_Val2^(0+128)	;volatile
  5880                           
  5881                           ;pwm.c: 494: ui16_Capt_Val2.b.hi = CCPR5H;
  5882  06A8  0026               	movlb	6	; select bank6
  5883  06A9  081D               	movf	29,w	;volatile
  5884  06AA  0021               	movlb	1	; select bank1
  5885  06AB  00A9               	movwf	(_ui16_Capt_Val2^(0+128)+1)	;volatile
  5886                           
  5887                           ;pwm.c: 495: ui16_PWM_Freq_In = ui16_Capt_Val2.w - ui16_Capt_Val0.w;
  5888  06AC  0829               	movf	(_ui16_Capt_Val2+1)^(0+128),w	;volatile
  5889  06AD  0022               	movlb	2	; select bank2
  5890  06AE  00A8               	movwf	(_ui16_PWM_Freq_In+1)^(0+256)
  5891  06AF  0021               	movlb	1	; select bank1
  5892  06B0  0828               	movf	_ui16_Capt_Val2^(0+128),w	;volatile
  5893  06B1  0022               	movlb	2	; select bank2
  5894  06B2  00A7               	movwf	_ui16_PWM_Freq_In^(0+256)
  5895  06B3  0021               	movlb	1	; select bank1
  5896  06B4  082C               	movf	_ui16_Capt_Val0^(0+128),w	;volatile
  5897  06B5  0022               	movlb	2	; select bank2
  5898  06B6  02A7               	subwf	_ui16_PWM_Freq_In^(0+256),f
  5899  06B7  0021               	movlb	1	; select bank1
  5900  06B8  082D               	movf	(_ui16_Capt_Val0+1)^(0+128),w	;volatile
  5901  06B9  0022               	movlb	2	; select bank2
  5902  06BA  3BA8               	subwfb	(_ui16_PWM_Freq_In+1)^(0+256),f
  5903                           
  5904                           ;pwm.c: 496: ui16_Duty_Cycle_In = ui16_Capt_Val1.w - ui16_Capt_Val0.w;
  5905  06BB  0021               	movlb	1	; select bank1
  5906  06BC  082B               	movf	(_ui16_Capt_Val1+1)^(0+128),w	;volatile
  5907  06BD  0022               	movlb	2	; select bank2
  5908  06BE  00E1               	movwf	(_ui16_Duty_Cycle_In+1)^(0+256)
  5909  06BF  0021               	movlb	1	; select bank1
  5910  06C0  082A               	movf	_ui16_Capt_Val1^(0+128),w	;volatile
  5911  06C1  0022               	movlb	2	; select bank2
  5912  06C2  00E0               	movwf	_ui16_Duty_Cycle_In^(0+256)
  5913  06C3  0021               	movlb	1	; select bank1
  5914  06C4  082C               	movf	_ui16_Capt_Val0^(0+128),w	;volatile
  5915  06C5  0022               	movlb	2	; select bank2
  5916  06C6  02E0               	subwf	_ui16_Duty_Cycle_In^(0+256),f
  5917  06C7  0021               	movlb	1	; select bank1
  5918  06C8  082D               	movf	(_ui16_Capt_Val0+1)^(0+128),w	;volatile
  5919  06C9  0022               	movlb	2	; select bank2
  5920  06CA  3BE1               	subwfb	(_ui16_Duty_Cycle_In+1)^(0+256),f
  5921                           
  5922                           ;pwm.c: 497: ui16_Capt_Val0.w = ui16_Capt_Val2.w;
  5923  06CB  0021               	movlb	1	; select bank1
  5924  06CC  0829               	movf	(_ui16_Capt_Val2+1)^(0+128),w	;volatile
  5925  06CD  00AD               	movwf	(_ui16_Capt_Val0+1)^(0+128)	;volatile
  5926  06CE  0828               	movf	_ui16_Capt_Val2^(0+128),w	;volatile
  5927  06CF  00AC               	movwf	_ui16_Capt_Val0^(0+128)	;volatile
  5928                           
  5929                           ;pwm.c: 498: CCP5CON = 0x04;
  5930  06D0  2EEA               	ljmp	PL138	;call to abstracted procedure
  5931  06D1                     i1l8228:	
  5932                           
  5933                           ;pwm.c: 526: {
  5934                           ;pwm.c: 530: ui8_Pulse_State = 0;
  5935  06D1  01D4               	clrf	_ui8_Pulse_State^(0+256)
  5936                           
  5937                           ;pwm.c: 531: break;
  5938  06D2  0008               	return
  5939  06D3                     i1l8232:	
  5940  06D3  0022               	movlb	2	; select bank2
  5941  06D4  0854               	movf	_ui8_Pulse_State^(0+256),w
  5942                           
  5943                           ; Switch size 1, requested type "space"
  5944                           ; Number of cases is 3, Range of values is 0 to 2
  5945                           ; switch strategies available:
  5946                           ; Name         Instructions Cycles
  5947                           ; simple_byte           10     6 (average)
  5948                           ; direct_byte           12     6 (fixed)
  5949                           ; jumptable            260     6 (fixed)
  5950                           ;	Chosen strategy is simple_byte
  5951  06D5  3A00               	xorlw	0	; case 0
  5952  06D6  1903               	skipnz
  5953  06D7  2E92               	goto	i1l1387
  5954  06D8  3A01               	xorlw	1	; case 1
  5955  06D9  1903               	skipnz
  5956  06DA  2E9A               	goto	i1l8220
  5957  06DB  3A03               	xorlw	3	; case 2
  5958  06DC  1903               	skipnz
  5959  06DD  2EA5               	goto	i1l1390
  5960  06DE  2ED1               	goto	i1l8228
  5961  06DF  0008               	return
  5962  06E0                     __end_of_interrupt_PWMCapture:	
  5963  06E0                     PL102:	
  5964  06E0  01D4               	clrf	_ui8_Pulse_State^(0+256)
  5965  06E1  0AD4               	incf	_ui8_Pulse_State^(0+256),f
  5966  06E2  0026               	movlb	6	; select bank6
  5967  06E3  081C               	movf	28,w	;volatile
  5968  06E4  0021               	movlb	1	; select bank1
  5969  06E5  0008               	return
  5970  06E6                     __end_ofPL102:	
  5971  06E6                     PL132:	
  5972  06E6  3005               	movlw	5
  5973  06E7  0026               	movlb	6	; select bank6
  5974  06E8  009E               	movwf	30	;volatile
  5975  06E9  0008               	return
  5976  06EA                     __end_ofPL132:	
  5977  06EA                     PL138:	
  5978  06EA  3004               	movlw	4
  5979  06EB  0026               	movlb	6	; select bank6
  5980  06EC  009E               	movwf	30	;volatile
  5981  06ED  0008               	return
  5982  06EE                     __end_ofPL138:	
  5983  06EE                     __ptext22:	
  5984 ;; *************** function _FILTER_Temp *****************
  5985 ;; Defined at:
  5986 ;;		line 400 in file "../adc.c"
  5987 ;; Parameters:    Size  Location     Type
  5988 ;;		None
  5989 ;; Auto vars:     Size  Location     Type
  5990 ;;		None
  5991 ;; Return value:  Size  Location     Type
  5992 ;;                  1    wreg      void 
  5993 ;; Registers used:
  5994 ;;		wreg, status,2, status,0
  5995 ;; Tracked objects:
  5996 ;;		On entry : 1F/3
  5997 ;;		On exit  : 1F/3
  5998 ;;		Unchanged: 0/0
  5999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6000 ;;      Params:         0       0       0       0       0       0       0       0
  6001 ;;      Locals:         0       0       0       0       0       0       0       0
  6002 ;;      Temps:          0       2       0       0       0       0       0       0
  6003 ;;      Totals:         0       2       0       0       0       0       0       0
  6004 ;;Total ram usage:        2 bytes
  6005 ;; Hardware stack levels used:    1
  6006 ;; Hardware stack levels required when called:    3
  6007 ;; This function calls:
  6008 ;;		Nothing
  6009 ;; This function is called by:
  6010 ;;		_Get_Analog_Value
  6011 ;; This function uses a non-reentrant model
  6012 ;;
  6013                           
  6014                           
  6015                           ;psect for function _FILTER_Temp
  6016  06EE                     _FILTER_Temp:	
  6017  06EE                     l6392:	
  6018                           ;incstack = 0
  6019                           ; Regs used in _FILTER_Temp: [wreg+status,2+status,0]
  6020                           
  6021                           
  6022                           ;adc.c: 407: filterTempNTC = filterTempNTC + ui16_NTC_Temp_bldc;
  6023  06EE  0864               	movf	_ui16_NTC_Temp_bldc^(0+384),w
  6024  06EF  07DC               	addwf	_filterTempNTC^(0+384),f
  6025  06F0  0865               	movf	(_ui16_NTC_Temp_bldc+1)^(0+384),w
  6026  06F1  3DDD               	addwfc	(_filterTempNTC+1)^(0+384),f
  6027                           
  6028                           ;adc.c: 408: ui16_NTC_Temp_bldc_mean = filterTempNTC>>6;
  6029  06F2  085D               	movf	(_filterTempNTC+1)^(0+384),w
  6030  06F3  0020               	movlb	0	; select bank0
  6031  06F4  00A5               	movwf	??_FILTER_Temp+1
  6032  06F5  0023               	movlb	3	; select bank3
  6033  06F6  085C               	movf	_filterTempNTC^(0+384),w
  6034  06F7  0020               	movlb	0	; select bank0
  6035  06F8  00A4               	movwf	??_FILTER_Temp
  6036  06F9  3006               	movlw	6
  6037  06FA                     u3595:	
  6038  06FA  36A5               	lsrf	??_FILTER_Temp+1,f
  6039  06FB  0CA4               	rrf	??_FILTER_Temp,f
  6040  06FC  0B89               	decfsz	9,f
  6041  06FD  2EFA               	goto	u3595
  6042  06FE  0824               	movf	??_FILTER_Temp,w
  6043  06FF  0022               	movlb	2	; select bank2
  6044  0700  00B5               	movwf	_ui16_NTC_Temp_bldc_mean^(0+256)
  6045  0701  0020               	movlb	0	; select bank0
  6046  0702  0825               	movf	??_FILTER_Temp+1,w
  6047  0703  0022               	movlb	2	; select bank2
  6048  0704  00B6               	movwf	(_ui16_NTC_Temp_bldc_mean+1)^(0+256)
  6049                           
  6050                           ;adc.c: 409: filterTempNTC = filterTempNTC - ui16_NTC_Temp_bldc_mean;
  6051  0705  0835               	movf	_ui16_NTC_Temp_bldc_mean^(0+256),w
  6052  0706  0023               	movlb	3	; select bank3
  6053  0707  02DC               	subwf	_filterTempNTC^(0+384),f
  6054  0708  0022               	movlb	2	; select bank2
  6055  0709  0836               	movf	(_ui16_NTC_Temp_bldc_mean+1)^(0+256),w
  6056  070A  0023               	movlb	3	; select bank3
  6057  070B  3BDD               	subwfb	(_filterTempNTC+1)^(0+384),f
  6058                           
  6059                           ;adc.c: 426: ui16_NTC_Temp_bldc_mean_cal = ui16_NTC_Temp_bldc_mean + ui16_Temp_cal;
  6060  070C  0862               	movf	_ui16_Temp_cal^(0+384),w
  6061  070D  0022               	movlb	2	; select bank2
  6062  070E  0735               	addwf	_ui16_NTC_Temp_bldc_mean^(0+256),w
  6063  070F  0023               	movlb	3	; select bank3
  6064  0710  00DA               	movwf	_ui16_NTC_Temp_bldc_mean_cal^(0+384)
  6065  0711  0863               	movf	(_ui16_Temp_cal+1)^(0+384),w
  6066  0712  0022               	movlb	2	; select bank2
  6067  0713  3D36               	addwfc	(_ui16_NTC_Temp_bldc_mean+1)^(0+256),w
  6068  0714  0023               	movlb	3	; select bank3
  6069  0715  00DB               	movwf	(_ui16_NTC_Temp_bldc_mean_cal+1)^(0+384)
  6070  0716  0008               	return
  6071  0717                     __end_of_FILTER_Temp:	
  6072                           
  6073                           	psect	bitbssBANK0
  6074  0340                     __pbitbssBANK0:	
  6075  0340                     _rising_bemf_flag:	
  6076  0340                     	ds	1
  6077                           
  6078                           	psect	bssBANK0
  6079  0054                     __pbssBANK0:	
  6080  0054                     BVH2_Appl_Layer@Cb24_StateCnt:	
  6081  0054                     	ds	2
  6082  0056                     _ui16_Speed_mat:	
  6083  0056                     	ds	2
  6084  0058                     _ui16_IPhase_bldc:	
  6085  0058                     	ds	2
  6086  005A                     _comm_time:	
  6087  005A                     	ds	2
  6088  005C                     BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b:	
  6089  005C                     	ds	1
  6090  005D                     _Cb34_idPWM:	
  6091  005D                     	ds	1
  6092  005E                     _ui8_PWM_dc_mat:	
  6093  005E                     	ds	1
  6094  005F                     _pt:	
  6095  005F                     	ds	1
  6096  0060                     __ELINMIntStatus:	
  6097  0060                     	ds	1
  6098  0061                     _ui8_b_DResB0_c:	
  6099  0061                     	ds	1
  6100  0062                     _ui8_b_DResLocID_c:	
  6101  0062                     	ds	1
  6102  0063                     _MotorFlags:	
  6103  0063                     	ds	1
  6104  0064                     _ui8_duty_cycle_BLDC:	
  6105  0064                     	ds	1
  6106  0065                     _ui8_error_Flags:	
  6107  0065                     	ds	1
  6108  0066                     _ui16_Ubat_bldc:	
  6109  0066                     	ds	2
  6110                           
  6111                           	psect	dataBANK0
  6112  0069                     __pdataBANK0:	
  6113  0069                     _ui8_selected_lid:	
  6114  0069                     	ds	1
  6115                           
  6116                           	psect	bssBANK1
  6117  00A0                     __pbssBANK1:	
  6118  00A0                     BVH2_Appl_Layer@SIBFS_Motor_Stalled_b:	
  6119  00A0                     	ds	2
  6120  00A2                     BVH2_Appl_Layer@Cb19_Counter:	
  6121  00A2                     	ds	2
  6122  00A4                     _Cb44_StateCnt:	
  6123  00A4                     	ds	2
  6124  00A6                     _Cb1_StateCnt:	
  6125  00A6                     	ds	2
  6126  00A8                     _ui16_Capt_Val2:	
  6127  00A8                     	ds	2
  6128  00AA                     _ui16_Capt_Val1:	
  6129  00AA                     	ds	2
  6130  00AC                     _ui16_Capt_Val0:	
  6131  00AC                     	ds	2
  6132  00AE                     _ui16_mat_Current:	
  6133  00AE                     	ds	2
  6134  00B0                     _ui8_BattVolt_mat:	
  6135  00B0                     	ds	2
  6136  00B2                     _ui16_speed_fil:	
  6137  00B2                     	ds	2
  6138  00B4                     _ui16_Ubemf_bldc:	
  6139  00B4                     	ds	2
  6140  00B6                     _ui16_phase_advancement:	
  6141  00B6                     	ds	2
  6142  00B8                     _ui16_step_cnt:	
  6143  00B8                     	ds	2
  6144  00BA                     _analog_value:	
  6145  00BA                     	ds	2
  6146  00BC                     BVH2_Appl_Layer@Cb14_oDryRunAlarm:	
  6147  00BC                     	ds	1
  6148  00BD                     BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b:	
  6149  00BD                     	ds	1
  6150  00BE                     BVH2_Appl_Layer@SIBFS_Dry_Running_b:	
  6151  00BE                     	ds	1
  6152  00BF                     BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b:	
  6153  00BF                     	ds	1
  6154  00C0                     BVH2_Appl_Layer@Cb9_StateCnt:	
  6155  00C0                     	ds	1
  6156  00C1                     _Cb56_odFixedValueSel:	
  6157  00C1                     	ds	1
  6158  00C2                     _SIBFS_UbatHandling_b:	
  6159  00C2                     	ds	1
  6160  00C3                     _SIBFS_Pic_etat_monitor_b:	
  6161  00C3                     	ds	1
  6162  00C4                     _SIBFS_PWM_Detection_b:	
  6163  00C4                     	ds	1
  6164  00C5                     _SIBFS_Current_Analysis_High_b:	
  6165  00C5                     	ds	1
  6166  00C6                     _ui8_PWMinDC_sav:	
  6167  00C6                     	ds	1
  6168  00C7                     _ui8_PWM_FreqCnt:	
  6169  00C7                     	ds	1
  6170  00C8                     _ui8_Task_Cont100ms:	
  6171  00C8                     	ds	1
  6172  00C9                     _bool_ControlLoopMode:	
  6173  00C9                     	ds	1
  6174  00CA                     _bool_mat_currAlarm_bldc:	
  6175  00CA                     	ds	1
  6176  00CB                     _ui8_duty_cycle_mat:	
  6177  00CB                     	ds	1
  6178  00CC                     _ErrorCode:	
  6179  00CC                     	ds	1
  6180  00CD                     __ELINMIntMessageBufferPointer:	
  6181  00CD                     	ds	1
  6182  00CE                     __ELINMIntReadBack:	
  6183  00CE                     	ds	1
  6184  00CF                     __ELINMIntMessageSize:	
  6185  00CF                     	ds	1
  6186  00D0                     __ELINMIntStatus1:	
  6187  00D0                     	ds	1
  6188  00D1                     _ui8_Task_Cont1ms:	
  6189  00D1                     	ds	1
  6190  00D2                     _ui8_given_supply:	
  6191  00D2                     	ds	1
  6192  00D3                     _phaseCal:	
  6193  00D3                     	ds	1
  6194  00D4                     _ui8_b_DResB4_c:	
  6195  00D4                     	ds	1
  6196  00D5                     _ui8_b_DResB3_c:	
  6197  00D5                     	ds	1
  6198  00D6                     _ui8_b_DResB2_c:	
  6199  00D6                     	ds	1
  6200  00D7                     _ui8_b_DResB1_c:	
  6201  00D7                     	ds	1
  6202  00D8                     _ui8_b_DResServID_c:	
  6203  00D8                     	ds	1
  6204  00D9                     _bool_HighCurrentAlarm:	
  6205  00D9                     	ds	1
  6206  00DA                     _bool_MotorStalled:	
  6207  00DA                     	ds	1
  6208  00DB                     _bool_DryRunningAlarm:	
  6209  00DB                     	ds	1
  6210  00DC                     _bool_CPU_TempAlarm:	
  6211  00DC                     	ds	1
  6212  00DD                     _Bcnt:	
  6213  00DD                     	ds	1
  6214  00DE                     _ui8_CompFlag:	
  6215  00DE                     	ds	1
  6216  00DF                     _ui8_sampleState:	
  6217  00DF                     	ds	1
  6218  00E0                     _ui8_Ubemf_sel:	
  6219  00E0                     	ds	1
  6220  00E1                     _ui8_UPhase_sel:	
  6221  00E1                     	ds	1
  6222  00E2                     _ui8_IPhase_sel:	
  6223  00E2                     	ds	1
  6224  00E3                     _ui8_BlankingCount:	
  6225  00E3                     	ds	1
  6226  00E4                     _comm_state:	
  6227  00E4                     	ds	1
  6228  00E5                     _ui8_StartupPWM:	
  6229  00E5                     	ds	1
  6230  00E6                     _bool_start_demand_mat:	
  6231  00E6                     	ds	1
  6232  00E7                     _windowPtr1:	
  6233  00E7                     	ds	1
  6234                           
  6235                           	psect	dataBANK1
  6236  00E8                     __pdataBANK1:	
  6237  00E8                     _ui16_I_cal_Ph3:	
  6238  00E8                     	ds	2
  6239  00EA                     _ui16_I_cal_Ph2:	
  6240  00EA                     	ds	2
  6241  00EC                     _ui16_I_cal_Ph1:	
  6242  00EC                     	ds	2
  6243  00EE                     _wkpoint:	
  6244  00EE                     	ds	1
  6245                           
  6246                           	psect	bssBANK2
  6247  0120                     __pbssBANK2:	
  6248  0120                     _ui8_current_cal:	
  6249  0120                     	ds	3
  6250  0123                     BVH2_Appl_Layer@Cb14_StateCnt:	
  6251  0123                     	ds	2
  6252  0125                     _ui16_mat_inpTemp:	
  6253  0125                     	ds	2
  6254  0127                     _ui16_PWM_Freq_In:	
  6255  0127                     	ds	2
  6256  0129                     _ui16_PWM_Freq_mat:	
  6257  0129                     	ds	2
  6258  012B                     __ELINMIntTHeaderMin:	
  6259  012B                     	ds	2
  6260  012D                     __ELINMIntTFrameMin:	
  6261  012D                     	ds	2
  6262  012F                     _sum:	
  6263  012F                     	ds	2
  6264  0131                     _ui16_comm_time_max:	
  6265  0131                     	ds	2
  6266  0133                     _ui16_speed_rar:	
  6267  0133                     	ds	2
  6268  0135                     _ui16_NTC_Temp_bldc_mean:	
  6269  0135                     	ds	2
  6270  0137                     _ui16_fir_IPhase_mean:	
  6271  0137                     	ds	2
  6272  0139                     _ui16_fir_Bat_mittel:	
  6273  0139                     	ds	2
  6274  013B                     _ui16_IPhase1_bldc:	
  6275  013B                     	ds	2
  6276  013D                     BVH2_Appl_Layer@Cb9_oCurrentAlarm:	
  6277  013D                     	ds	1
  6278  013E                     BVH2_Appl_Layer@Cb51_odPumpOff:	
  6279  013E                     	ds	1
  6280  013F                     BVH2_Appl_Layer@Cb51_oTempRedAlarm:	
  6281  013F                     	ds	1
  6282  0140                     BVH2_Appl_Layer@Cb51_oTempAlarm:	
  6283  0140                     	ds	1
  6284  0141                     BVH2_Appl_Layer@Cb24_oStalledAlarm:	
  6285  0141                     	ds	1
  6286  0142                     BVH2_Appl_Layer@Cb24_oMotorStalled:	
  6287  0142                     	ds	1
  6288  0143                     BVH2_Appl_Layer@Cb19_oDryRun66:	
  6289  0143                     	ds	1
  6290  0144                     BVH2_Appl_Layer@Cb19_oDryRun55:	
  6291  0144                     	ds	1
  6292  0145                     BVH2_Appl_Layer@Cb51_Counter:	
  6293  0145                     	ds	1
  6294  0146                     BVH2_Appl_Layer@Cb24_RestartCounter:	
  6295  0146                     	ds	1
  6296  0147                     _Cb56_odPumpOff:	
  6297  0147                     	ds	1
  6298  0148                     _Cb56_oUbat_Alarm_High:	
  6299  0148                     	ds	1
  6300  0149                     _Cb44_oShutoff:	
  6301  0149                     	ds	1
  6302  014A                     _Cb34_odPumpOff:	
  6303  014A                     	ds	1
  6304  014B                     _Cb34_odFixedValueSel:	
  6305  014B                     	ds	1
  6306  014C                     _Cb34_odFixedLowValueSel:	
  6307  014C                     	ds	1
  6308  014D                     _Cb34_oPWM_SC_Alarm:	
  6309  014D                     	ds	1
  6310  014E                     _Cb34_oPWM_Alarm:	
  6311  014E                     	ds	1
  6312  014F                     _Cb1_oShutoff:	
  6313  014F                     	ds	1
  6314  0150                     _Cb1_oCurrentAlarm:	
  6315  0150                     	ds	1
  6316  0151                     _Cb1_RestartCounter:	
  6317  0151                     	ds	1
  6318  0152                     _ui8_PWMin_failCnt:	
  6319  0152                     	ds	1
  6320  0153                     _ui8_Duty_Cycle_In_Ratio:	
  6321  0153                     	ds	1
  6322  0154                     _ui8_Pulse_State:	
  6323  0154                     	ds	1
  6324  0155                     _ui8_PWMoutvalue:	
  6325  0155                     	ds	1
  6326  0156                     _ui8_lastTaskvalue:	
  6327  0156                     	ds	1
  6328  0157                     _ui8_Task_Cont5ms:	
  6329  0157                     	ds	1
  6330  0158                     _ui8_Task_Cont3ms:	
  6331  0158                     	ds	1
  6332  0159                     _bool_PWMin_Freq_err_Alarm:	
  6333  0159                     	ds	1
  6334  015A                     _bool_UbatAlarm:	
  6335  015A                     	ds	1
  6336  015B                     _bool_CPU_TempRedAlarm:	
  6337  015B                     	ds	1
  6338  015C                     _bool_PWMin_err_Alarm:	
  6339  015C                     	ds	1
  6340  015D                     _ui8_Kp_mat:	
  6341  015D                     	ds	1
  6342  015E                     __ELINMIntSpace:	
  6343  015E                     	ds	1
  6344  015F                     __ELINMIntRXMessageSize:	
  6345  015F                     	ds	1
  6346  0160                     _ui16_Duty_Cycle_In:	
  6347  0160                     	ds	2
  6348  0162                     _ui16_IPhase3_bldc_cal:	
  6349  0162                     	ds	2
  6350  0164                     _ui16_IPhase2_bldc_cal:	
  6351  0164                     	ds	2
  6352  0166                     _ui16_IPhase1_bldc_cal:	
  6353  0166                     	ds	2
  6354                           
  6355                           	psect	dataBANK2
  6356  0168                     __pdataBANK2:	
  6357  0168                     BVH2_Appl_Layer@X_Sb4_Intergrator:	
  6358  0168                     	ds	4
  6359  016C                     BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn:	
  6360  016C                     	ds	1
  6361  016D                     BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun:	
  6362  016D                     	ds	1
  6363  016E                     _ui8_failure:	
  6364  016E                     	ds	1
  6365  016F                     _ict_stamp:	
  6366  016F                     	ds	1
  6367                           
  6368                           	psect	bssBANK3
  6369  01A0                     __pbssBANK3:	
  6370  01A0                     _B:	
  6371  01A0                     	ds	16
  6372  01B0                     _my_msg:	
  6373  01B0                     	ds	8
  6374  01B8                     _checksum:	
  6375  01B8                     	ds	6
  6376  01BE                     __ELINMIntSleepTimeout:	
  6377  01BE                     	ds	4
  6378  01C2                     BVH2_Appl_Layer@Cb24_BadCnt:	
  6379  01C2                     	ds	2
  6380  01C4                     _ui16_Speed_demand_mat_min:	
  6381  01C4                     	ds	2
  6382  01C6                     _ui16_Speed_demand_mat_Max:	
  6383  01C6                     	ds	2
  6384  01C8                     _ui16_Speed_demand_mat:	
  6385  01C8                     	ds	2
  6386  01CA                     _ui8_Ki_mat:	
  6387  01CA                     	ds	2
  6388  01CC                     __ELINMIntTHeaderMax:	
  6389  01CC                     	ds	2
  6390  01CE                     __ELINMIntTFrameMax:	
  6391  01CE                     	ds	2
  6392  01D0                     __ELINMIntRXCRC:	
  6393  01D0                     	ds	2
  6394  01D2                     _ui16_IPhase3_bldc:	
  6395  01D2                     	ds	2
  6396  01D4                     _ui16_IPhase2_bldc:	
  6397  01D4                     	ds	2
  6398  01D6                     _phase_delay_counter:	
  6399  01D6                     	ds	2
  6400  01D8                     _ui8_fixed_start_speed_mat:	
  6401  01D8                     	ds	2
  6402  01DA                     _ui16_NTC_Temp_bldc_mean_cal:	
  6403  01DA                     	ds	2
  6404  01DC                     _filterTempNTC:	
  6405  01DC                     	ds	2
  6406  01DE                     _filter3:	
  6407  01DE                     	ds	2
  6408  01E0                     _filter1:	
  6409  01E0                     	ds	2
  6410  01E2                     _ui16_Temp_cal:	
  6411  01E2                     	ds	2
  6412  01E4                     _ui16_NTC_Temp_bldc:	
  6413  01E4                     	ds	2
  6414                           
  6415                           	psect	bssBANK4
  6416  0240                     __pbssBANK4:	
  6417  0240                     _inputArray1:	
  6418  0240                     	ds	16
  6419  0250                     __ELINMIntMessageBuffer:	
  6420  0250                     	ds	11
  6421                           
  6422                           	psect	clrtext
  6423  0776                     clear_ram0:	
  6424                           ;	Called with FSR0 containing the base address, and
  6425                           ;	WREG with the size to clear
  6426                           
  6427  0776  0064               	clrwdt	;clear the watchdog before getting into this loop
  6428  0777                     clrloop0:	
  6429  0777  0180               	clrf	0	;clear RAM location pointed to by FSR
  6430  0778  3101               	addfsr 0,1
  6431  0779  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  6432  077A  2F77               	goto	clrloop0	;have we reached the end yet?
  6433  077B  3400               	retlw	0	;all done for this memory range, return
  6434                           
  6435                           	psect	cstackBANK4
  6436  0220                     __pcstackBANK4:	
  6437  0220                     _BVH2_Appl_Layer$1219:	
  6438                           
  6439                           ; 4 bytes @ 0x0
  6440  0220                     	ds	4
  6441  0224                     _BVH2_Appl_Layer$1216:	
  6442                           
  6443                           ; 2 bytes @ 0x4
  6444  0224                     	ds	2
  6445  0226                     _BVH2_Appl_Layer$1218:	
  6446                           
  6447                           ; 2 bytes @ 0x6
  6448  0226                     	ds	2
  6449  0228                     BVH2_Appl_Layer@Sb1_Logical_Operator2:	
  6450                           
  6451                           ; 1 bytes @ 0x8
  6452  0228                     	ds	1
  6453  0229                     _BVH2_Appl_Layer$1208:	
  6454                           
  6455                           ; 1 bytes @ 0x9
  6456  0229                     	ds	1
  6457  022A                     _BVH2_Appl_Layer$1209:	
  6458                           
  6459                           ; 1 bytes @ 0xA
  6460  022A                     	ds	1
  6461  022B                     _BVH2_Appl_Layer$1210:	
  6462                           
  6463                           ; 1 bytes @ 0xB
  6464  022B                     	ds	1
  6465  022C                     _BVH2_Appl_Layer$1211:	
  6466                           
  6467                           ; 1 bytes @ 0xC
  6468  022C                     	ds	1
  6469  022D                     _BVH2_Appl_Layer$1212:	
  6470                           
  6471                           ; 1 bytes @ 0xD
  6472  022D                     	ds	1
  6473  022E                     _BVH2_Appl_Layer$1213:	
  6474                           
  6475                           ; 1 bytes @ 0xE
  6476  022E                     	ds	1
  6477  022F                     BVH2_Appl_Layer@Sb3_Product1:	
  6478                           
  6479                           ; 2 bytes @ 0xF
  6480  022F                     	ds	2
  6481  0231                     BVH2_Appl_Layer@Sb2_Switch5:	
  6482                           
  6483                           ; 2 bytes @ 0x11
  6484  0231                     	ds	2
  6485  0233                     BVH2_Appl_Layer@Cb24_Reset:	
  6486                           
  6487                           ; 1 bytes @ 0x13
  6488  0233                     	ds	1
  6489  0234                     BVH2_Appl_Layer@Sb1_Logical_Operator3:	
  6490                           
  6491                           ; 1 bytes @ 0x14
  6492  0234                     	ds	1
  6493  0235                     BVH2_Appl_Layer@Sb1_Logical_Operator5:	
  6494                           
  6495                           ; 1 bytes @ 0x15
  6496  0235                     	ds	1
  6497  0236                     BVH2_Appl_Layer@Sb2_Logical_Operator2:	
  6498                           
  6499                           ; 1 bytes @ 0x16
  6500  0236                     	ds	1
  6501  0237                     BVH2_Appl_Layer@Sb2_Error:	
  6502                           
  6503                           ; 2 bytes @ 0x17
  6504  0237                     	ds	2
  6505  0239                     BVH2_Appl_Layer@Sb2_Switch2:	
  6506                           
  6507                           ; 2 bytes @ 0x19
  6508  0239                     	ds	2
  6509  023B                     BVH2_Appl_Layer@Sb1_Logical_Operator1:	
  6510                           
  6511                           ; 1 bytes @ 0x1B
  6512  023B                     	ds	1
  6513  023C                     BVH2_Appl_Layer@Sb3_Sum1:	
  6514                           
  6515                           ; 2 bytes @ 0x1C
  6516  023C                     	ds	2
  6517  023E                     BVH2_Appl_Layer@Sb4_PI_sum:	
  6518                           
  6519                           ; 2 bytes @ 0x1E
  6520  023E                     	ds	2
  6521                           
  6522                           	psect	cstackBANK3
  6523  01EA                     __pcstackBANK3:	
  6524  01EA                     ??_main:	
  6525                           
  6526                           ; 1 bytes @ 0x0
  6527  01EA                     	ds	4
  6528                           
  6529                           	psect	cstackCOMMON
  6530  0070                     __pcstackCOMMON:	
  6531  0070                     ?_InitMotorRun:	
  6532  0070                     ?_commutate:	
  6533                           ; 1 bytes @ 0x0
  6534                           
  6535  0070                     ?_PWM_Write_Out:	
  6536                           ; 1 bytes @ 0x0
  6537                           
  6538  0070                     ?_read_eeprom_data:	
  6539                           ; 1 bytes @ 0x0
  6540                           
  6541  0070                     ?_NegativeAnswer:	
  6542                           ; 1 bytes @ 0x0
  6543                           
  6544  0070                     ?_PWMReadDC:	
  6545                           ; 1 bytes @ 0x0
  6546                           
  6547  0070                     ?_PWM_CTRL:	
  6548                           ; 1 bytes @ 0x0
  6549                           
  6550  0070                     ??_PWM_CTRL:	
  6551                           ; 1 bytes @ 0x0
  6552                           
  6553  0070                     ?_ELINMIntHandler:	
  6554                           ; 1 bytes @ 0x0
  6555                           
  6556  0070                     ?_interrupt_PWMCapture:	
  6557                           ; 1 bytes @ 0x0
  6558                           
  6559  0070                     ??_interrupt_PWMCapture:	
  6560                           ; 1 bytes @ 0x0
  6561                           
  6562  0070                     ?_Oscill_Source_Block:	
  6563                           ; 1 bytes @ 0x0
  6564                           
  6565  0070                     ?_timer_init:	
  6566                           ; 1 bytes @ 0x0
  6567                           
  6568  0070                     ?_PWM_Capture_init:	
  6569                           ; 1 bytes @ 0x0
  6570                           
  6571  0070                     ?_clear_timer:	
  6572                           ; 1 bytes @ 0x0
  6573                           
  6574  0070                     ?_BVH2_Appl_Layer:	
  6575                           ; 1 bytes @ 0x0
  6576                           
  6577  0070                     ?_Cb44_Pic_etat_monitor_node_fcn1:	
  6578                           ; 1 bytes @ 0x0
  6579                           
  6580  0070                     ?_Cb34_PWM_Detection_node_fcn1:	
  6581                           ; 1 bytes @ 0x0
  6582                           
  6583  0070                     ?_Cb56_UbatHandling_node_fcn2:	
  6584                           ; 1 bytes @ 0x0
  6585                           
  6586  0070                     ?_Cb1_Current_An___High_node_fcn1:	
  6587                           ; 1 bytes @ 0x0
  6588                           
  6589  0070                     ?_ADC_Init:	
  6590                           ; 1 bytes @ 0x0
  6591                           
  6592  0070                     ?_ADC_Wait:	
  6593                           ; 1 bytes @ 0x0
  6594                           
  6595  0070                     ?_FILTER_Init:	
  6596                           ; 1 bytes @ 0x0
  6597                           
  6598  0070                     ?_FILTER_Ubat:	
  6599                           ; 1 bytes @ 0x0
  6600                           
  6601  0070                     ?_FILTER_IPhase:	
  6602                           ; 1 bytes @ 0x0
  6603                           
  6604  0070                     ?_FILTER_Temp:	
  6605                           ; 1 bytes @ 0x0
  6606                           
  6607  0070                     ?_Get_Analog_Value:	
  6608                           ; 1 bytes @ 0x0
  6609                           
  6610  0070                     ?_BLDCWait:	
  6611                           ; 1 bytes @ 0x0
  6612                           
  6613  0070                     ??_BLDCWait:	
  6614                           ; 1 bytes @ 0x0
  6615                           
  6616  0070                     ?_init_bldc:	
  6617                           ; 1 bytes @ 0x0
  6618                           
  6619  0070                     ?_interrrupt_bldc:	
  6620                           ; 1 bytes @ 0x0
  6621                           
  6622  0070                     ?_InitMotorStop:	
  6623                           ; 1 bytes @ 0x0
  6624                           
  6625  0070                     ?_DiagInit:	
  6626                           ; 1 bytes @ 0x0
  6627                           
  6628  0070                     ?_SetDiagAlarm:	
  6629                           ; 1 bytes @ 0x0
  6630                           
  6631  0070                     ?_EOL:	
  6632                           ; 1 bytes @ 0x0
  6633                           
  6634  0070                     ?_Task1ms:	
  6635                           ; 1 bytes @ 0x0
  6636                           
  6637  0070                     ??_Task1ms:	
  6638                           ; 1 bytes @ 0x0
  6639                           
  6640  0070                     ?_interrupt_handler:	
  6641                           ; 1 bytes @ 0x0
  6642                           
  6643  0070                     ?_Receive_Diag:	
  6644                           ; 1 bytes @ 0x0
  6645                           
  6646  0070                     ?_EnableMCP201:	
  6647                           ; 1 bytes @ 0x0
  6648                           
  6649  0070                     ?__ELINMIntInitialize:	
  6650                           ; 1 bytes @ 0x0
  6651                           
  6652  0070                     ?__ELINMIntResetProtocol:	
  6653                           ; 1 bytes @ 0x0
  6654                           
  6655  0070                     ??__ELINMIntResetProtocol:	
  6656                           ; 1 bytes @ 0x0
  6657                           
  6658  0070                     ?__ELINMIntCalcIDParity:	
  6659                           ; 1 bytes @ 0x0
  6660                           
  6661  0070                     ?_I_calibrationInit:	
  6662                           ; 1 bytes @ 0x0
  6663                           
  6664  0070                     ?_init_ports:	
  6665                           ; 1 bytes @ 0x0
  6666                           
  6667  0070                     ?_system_init:	
  6668                           ; 1 bytes @ 0x0
  6669                           
  6670  0070                     ?_main:	
  6671                           ; 1 bytes @ 0x0
  6672                           
  6673  0070                     ?i1_ADC_Wait:	
  6674                           ; 1 bytes @ 0x0
  6675                           
  6676  0070                     ??i1_ADC_Wait:	
  6677                           ; 1 bytes @ 0x0
  6678                           
  6679  0070                     ?i1_commutate:	
  6680                           ; 1 bytes @ 0x0
  6681                           
  6682  0070                     ??i1_commutate:	
  6683                           ; 1 bytes @ 0x0
  6684                           
  6685  0070                     ?i1_ADC_Read:	
  6686                           ; 1 bytes @ 0x0
  6687                           
  6688  0070                     ?i1___wmul:	
  6689                           ; 2 bytes @ 0x0
  6690                           
  6691  0070                     ?i1___lwdiv:	
  6692                           ; 2 bytes @ 0x0
  6693                           
  6694  0070                     __ELINMIntResetProtocol@code:	
  6695                           ; 2 bytes @ 0x0
  6696                           
  6697  0070                     i1___wmul@multiplier:	
  6698                           ; 1 bytes @ 0x0
  6699                           
  6700  0070                     i1___lwdiv@divisor:	
  6701                           ; 2 bytes @ 0x0
  6702                           
  6703                           
  6704                           ; 2 bytes @ 0x0
  6705  0070                     	ds	1
  6706  0071                     ??_ELINMIntHandler:	
  6707                           
  6708                           ; 1 bytes @ 0x1
  6709  0071                     	ds	1
  6710  0072                     ??i1_ADC_Read:	
  6711  0072                     i1ADC_Read@i:	
  6712                           ; 1 bytes @ 0x2
  6713                           
  6714  0072                     i1___wmul@multiplicand:	
  6715                           ; 1 bytes @ 0x2
  6716                           
  6717  0072                     i1___lwdiv@dividend:	
  6718                           ; 2 bytes @ 0x2
  6719                           
  6720                           
  6721                           ; 2 bytes @ 0x2
  6722  0072                     	ds	2
  6723  0074                     ??i1___wmul:	
  6724  0074                     ??i1___lwdiv:	
  6725                           ; 1 bytes @ 0x4
  6726                           
  6727  0074                     i1___lwdiv@counter:	
  6728                           ; 1 bytes @ 0x4
  6729                           
  6730  0074                     i1___wmul@product:	
  6731                           ; 1 bytes @ 0x4
  6732                           
  6733                           
  6734                           ; 2 bytes @ 0x4
  6735  0074                     	ds	1
  6736  0075                     i1___lwdiv@quotient:	
  6737                           
  6738                           ; 2 bytes @ 0x5
  6739  0075                     	ds	7
  6740  007C                     ??_interrrupt_bldc:	
  6741                           
  6742                           ; 1 bytes @ 0xC
  6743  007C                     	ds	2
  6744  007E                     ??_interrupt_handler:	
  6745                           
  6746                           	psect	cstackBANK0
  6747  0020                     __pcstackBANK0:	
  6748                           ; 1 bytes @ 0xE
  6749                           
  6750  0020                     interrrupt_bldc@ui32_tmp:	
  6751                           
  6752                           ; 4 bytes @ 0x0
  6753  0020                     	ds	4
  6754  0024                     ??_commutate:	
  6755  0024                     ??_PWM_Write_Out:	
  6756                           ; 1 bytes @ 0x4
  6757                           
  6758  0024                     ??_read_eeprom_data:	
  6759                           ; 1 bytes @ 0x4
  6760                           
  6761  0024                     ?__ELINMIntGetPointer:	
  6762                           ; 1 bytes @ 0x4
  6763                           
  6764  0024                     ??_Oscill_Source_Block:	
  6765                           ; 1 bytes @ 0x4
  6766                           
  6767  0024                     ??_PWM_Capture_init:	
  6768                           ; 1 bytes @ 0x4
  6769                           
  6770  0024                     ??_clear_timer:	
  6771                           ; 1 bytes @ 0x4
  6772                           
  6773  0024                     ??_Cb44_Pic_etat_monitor_node_fcn1:	
  6774                           ; 1 bytes @ 0x4
  6775                           
  6776  0024                     ??_Cb34_PWM_Detection_node_fcn1:	
  6777                           ; 1 bytes @ 0x4
  6778                           
  6779  0024                     ??_Cb56_UbatHandling_node_fcn2:	
  6780                           ; 1 bytes @ 0x4
  6781                           
  6782  0024                     ??_Cb1_Current_An___High_node_fcn1:	
  6783                           ; 1 bytes @ 0x4
  6784                           
  6785  0024                     ??_ADC_Init:	
  6786                           ; 1 bytes @ 0x4
  6787                           
  6788  0024                     ??_ADC_Wait:	
  6789                           ; 1 bytes @ 0x4
  6790                           
  6791  0024                     ??_FILTER_Ubat:	
  6792                           ; 1 bytes @ 0x4
  6793                           
  6794  0024                     ??_FILTER_IPhase:	
  6795                           ; 1 bytes @ 0x4
  6796                           
  6797  0024                     ??_FILTER_Temp:	
  6798                           ; 1 bytes @ 0x4
  6799                           
  6800  0024                     ??_InitMotorStop:	
  6801                           ; 1 bytes @ 0x4
  6802                           
  6803  0024                     ??_EnableMCP201:	
  6804                           ; 1 bytes @ 0x4
  6805                           
  6806  0024                     ??__ELINMIntInitialize:	
  6807                           ; 1 bytes @ 0x4
  6808                           
  6809  0024                     ??__ELINMIntCalcIDParity:	
  6810                           ; 1 bytes @ 0x4
  6811                           
  6812  0024                     ?_cksum:	
  6813                           ; 1 bytes @ 0x4
  6814                           
  6815  0024                     ?_ADC_Read:	
  6816                           ; 2 bytes @ 0x4
  6817                           
  6818  0024                     ?___wmul:	
  6819                           ; 2 bytes @ 0x4
  6820                           
  6821  0024                     ?___lwdiv:	
  6822                           ; 2 bytes @ 0x4
  6823                           
  6824  0024                     ?___tmul:	
  6825                           ; 2 bytes @ 0x4
  6826                           
  6827  0024                     ?___lmul:	
  6828                           ; 3 bytes @ 0x4
  6829                           
  6830  0024                     ?___aldiv:	
  6831                           ; 4 bytes @ 0x4
  6832                           
  6833  0024                     read_eeprom_data@ui8_adress:	
  6834                           ; 4 bytes @ 0x4
  6835                           
  6836  0024                     EnableMCP201@_dcnt:	
  6837                           ; 1 bytes @ 0x4
  6838                           
  6839  0024                     __ELINMIntCalcIDParity@ELINM_idtr:	
  6840                           ; 1 bytes @ 0x4
  6841                           
  6842  0024                     __ELINMIntGetPointer@_ELINMInt_position:	
  6843                           ; 1 bytes @ 0x4
  6844                           
  6845  0024                     PWM_Capture_init@ui8_CCP_Nb:	
  6846                           ; 1 bytes @ 0x4
  6847                           
  6848  0024                     PWM_Write_Out@ui8_DutyCycle_Out:	
  6849                           ; 1 bytes @ 0x4
  6850                           
  6851  0024                     clear_timer@ui8_TmrNb:	
  6852                           ; 1 bytes @ 0x4
  6853                           
  6854  0024                     ___wmul@multiplier:	
  6855                           ; 1 bytes @ 0x4
  6856                           
  6857  0024                     ___lwdiv@divisor:	
  6858                           ; 2 bytes @ 0x4
  6859                           
  6860  0024                     ___tmul@multiplier:	
  6861                           ; 2 bytes @ 0x4
  6862                           
  6863  0024                     ___lmul@multiplier:	
  6864                           ; 3 bytes @ 0x4
  6865                           
  6866  0024                     ___aldiv@divisor:	
  6867                           ; 4 bytes @ 0x4
  6868                           
  6869                           
  6870                           ; 4 bytes @ 0x4
  6871  0024                     	ds	1
  6872  0025                     ??__ELINMIntGetPointer:	
  6873  0025                     ?__ELINMIntSendMessage:	
  6874                           ; 1 bytes @ 0x5
  6875                           
  6876  0025                     ??_timer_init:	
  6877                           ; 1 bytes @ 0x5
  6878                           
  6879  0025                     ??_DiagInit:	
  6880                           ; 1 bytes @ 0x5
  6881                           
  6882  0025                     ??_SetDiagAlarm:	
  6883                           ; 1 bytes @ 0x5
  6884                           
  6885  0025                     read_eeprom_data@ui8_adress_data:	
  6886                           ; 1 bytes @ 0x5
  6887                           
  6888  0025                     EnableMCP201@_dcnt_712:	
  6889                           ; 1 bytes @ 0x5
  6890                           
  6891  0025                     __ELINMIntSendMessage@_ELINM_size:	
  6892                           ; 1 bytes @ 0x5
  6893                           
  6894  0025                     __ELINMIntGetPointer@_ELINMInt_tag:	
  6895                           ; 1 bytes @ 0x5
  6896                           
  6897  0025                     timer_init@ui8_TmrNb:	
  6898                           ; 1 bytes @ 0x5
  6899                           
  6900                           
  6901                           ; 1 bytes @ 0x5
  6902  0025                     	ds	1
  6903  0026                     ??_cksum:	
  6904  0026                     ??_ADC_Read:	
  6905                           ; 1 bytes @ 0x6
  6906                           
  6907  0026                     ??_init_ports:	
  6908                           ; 1 bytes @ 0x6
  6909                           
  6910  0026                     ADC_Read@i:	
  6911                           ; 1 bytes @ 0x6
  6912                           
  6913  0026                     EnableMCP201@_dcnt_713:	
  6914                           ; 1 bytes @ 0x6
  6915                           
  6916  0026                     __ELINMIntSendMessage@_ELINM_fmin:	
  6917                           ; 1 bytes @ 0x6
  6918                           
  6919  0026                     cksum@counter:	
  6920                           ; 2 bytes @ 0x6
  6921                           
  6922  0026                     ___wmul@multiplicand:	
  6923                           ; 2 bytes @ 0x6
  6924                           
  6925  0026                     ___lwdiv@dividend:	
  6926                           ; 2 bytes @ 0x6
  6927                           
  6928                           
  6929                           ; 2 bytes @ 0x6
  6930  0026                     	ds	1
  6931  0027                     ??_FILTER_Init:	
  6932  0027                     ??_I_calibrationInit:	
  6933                           ; 1 bytes @ 0x7
  6934                           
  6935  0027                     ___tmul@multiplicand:	
  6936                           ; 1 bytes @ 0x7
  6937                           
  6938                           
  6939                           ; 3 bytes @ 0x7
  6940  0027                     	ds	1
  6941  0028                     ??___wmul:	
  6942  0028                     ??___lwdiv:	
  6943                           ; 1 bytes @ 0x8
  6944                           
  6945  0028                     ___lwdiv@counter:	
  6946                           ; 1 bytes @ 0x8
  6947                           
  6948  0028                     __ELINMIntSendMessage@_ELINM_fmax:	
  6949                           ; 1 bytes @ 0x8
  6950                           
  6951  0028                     cksum@sum:	
  6952                           ; 2 bytes @ 0x8
  6953                           
  6954  0028                     ___wmul@product:	
  6955                           ; 2 bytes @ 0x8
  6956                           
  6957  0028                     ___lmul@multiplicand:	
  6958                           ; 2 bytes @ 0x8
  6959                           
  6960  0028                     ___aldiv@dividend:	
  6961                           ; 4 bytes @ 0x8
  6962                           
  6963                           
  6964                           ; 4 bytes @ 0x8
  6965  0028                     	ds	1
  6966  0029                     ___lwdiv@quotient:	
  6967                           
  6968                           ; 2 bytes @ 0x9
  6969  0029                     	ds	1
  6970  002A                     ??__ELINMIntSendMessage:	
  6971  002A                     ??___tmul:	
  6972                           ; 1 bytes @ 0xA
  6973                           
  6974  002A                     ?___awdiv:	
  6975                           ; 1 bytes @ 0xA
  6976                           
  6977  002A                     __ELINMIntSendMessage@_ELINM_idr:	
  6978                           ; 2 bytes @ 0xA
  6979                           
  6980  002A                     cksum@addr:	
  6981                           ; 1 bytes @ 0xA
  6982                           
  6983  002A                     ___awdiv@divisor:	
  6984                           ; 2 bytes @ 0xA
  6985                           
  6986  002A                     ___tmul@product:	
  6987                           ; 2 bytes @ 0xA
  6988                           
  6989                           
  6990                           ; 3 bytes @ 0xA
  6991  002A                     	ds	1
  6992  002B                     ?_write_eeprom_data:	
  6993  002B                     write_eeprom_data@ui8_adress_data:	
  6994                           ; 1 bytes @ 0xB
  6995                           
  6996  002B                     __ELINMIntSendMessage@_ELINM_tid:	
  6997                           ; 1 bytes @ 0xB
  6998                           
  6999                           
  7000                           ; 1 bytes @ 0xB
  7001  002B                     	ds	1
  7002  002C                     ??_write_eeprom_data:	
  7003  002C                     ??___lmul:	
  7004                           ; 1 bytes @ 0xC
  7005                           
  7006  002C                     ??___aldiv:	
  7007                           ; 1 bytes @ 0xC
  7008                           
  7009  002C                     write_eeprom_data@ui8_adress:	
  7010                           ; 1 bytes @ 0xC
  7011                           
  7012  002C                     __ELINMIntSendMessage@_ELINM_i:	
  7013                           ; 1 bytes @ 0xC
  7014                           
  7015  002C                     ___aldiv@counter:	
  7016                           ; 1 bytes @ 0xC
  7017                           
  7018  002C                     ___awdiv@dividend:	
  7019                           ; 1 bytes @ 0xC
  7020                           
  7021  002C                     ___lmul@product:	
  7022                           ; 2 bytes @ 0xC
  7023                           
  7024                           
  7025                           ; 4 bytes @ 0xC
  7026  002C                     	ds	1
  7027  002D                     ?___ltdiv:	
  7028  002D                     ___aldiv@sign:	
  7029                           ; 3 bytes @ 0xD
  7030                           
  7031  002D                     __ELINMIntSendMessage@_ELINM_chk:	
  7032                           ; 1 bytes @ 0xD
  7033                           
  7034  002D                     ___ltdiv@divisor:	
  7035                           ; 2 bytes @ 0xD
  7036                           
  7037                           
  7038                           ; 3 bytes @ 0xD
  7039  002D                     	ds	1
  7040  002E                     ??___awdiv:	
  7041  002E                     ___awdiv@counter:	
  7042                           ; 1 bytes @ 0xE
  7043                           
  7044  002E                     ___aldiv@quotient:	
  7045                           ; 1 bytes @ 0xE
  7046                           
  7047                           
  7048                           ; 4 bytes @ 0xE
  7049  002E                     	ds	1
  7050  002F                     ?_Transmit_LIN_8Bytes:	
  7051  002F                     ?__ELINMIntReceiveMessage:	
  7052                           ; 1 bytes @ 0xF
  7053                           
  7054  002F                     Transmit_LIN_8Bytes@B0:	
  7055                           ; 1 bytes @ 0xF
  7056                           
  7057  002F                     __ELINMIntReceiveMessage@_ELINM_id:	
  7058                           ; 1 bytes @ 0xF
  7059                           
  7060  002F                     ___awdiv@sign:	
  7061                           ; 1 bytes @ 0xF
  7062                           
  7063                           
  7064                           ; 1 bytes @ 0xF
  7065  002F                     	ds	1
  7066  0030                     ??_InitMotorRun:	
  7067  0030                     ??_Get_Analog_Value:	
  7068                           ; 1 bytes @ 0x10
  7069                           
  7070  0030                     ??_init_bldc:	
  7071                           ; 1 bytes @ 0x10
  7072                           
  7073  0030                     ??_system_init:	
  7074                           ; 1 bytes @ 0x10
  7075                           
  7076  0030                     Transmit_LIN_8Bytes@B1:	
  7077                           ; 1 bytes @ 0x10
  7078                           
  7079  0030                     __ELINMIntReceiveMessage@_ELINM_size:	
  7080                           ; 1 bytes @ 0x10
  7081                           
  7082  0030                     ___awdiv@quotient:	
  7083                           ; 1 bytes @ 0x10
  7084                           
  7085  0030                     ___ltdiv@dividend:	
  7086                           ; 2 bytes @ 0x10
  7087                           
  7088                           
  7089                           ; 3 bytes @ 0x10
  7090  0030                     	ds	1
  7091  0031                     ??__ELINMIntReceiveMessage:	
  7092  0031                     Transmit_LIN_8Bytes@B2:	
  7093                           ; 1 bytes @ 0x11
  7094                           
  7095  0031                     __ELINMIntReceiveMessage@_ELINM_tag:	
  7096                           ; 1 bytes @ 0x11
  7097                           
  7098                           
  7099                           ; 1 bytes @ 0x11
  7100  0031                     	ds	1
  7101  0032                     ??_BVH2_Appl_Layer:	
  7102  0032                     ??_Receive_Diag:	
  7103                           ; 1 bytes @ 0x12
  7104                           
  7105  0032                     Transmit_LIN_8Bytes@B3:	
  7106                           ; 1 bytes @ 0x12
  7107                           
  7108                           
  7109                           ; 1 bytes @ 0x12
  7110  0032                     	ds	1
  7111  0033                     ??___ltdiv:	
  7112  0033                     Transmit_LIN_8Bytes@B4:	
  7113                           ; 1 bytes @ 0x13
  7114                           
  7115  0033                     Receive_Diag@id:	
  7116                           ; 1 bytes @ 0x13
  7117                           
  7118  0033                     ___ltdiv@quotient:	
  7119                           ; 1 bytes @ 0x13
  7120                           
  7121                           
  7122                           ; 3 bytes @ 0x13
  7123  0033                     	ds	1
  7124  0034                     Transmit_LIN_8Bytes@B5:	
  7125                           
  7126                           ; 1 bytes @ 0x14
  7127  0034                     	ds	1
  7128  0035                     Transmit_LIN_8Bytes@B6:	
  7129                           
  7130                           ; 1 bytes @ 0x15
  7131  0035                     	ds	1
  7132  0036                     Transmit_LIN_8Bytes@B7:	
  7133  0036                     ___ltdiv@counter:	
  7134                           ; 1 bytes @ 0x16
  7135                           
  7136                           
  7137                           ; 1 bytes @ 0x16
  7138  0036                     	ds	1
  7139  0037                     ??_Transmit_LIN_8Bytes:	
  7140  0037                     ??_PWMReadDC:	
  7141                           ; 1 bytes @ 0x17
  7142                           
  7143  0037                     Transmit_LIN_8Bytes@ID:	
  7144                           ; 1 bytes @ 0x17
  7145                           
  7146                           
  7147                           ; 1 bytes @ 0x17
  7148  0037                     	ds	1
  7149  0038                     ??_NegativeAnswer:	
  7150  0038                     NegativeAnswer@LID:	
  7151                           ; 1 bytes @ 0x18
  7152                           
  7153                           
  7154                           ; 1 bytes @ 0x18
  7155  0038                     	ds	1
  7156  0039                     ??_EOL:	
  7157                           
  7158                           ; 1 bytes @ 0x19
  7159  0039                     	ds	3
  7160  003C                     EOL@_dcnt:	
  7161                           
  7162                           ; 1 bytes @ 0x1C
  7163  003C                     	ds	1
  7164  003D                     EOL@_dcnt_413:	
  7165                           
  7166                           ; 1 bytes @ 0x1D
  7167  003D                     	ds	1
  7168  003E                     EOL@_dcnt_414:	
  7169                           
  7170                           ; 1 bytes @ 0x1E
  7171  003E                     	ds	1
  7172  003F                     EOL@_dcnt_415:	
  7173                           
  7174                           ; 1 bytes @ 0x1F
  7175  003F                     	ds	1
  7176  0040                     EOL@_dcnt_416:	
  7177                           
  7178                           ; 1 bytes @ 0x20
  7179  0040                     	ds	1
  7180  0041                     EOL@_dcnt_417:	
  7181                           
  7182                           ; 1 bytes @ 0x21
  7183  0041                     	ds	1
  7184  0042                     EOL@_dcnt_418:	
  7185                           
  7186                           ; 1 bytes @ 0x22
  7187  0042                     	ds	1
  7188  0043                     EOL@_dcnt_419:	
  7189                           
  7190                           ; 1 bytes @ 0x23
  7191  0043                     	ds	1
  7192  0044                     EOL@_dcnt_420:	
  7193                           
  7194                           ; 1 bytes @ 0x24
  7195  0044                     	ds	1
  7196  0045                     EOL@_dcnt_421:	
  7197                           
  7198                           ; 1 bytes @ 0x25
  7199  0045                     	ds	1
  7200  0046                     EOL@_dcnt_422:	
  7201                           
  7202                           ; 1 bytes @ 0x26
  7203  0046                     	ds	1
  7204  0047                     EOL@_dcnt_423:	
  7205                           
  7206                           ; 1 bytes @ 0x27
  7207  0047                     	ds	1
  7208  0048                     EOL@_dcnt_424:	
  7209                           
  7210                           ; 1 bytes @ 0x28
  7211  0048                     	ds	1
  7212  0049                     EOL@_dcnt_425:	
  7213                           
  7214                           ; 1 bytes @ 0x29
  7215  0049                     	ds	1
  7216  004A                     EOL@_dcnt_426:	
  7217                           
  7218                           ; 1 bytes @ 0x2A
  7219  004A                     	ds	1
  7220  004B                     EOL@_dcnt_427:	
  7221                           
  7222                           ; 1 bytes @ 0x2B
  7223  004B                     	ds	1
  7224  004C                     EOL@_dcnt_428:	
  7225                           
  7226                           ; 1 bytes @ 0x2C
  7227  004C                     	ds	1
  7228  004D                     EOL@_dcnt_429:	
  7229                           
  7230                           ; 1 bytes @ 0x2D
  7231  004D                     	ds	1
  7232  004E                     EOL@ui8_b_DResB5_RD:	
  7233                           
  7234                           ; 1 bytes @ 0x2E
  7235  004E                     	ds	1
  7236  004F                     EOL@ui8_b_DResB4_RD:	
  7237                           
  7238                           ; 1 bytes @ 0x2F
  7239  004F                     	ds	1
  7240  0050                     EOL@ui8_b_DResB0_RD:	
  7241                           
  7242                           ; 1 bytes @ 0x30
  7243  0050                     	ds	1
  7244  0051                     EOL@ui8_b_DResB1_RD:	
  7245                           
  7246                           ; 1 bytes @ 0x31
  7247  0051                     	ds	1
  7248  0052                     EOL@ui8_b_DResB2_RD:	
  7249                           
  7250                           ; 1 bytes @ 0x32
  7251  0052                     	ds	1
  7252  0053                     EOL@ui8_b_DResB3_RD:	
  7253                           
  7254                           ; 1 bytes @ 0x33
  7255  0053                     	ds	1
  7256                           
  7257                           	psect	text7
  7258  1A9A                     __ptext7:	
  7259 ;; *************** function _commutate *****************
  7260 ;; Defined at:
  7261 ;;		line 1426 in file "../bldc.c"
  7262 ;; Parameters:    Size  Location     Type
  7263 ;;		None
  7264 ;; Auto vars:     Size  Location     Type
  7265 ;;		None
  7266 ;; Return value:  Size  Location     Type
  7267 ;;                  1    wreg      void 
  7268 ;; Registers used:
  7269 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  7270 ;; Tracked objects:
  7271 ;;		On entry : 1F/0
  7272 ;;		On exit  : 1F/0
  7273 ;;		Unchanged: 0/0
  7274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7275 ;;      Params:         0       0       0       0       0       0       0       0
  7276 ;;      Locals:         0       0       0       0       0       0       0       0
  7277 ;;      Temps:          0      12       0       0       0       0       0       0
  7278 ;;      Totals:         0      12       0       0       0       0       0       0
  7279 ;;Total ram usage:       12 bytes
  7280 ;; Hardware stack levels used:    1
  7281 ;; Hardware stack levels required when called:    3
  7282 ;; This function calls:
  7283 ;;		Nothing
  7284 ;; This function is called by:
  7285 ;;		_InitMotorRun
  7286 ;; This function uses a non-reentrant model
  7287 ;;
  7288                           
  7289                           
  7290                           ;psect for function _commutate
  7291  1A9A                     _commutate:	
  7292  1A9A                     l5902:	
  7293                           ;incstack = 0
  7294                           ; Regs used in _commutate: [wreg-fsr1h+status,2+status,0]
  7295                           
  7296                           
  7297                           ;bldc.c: 1431: if( ui16_step_cnt < 10 )
  7298  1A9A  3000               	movlw	0
  7299  1A9B  0021               	movlb	1	; select bank1
  7300  1A9C  0239               	subwf	(_ui16_step_cnt+1)^(0+128),w
  7301  1A9D  300A               	movlw	10
  7302  1A9E  1903               	skipnz
  7303  1A9F  0238               	subwf	_ui16_step_cnt^(0+128),w
  7304  1AA0  1803               	skipnc
  7305  1AA1  2AA5               	goto	l5906
  7306                           
  7307                           ;bldc.c: 1433: {
  7308                           ;bldc.c: 1435: ui16_step_cnt++;
  7309  1AA2  0AB8               	incf	_ui16_step_cnt^(0+128),f
  7310  1AA3  1903               	skipnz
  7311  1AA4  0AB9               	incf	(_ui16_step_cnt+1)^(0+128),f
  7312  1AA5                     l5906:	
  7313                           
  7314                           ;bldc.c: 1437: }
  7315                           ;bldc.c: 1440: B[ Bcnt++ ] = ( comm_time );
  7316                           
  7317                           ;bldc.c: 1441: Bcnt &= ( ( sizeof( B ) / sizeof( B[ 0 ] ) ) - 1 );
  7318                           
  7319                           ;bldc.c: 1442: ui16_speed_fil = ( B[ 0 ] + B[ 1 ] + B[ 2 ] + B[ 3 ] + B[ 4 ] + B[ 5 ] + 
      +                          B[ 6 ] + B[ 7 ] );
  7320  1AA5  26C2  319A         	fcall	PL20	;call to abstracted procedure
  7321  1AA7  0020               	movlb	0	; select bank0
  7322  1AA8  00A4               	movwf	??_commutate
  7323  1AA9  0023               	movlb	3	; select bank3
  7324  1AAA  0825               	movf	((_B+1)^(0+384)+4),w
  7325  1AAB  3D23               	addwfc	((_B+1)^(0+384)+2),w
  7326  1AAC  0020               	movlb	0	; select bank0
  7327  1AAD  00A5               	movwf	??_commutate+1
  7328  1AAE  0023               	movlb	3	; select bank3
  7329  1AAF  0826               	movf	(_B^(0+384)+6),w
  7330  1AB0  0020               	movlb	0	; select bank0
  7331  1AB1  0724               	addwf	??_commutate,w
  7332  1AB2  00A6               	movwf	??_commutate+2
  7333  1AB3  0023               	movlb	3	; select bank3
  7334  1AB4  0827               	movf	((_B+1)^(0+384)+6),w
  7335  1AB5  0020               	movlb	0	; select bank0
  7336  1AB6  3D25               	addwfc	??_commutate+1,w
  7337  1AB7  00A7               	movwf	??_commutate+3
  7338  1AB8  0023               	movlb	3	; select bank3
  7339  1AB9  0828               	movf	(_B^(0+384)+8),w
  7340  1ABA  0020               	movlb	0	; select bank0
  7341  1ABB  0726               	addwf	??_commutate+2,w
  7342  1ABC  00A8               	movwf	??_commutate+4
  7343  1ABD  0023               	movlb	3	; select bank3
  7344  1ABE  0829               	movf	((_B+1)^(0+384)+8),w
  7345  1ABF  0020               	movlb	0	; select bank0
  7346  1AC0  3D27               	addwfc	??_commutate+3,w
  7347  1AC1  00A9               	movwf	??_commutate+5
  7348  1AC2  0023               	movlb	3	; select bank3
  7349  1AC3  082A               	movf	(_B^(0+384)+10),w
  7350  1AC4  0020               	movlb	0	; select bank0
  7351  1AC5  0728               	addwf	??_commutate+4,w
  7352  1AC6  00AA               	movwf	??_commutate+6
  7353  1AC7  0023               	movlb	3	; select bank3
  7354  1AC8  082B               	movf	((_B+1)^(0+384)+10),w
  7355  1AC9  0020               	movlb	0	; select bank0
  7356  1ACA  3D29               	addwfc	??_commutate+5,w
  7357  1ACB  00AB               	movwf	??_commutate+7
  7358  1ACC  3F00               	moviw [0]fsr0
  7359  1ACD  072A               	addwf	??_commutate+6,w
  7360  1ACE  00AC               	movwf	??_commutate+8
  7361  1ACF  3F01               	moviw [1]fsr0
  7362  1AD0  3D2B               	addwfc	??_commutate+7,w
  7363  1AD1  00AD               	movwf	??_commutate+9
  7364  1AD2  3F40               	moviw [0]fsr1
  7365  1AD3  072C               	addwf	??_commutate+8,w
  7366  1AD4  00AE               	movwf	??_commutate+10
  7367  1AD5  3F41               	moviw [1]fsr1
  7368  1AD6  3D2D               	addwfc	??_commutate+9,w
  7369  1AD7  00AF               	movwf	??_commutate+11
  7370  1AD8  0023               	movlb	3	; select bank3
  7371  1AD9  0820               	movf	_B^(0+384),w
  7372  1ADA  0020               	movlb	0	; select bank0
  7373  1ADB  072E               	addwf	??_commutate+10,w
  7374  1ADC  0021               	movlb	1	; select bank1
  7375  1ADD  00B2               	movwf	_ui16_speed_fil^(0+128)
  7376  1ADE  0023               	movlb	3	; select bank3
  7377  1ADF  0821               	movf	(_B+1)^(0+384),w
  7378  1AE0  0020               	movlb	0	; select bank0
  7379  1AE1  3D2F               	addwfc	??_commutate+11,w
  7380                           
  7381                           ;bldc.c: 1443: ui16_speed_rar = comm_time;
  7382                           
  7383                           ;bldc.c: 1448: MotorFlags.bits.B5 = 0;
  7384                           
  7385                           ;bldc.c: 1455: bemf_filter = 62;
  7386                           
  7387                           ;bldc.c: 1458: MotorFlags.bits.B7 = 1;
  7388  1AE2  26EB  319A         	fcall	PL34	;call to abstracted procedure
  7389                           
  7390                           ;bldc.c: 1461: if( MotorFlags.bits.B3 )
  7391  1AE4  1DE3               	btfss	_MotorFlags,3
  7392  1AE5  2B1C               	goto	l327
  7393                           
  7394                           ;bldc.c: 1463: {
  7395                           ;bldc.c: 1468: ui16_phase_advancement = ( ( ui16_speed_rar>>3 ) * 128 )>>7;
  7396                           
  7397                           ;bldc.c: 1472: if( comm_time > ui16_phase_advancement )
  7398  1AE6  26A7  319A         	fcall	PL18	;call to abstracted procedure
  7399  1AE8  1803               	skipnc
  7400  1AE9  2AED               	goto	l5934
  7401                           
  7402                           ;bldc.c: 1474: {
  7403                           ;bldc.c: 1476: phase_delay_counter = ( ( comm_time ) - ui16_phase_advancement );
  7404  1AEA  271F  319A         	fcall	PL40	;call to abstracted procedure
  7405                           
  7406                           ;bldc.c: 1478: }
  7407  1AEC  2AFE               	goto	l5958
  7408  1AED                     l5934:	
  7409                           
  7410                           ;bldc.c: 1481: else
  7411                           ;bldc.c: 1482: {
  7412                           ;bldc.c: 1484: phase_delay_counter = 0;
  7413  1AED  0023               	movlb	3	; select bank3
  7414  1AEE  01D6               	clrf	_phase_delay_counter^(0+384)
  7415  1AEF  01D7               	clrf	(_phase_delay_counter+1)^(0+384)
  7416  1AF0  2AFE               	goto	l5958
  7417  1AF1                     l5936:	
  7418                           
  7419                           ;bldc.c: 1514: {
  7420                           ;bldc.c: 1516: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 600 * 2 ) 
      +                          ) ;
  7421  1AF1  27AA  319A         	fcall	PL118	;call to abstracted procedure
  7422                           
  7423                           ;bldc.c: 1517: break;
  7424  1AF3  2B0C               	goto	l5960
  7425  1AF4                     l5938:	
  7426                           
  7427                           ;bldc.c: 1524: {
  7428                           ;bldc.c: 1526: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 100 * 2 ) 
      +                          ) ;
  7429  1AF4  27B4  319A         	fcall	PL122	;call to abstracted procedure
  7430  1AF6  2AFC               	goto	L3
  7431  1AF7                     l5940:	
  7432                           ;bldc.c: 1527: break;
  7433                           
  7434                           
  7435                           ;bldc.c: 1534: {
  7436                           ;bldc.c: 1536: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 150 * 2 ) 
      +                          ) ;
  7437  1AF7  27CC  319A         	fcall	PL136	;call to abstracted procedure
  7438  1AF9  2AFC               	goto	L3
  7439  1AFA                     l5942:	
  7440                           ;bldc.c: 1537: break;
  7441                           
  7442                           
  7443                           ;bldc.c: 1544: {
  7444                           ;bldc.c: 1546: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 200 * 2 ) 
      +                          ) ;
  7445  1AFA  27D5  319A         	fcall	PL142	;call to abstracted procedure
  7446  1AFC                     L3:	
  7447  1AFC  00B2               	movwf	(_ui16_comm_time_max^(0+256)+1)
  7448                           
  7449                           ;bldc.c: 1547: break;
  7450  1AFD  2B0C               	goto	l5960
  7451  1AFE                     l5958:	
  7452                           
  7453                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7454                           ; Switch size 1, requested type "space"
  7455                           ; Number of cases is 1, Range of values is 0 to 0
  7456                           ; switch strategies available:
  7457                           ; Name         Instructions Cycles
  7458                           ; simple_byte            4     3 (average)
  7459                           ; direct_byte            8     6 (fixed)
  7460                           ; jumptable            260     6 (fixed)
  7461                           ;	Chosen strategy is simple_byte
  7462  1AFE  0021               	movlb	1	; select bank1
  7463  1AFF  0839               	movf	(_ui16_step_cnt+1)^(0+128),w
  7464  1B00  3A00               	xorlw	0	; case 0
  7465  1B01  1903               	skipnz
  7466  1B02  2B04               	goto	l14496
  7467  1B03  2AFA               	goto	l5942
  7468  1B04                     l14496:	
  7469                           
  7470                           ; Switch size 1, requested type "space"
  7471                           ; Number of cases is 10, Range of values is 0 to 9
  7472                           ; switch strategies available:
  7473                           ; Name         Instructions Cycles
  7474                           ; direct_byte           26     6 (fixed)
  7475                           ; simple_byte           31    16 (average)
  7476                           ; jumptable            260     6 (fixed)
  7477                           ;	Chosen strategy is direct_byte
  7478  1B04  27BD  319A         	fcall	PL126	;call to abstracted procedure
  7479  1B06  1803               	skipnc
  7480  1B07  2AFA               	goto	l5942
  7481  1B08  3187               	movlp	high S14498
  7482  1B09  3504               	lslf	4,w
  7483  1B0A  3E17               	addlw	low S14498
  7484  1B0B  0082               	movwf	2
  7485  1B0C                     l5960:	
  7486                           
  7487                           ;bldc.c: 1624: if( ui16_comm_time_max < ( unsigned short ) ( ( 10 * 20000UL ) / ( 200 * 
      +                          2 ) ) )
  7488  1B0C  3001               	movlw	1
  7489  1B0D  0232               	subwf	(_ui16_comm_time_max+1)^(0+256),w
  7490  1B0E  30F4               	movlw	244
  7491  1B0F  1903               	skipnz
  7492  1B10  0231               	subwf	_ui16_comm_time_max^(0+256),w
  7493  1B11  1803               	skipnc
  7494  1B12  2B15               	goto	l5964
  7495                           
  7496                           ;bldc.c: 1626: {
  7497                           ;bldc.c: 1628: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 200 * 2 ) 
      +                          );
  7498  1B13  27B8  319A         	fcall	PL124	;call to abstracted procedure
  7499  1B15                     l5964:	
  7500                           
  7501                           ;bldc.c: 1630: }
  7502                           ;bldc.c: 1634: if (MotorFlags.bits.B4)
  7503  1B15  0020               	movlb	0	; select bank0
  7504  1B16  1E63               	btfss	_MotorFlags,4
  7505  1B17  2B4A               	goto	l345
  7506                           
  7507                           ;bldc.c: 1636: {
  7508                           ;bldc.c: 1639: ui8_StartupPWM = 10 ;
  7509  1B18  300A               	movlw	10
  7510  1B19  0021               	movlb	1	; select bank1
  7511  1B1A  00E5               	movwf	_ui8_StartupPWM^(0+128)
  7512                           
  7513                           ;bldc.c: 1641: }
  7514                           ;bldc.c: 1644: }
  7515  1B1B  2B4A               	goto	l345
  7516  1B1C                     l327:	
  7517                           
  7518                           ;bldc.c: 1647: else
  7519                           ;bldc.c: 1648: {
  7520                           ;bldc.c: 1652: if( rising_bemf_flag)
  7521  1B1C  1C68               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  7522  1B1D  2B22               	goto	l5970
  7523                           
  7524                           ;bldc.c: 1654: {
  7525                           ;bldc.c: 1657: phase_delay_counter = 0;
  7526  1B1E  0023               	movlb	3	; select bank3
  7527  1B1F  01D6               	clrf	_phase_delay_counter^(0+384)
  7528  1B20  01D7               	clrf	(_phase_delay_counter+1)^(0+384)
  7529                           
  7530                           ;bldc.c: 1659: }
  7531  1B21  2B2F               	goto	l5972
  7532  1B22                     l5970:	
  7533                           
  7534                           ;bldc.c: 1662: else
  7535                           ;bldc.c: 1663: {
  7536                           ;bldc.c: 1666: phase_delay_counter = comm_time>>1;
  7537  1B22  085B               	movf	_comm_time+1,w
  7538  1B23  00A5               	movwf	??_commutate+1
  7539  1B24  085A               	movf	_comm_time,w
  7540  1B25  00A4               	movwf	??_commutate
  7541  1B26  36A5               	lsrf	??_commutate+1,f
  7542  1B27  0CA4               	rrf	??_commutate,f
  7543  1B28  0824               	movf	??_commutate,w
  7544  1B29  0023               	movlb	3	; select bank3
  7545  1B2A  00D6               	movwf	_phase_delay_counter^(0+384)
  7546  1B2B  0020               	movlb	0	; select bank0
  7547  1B2C  0825               	movf	??_commutate+1,w
  7548  1B2D  0023               	movlb	3	; select bank3
  7549  1B2E  00D7               	movwf	(_phase_delay_counter+1)^(0+384)
  7550  1B2F                     l5972:	
  7551                           
  7552                           ;bldc.c: 1680: phase_delay_counter_debug = phase_delay_counter;
  7553                           
  7554                           ;bldc.c: 1686: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 200 * 2 ) 
      +                          );
  7555                           
  7556                           ;bldc.c: 1691: if( MotorFlags.bits.B6 )
  7557  1B2F  276A  319A         	fcall	PL66	;call to abstracted procedure
  7558  1B31  1F63               	btfss	_MotorFlags,6
  7559  1B32  2B48               	goto	l5996
  7560                           
  7561                           ;bldc.c: 1693: {
  7562                           ;bldc.c: 1697: if (CCPR1L == ui8_duty_cycle_BLDC)
  7563  1B33  27AF  319A         	fcall	PL120	;call to abstracted procedure
  7564  1B35  1903               	btfsc	3,2
  7565  1B36  2B4A               	goto	l345
  7566                           
  7567                           ;bldc.c: 1706: else
  7568                           ;bldc.c: 1707: {
  7569                           ;bldc.c: 1709: if( CCPR1L > ui8_duty_cycle_BLDC )
  7570  1B37  27D0  319A         	fcall	PL140	;call to abstracted procedure
  7571  1B39  1803               	skipnc
  7572  1B3A  2B42               	goto	l5990
  7573                           
  7574                           ;bldc.c: 1712: {
  7575                           ;bldc.c: 1714: CCPR1L--;
  7576                           
  7577                           ;bldc.c: 1716: if (CCPR1L > ui8_duty_cycle_BLDC)
  7578  1B3B  279E  319A         	fcall	PL108	;call to abstracted procedure
  7579  1B3D  1803               	skipnc
  7580  1B3E  2B4A               	goto	l345
  7581                           
  7582                           ;bldc.c: 1718: {
  7583                           ;bldc.c: 1720: CCPR1L--;
  7584  1B3F  0025               	movlb	5	; select bank5
  7585  1B40  0391               	decf	17,f	;volatile
  7586  1B41  2B4A               	goto	l345
  7587  1B42                     l5990:	
  7588                           
  7589                           ;bldc.c: 1728: else
  7590                           ;bldc.c: 1729: {
  7591                           ;bldc.c: 1731: CCPR1L++;
  7592                           
  7593                           ;bldc.c: 1733: if (CCPR1L < ui8_duty_cycle_BLDC)
  7594  1B42  278B  319A         	fcall	PL90	;call to abstracted procedure
  7595  1B44  1803               	skipnc
  7596  1B45  2B4A               	goto	l345
  7597                           
  7598                           ;bldc.c: 1735: {
  7599                           ;bldc.c: 1737: CCPR1L++;
  7600  1B46  0A91               	incf	17,f	;volatile
  7601  1B47  2B4A               	goto	l345
  7602  1B48                     l5996:	
  7603                           
  7604                           ;bldc.c: 1768: else
  7605                           ;bldc.c: 1769: {
  7606                           ;bldc.c: 1771: CCPR1L = 0;
  7607  1B48  0025               	movlb	5	; select bank5
  7608  1B49  0191               	clrf	17	;volatile
  7609  1B4A                     l345:	
  7610                           
  7611                           ;bldc.c: 1773: }
  7612                           ;bldc.c: 1777: }
  7613                           ;bldc.c: 1780: comm_time = 0;
  7614                           
  7615                           ;bldc.c: 1784: if( comm_state == 0xff )
  7616  1B4A  27C7  319A         	fcall	PL134	;call to abstracted procedure
  7617  1B4C  0F64               	incfsz	_comm_state^(0+128),w
  7618  1B4D  2B9C               	goto	l6146
  7619                           
  7620                           ;bldc.c: 1786: {
  7621                           ;bldc.c: 1788: comm_state = 6;
  7622  1B4E  3006               	movlw	6
  7623  1B4F  00E4               	movwf	_comm_state^(0+128)
  7624  1B50  2B9C               	goto	l6146
  7625  1B51                     l6002:	
  7626                           
  7627                           ;bldc.c: 1800: {
  7628                           ;bldc.c: 1806: PSTR1CON = 0b00000001;
  7629  1B51  3001               	movlw	1
  7630  1B52  0025               	movlb	5	; select bank5
  7631  1B53  0096               	movwf	22	;volatile
  7632                           
  7633                           ;bldc.c: 1809: if( MotorFlags.bits.B6 )
  7634  1B54  0020               	movlb	0	; select bank0
  7635  1B55  1F63               	btfss	_MotorFlags,6
  7636  1B56  2B59               	goto	l6008
  7637                           
  7638                           ;bldc.c: 1811: {
  7639                           ;bldc.c: 1813: LATC = ( LATC & 0b11100101 ) | 0b00001010;
  7640  1B57  2779  319A         	fcall	PL74	;call to abstracted procedure
  7641  1B59                     l6008:	
  7642                           
  7643                           ;bldc.c: 1815: }
  7644                           ;bldc.c: 1819: LATB2 = 0;
  7645                           
  7646                           ;bldc.c: 1820: LATB1 = 0;
  7647                           
  7648                           ;bldc.c: 1821: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
  7649                           
  7650                           ;bldc.c: 1822: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
  7651                           
  7652                           ;bldc.c: 1823: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
  7653                           
  7654                           ;bldc.c: 1824: CM1CON1 = 0x02;
  7655                           
  7656                           ;bldc.c: 1837: CM1CON0 = 0x84;
  7657                           
  7658                           ;bldc.c: 1838: rising_bemf_flag = 1;
  7659  1B59  26DA  319A         	fcall	PL32	;call to abstracted procedure
  7660  1B5B  2B89               	goto	L9
  7661  1B5C                     l6026:	
  7662                           ;bldc.c: 1845: break;
  7663                           
  7664                           ;bldc.c: 1839: comm_state = 6;
  7665                           
  7666                           
  7667                           ;bldc.c: 1855: {
  7668                           ;bldc.c: 1860: PSTR1CON = 0b00000001;
  7669  1B5C  3001               	movlw	1
  7670  1B5D  0025               	movlb	5	; select bank5
  7671  1B5E  0096               	movwf	22	;volatile
  7672                           
  7673                           ;bldc.c: 1863: if( MotorFlags.bits.B6 )
  7674  1B5F  0020               	movlb	0	; select bank0
  7675  1B60  1F63               	btfss	_MotorFlags,6
  7676  1B61  2B64               	goto	l6032
  7677                           
  7678                           ;bldc.c: 1865: {
  7679                           ;bldc.c: 1867: LATC = ( LATC & 0b11100101 ) | 0b00010010;
  7680  1B62  277F  319A         	fcall	PL78	;call to abstracted procedure
  7681  1B64                     l6032:	
  7682                           
  7683                           ;bldc.c: 1869: }
  7684                           ;bldc.c: 1873: LATB2 = 1;
  7685                           
  7686                           ;bldc.c: 1874: LATB1 = 0;
  7687                           
  7688                           ;bldc.c: 1875: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
  7689                           
  7690                           ;bldc.c: 1876: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
  7691                           
  7692                           ;bldc.c: 1877: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
  7693                           
  7694                           ;bldc.c: 1878: CM1CON1 = 0x01;
  7695                           
  7696                           ;bldc.c: 1892: CM1CON0 = 0x94;
  7697  1B64  2750  319A         	fcall	PL46	;call to abstracted procedure
  7698  1B66                     l6046:	
  7699                           
  7700                           ;bldc.c: 1893: rising_bemf_flag = 0;
  7701                           
  7702                           ;bldc.c: 1894: comm_state = 1;
  7703  1B66  2798  319A         	fcall	PL100	;call to abstracted procedure
  7704                           
  7705                           ;bldc.c: 1902: break;
  7706  1B68  2BB0               	goto	l6148
  7707  1B69                     l6050:	
  7708                           
  7709                           ;bldc.c: 1912: {
  7710                           ;bldc.c: 1917: PSTR1CON = 0b00000010;
  7711  1B69  3002               	movlw	2
  7712  1B6A  0025               	movlb	5	; select bank5
  7713  1B6B  0096               	movwf	22	;volatile
  7714                           
  7715                           ;bldc.c: 1920: if( MotorFlags.bits.B6 )
  7716  1B6C  0020               	movlb	0	; select bank0
  7717  1B6D  1F63               	btfss	_MotorFlags,6
  7718  1B6E  2B71               	goto	l6056
  7719                           
  7720                           ;bldc.c: 1922: {
  7721                           ;bldc.c: 1924: LATC = ( LATC & 0b11100101 ) | 0b00011000;
  7722  1B6F  2773  319A         	fcall	PL70	;call to abstracted procedure
  7723  1B71                     l6056:	
  7724                           
  7725                           ;bldc.c: 1926: }
  7726                           ;bldc.c: 1929: LATC2 = 0;
  7727                           
  7728                           ;bldc.c: 1931: LATB1 = 0;
  7729                           
  7730                           ;bldc.c: 1932: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
  7731                           
  7732                           ;bldc.c: 1933: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
  7733                           
  7734                           ;bldc.c: 1934: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
  7735                           
  7736                           ;bldc.c: 1935: CM1CON1 = 0x00;
  7737                           
  7738                           ;bldc.c: 1949: CM1CON0 = 0x84;
  7739                           
  7740                           ;bldc.c: 1950: rising_bemf_flag = 1;
  7741  1B71  2740  319A         	fcall	PL44	;call to abstracted procedure
  7742  1B73  2B89               	goto	L9
  7743  1B74                     l6070:	
  7744                           ;bldc.c: 1956: break;
  7745                           
  7746                           ;bldc.c: 1951: comm_state = 2;
  7747                           
  7748                           
  7749                           ;bldc.c: 1966: {
  7750                           ;bldc.c: 1972: PSTR1CON = 0b00000010;
  7751  1B74  3002               	movlw	2
  7752  1B75  0025               	movlb	5	; select bank5
  7753  1B76  0096               	movwf	22	;volatile
  7754                           
  7755                           ;bldc.c: 1975: if( MotorFlags.bits.B6 )
  7756  1B77  0020               	movlb	0	; select bank0
  7757  1B78  1F63               	btfss	_MotorFlags,6
  7758  1B79  2B7C               	goto	l6076
  7759                           
  7760                           ;bldc.c: 1977: {
  7761                           ;bldc.c: 1979: LATC = ( LATC & 0b11100101 ) | 0b00001010;
  7762  1B7A  2779  319A         	fcall	PL74	;call to abstracted procedure
  7763  1B7C                     l6076:	
  7764                           
  7765                           ;bldc.c: 1981: }
  7766                           ;bldc.c: 1984: LATC2 = 0;
  7767                           
  7768                           ;bldc.c: 1986: LATB1 = 1;
  7769                           
  7770                           ;bldc.c: 1987: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
  7771                           
  7772                           ;bldc.c: 1988: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
  7773                           
  7774                           ;bldc.c: 1989: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
  7775                           
  7776                           ;bldc.c: 1990: CM1CON1 = 0x02;
  7777                           
  7778                           ;bldc.c: 2004: CM1CON0 = 0x94;
  7779                           
  7780                           ;bldc.c: 2005: rising_bemf_flag = 0;
  7781  1B7C  270E  319A         	fcall	PL38	;call to abstracted procedure
  7782  1B7E  2B95               	goto	L10
  7783  1B7F                     l6094:	
  7784                           ;bldc.c: 2011: break;
  7785                           
  7786                           ;bldc.c: 2006: comm_state = 3;
  7787                           
  7788                           
  7789                           ;bldc.c: 2020: {
  7790                           ;bldc.c: 2026: PSTR1CON = 0b00000100;
  7791  1B7F  3004               	movlw	4
  7792  1B80  0025               	movlb	5	; select bank5
  7793  1B81  0096               	movwf	22	;volatile
  7794                           
  7795                           ;bldc.c: 2029: if( MotorFlags.bits.B6 )
  7796  1B82  0020               	movlb	0	; select bank0
  7797  1B83  1F63               	btfss	_MotorFlags,6
  7798  1B84  2B87               	goto	l6100
  7799                           
  7800                           ;bldc.c: 2031: {
  7801                           ;bldc.c: 2033: LATC = ( LATC & 0b11100101 ) | 0b00010010;
  7802  1B85  277F  319A         	fcall	PL78	;call to abstracted procedure
  7803  1B87                     l6100:	
  7804                           
  7805                           ;bldc.c: 2035: }
  7806                           ;bldc.c: 2038: LATC2 = 0;
  7807                           
  7808                           ;bldc.c: 2039: LATB2 = 0;
  7809                           
  7810                           ;bldc.c: 2041: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
  7811                           
  7812                           ;bldc.c: 2042: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
  7813                           
  7814                           ;bldc.c: 2043: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
  7815                           
  7816                           ;bldc.c: 2044: CM1CON1 = 0x01;
  7817                           
  7818                           ;bldc.c: 2059: CM1CON0 = 0x84;
  7819                           
  7820                           ;bldc.c: 2060: rising_bemf_flag = 1;
  7821  1B87  26FD  319A         	fcall	PL36	;call to abstracted procedure
  7822  1B89                     L9:	
  7823  1B89  1468               	bsf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  7824                           
  7825                           ;bldc.c: 2061: comm_state = 4;
  7826  1B8A  2B96               	goto	L7
  7827  1B8B                     l6118:	
  7828                           ;bldc.c: 2066: break;
  7829                           
  7830                           
  7831                           ;bldc.c: 2076: {
  7832                           ;bldc.c: 2081: PSTR1CON = 0b00000100;
  7833  1B8B  3004               	movlw	4
  7834  1B8C  0025               	movlb	5	; select bank5
  7835  1B8D  0096               	movwf	22	;volatile
  7836                           
  7837                           ;bldc.c: 2084: if( MotorFlags.bits.B6 )
  7838  1B8E  0020               	movlb	0	; select bank0
  7839  1B8F  1F63               	btfss	_MotorFlags,6
  7840  1B90  2B93               	goto	l6124
  7841                           
  7842                           ;bldc.c: 2086: {
  7843                           ;bldc.c: 2088: LATC = ( LATC & 0b11100101 ) | 0b00011000;
  7844  1B91  2773  319A         	fcall	PL70	;call to abstracted procedure
  7845  1B93                     l6124:	
  7846                           
  7847                           ;bldc.c: 2090: }
  7848                           ;bldc.c: 2093: LATC2 = 1;
  7849                           
  7850                           ;bldc.c: 2094: LATB2 = 0;
  7851                           
  7852                           ;bldc.c: 2096: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
  7853                           
  7854                           ;bldc.c: 2097: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
  7855                           
  7856                           ;bldc.c: 2098: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
  7857                           
  7858                           ;bldc.c: 2099: CM1CON1 = 0x00;
  7859                           
  7860                           ;bldc.c: 2113: CM1CON0 = 0x94;
  7861                           
  7862                           ;bldc.c: 2114: rising_bemf_flag = 0;
  7863  1B93  2730  319A         	fcall	PL42	;call to abstracted procedure
  7864  1B95                     L10:	
  7865  1B95  1068               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  7866  1B96                     L7:	
  7867                           
  7868                           ;bldc.c: 2115: comm_state = 5;
  7869  1B96  0021               	movlb	1	; select bank1
  7870  1B97  00E4               	movwf	_comm_state^(0+128)
  7871                           
  7872                           ;bldc.c: 2120: break;
  7873  1B98  2BB0               	goto	l6148
  7874  1B99                     l6138:	
  7875                           
  7876                           ;bldc.c: 2129: {
  7877                           ;bldc.c: 2131: PSTR1CON = 0x00;
  7878                           
  7879                           ;bldc.c: 2132: CM1CON0 = 0x00;
  7880  1B99  27C2  319A         	fcall	PL128	;call to abstracted procedure
  7881  1B9B  2B66               	goto	l6046
  7882  1B9C                     l6146:	
  7883  1B9C  0864               	movf	_comm_state^(0+128),w
  7884                           
  7885                           ; Switch size 1, requested type "space"
  7886                           ; Number of cases is 6, Range of values is 1 to 6
  7887                           ; switch strategies available:
  7888                           ; Name         Instructions Cycles
  7889                           ; simple_byte           19    10 (average)
  7890                           ; direct_byte           21     9 (fixed)
  7891                           ; jumptable            263     9 (fixed)
  7892                           ;	Chosen strategy is simple_byte
  7893  1B9D  3A01               	xorlw	1	; case 1
  7894  1B9E  1903               	skipnz
  7895  1B9F  2B51               	goto	l6002
  7896  1BA0  3A03               	xorlw	3	; case 2
  7897  1BA1  1903               	skipnz
  7898  1BA2  2B5C               	goto	l6026
  7899  1BA3  3A01               	xorlw	1	; case 3
  7900  1BA4  1903               	skipnz
  7901  1BA5  2B69               	goto	l6050
  7902  1BA6  3A07               	xorlw	7	; case 4
  7903  1BA7  1903               	skipnz
  7904  1BA8  2B74               	goto	l6070
  7905  1BA9  3A01               	xorlw	1	; case 5
  7906  1BAA  1903               	skipnz
  7907  1BAB  2B7F               	goto	l6094
  7908  1BAC  3A03               	xorlw	3	; case 6
  7909  1BAD  1903               	skipnz
  7910  1BAE  2B8B               	goto	l6118
  7911  1BAF  2B99               	goto	l6138
  7912  1BB0                     l6148:	
  7913                           
  7914                           ;bldc.c: 2146: {
  7915                           ;bldc.c: 2148: ui8_BlankingCount = ( unsigned char ) ( 0.002 * 20000UL );
  7916                           
  7917                           ;bldc.c: 2158: }
  7918                           ;bldc.c: 2161: comm_time = 0;
  7919                           
  7920                           ;bldc.c: 2150: }
  7921  1BB0  2F92               	ljmp	PL92	;call to abstracted procedure
  7922  1BB1                     __end_of_commutate:	
  7923  1BB1                     __ptext51:	
  7924 ;; *************** function _interrrupt_bldc *****************
  7925 ;; Defined at:
  7926 ;;		line 281 in file "../bldc.c"
  7927 ;; Parameters:    Size  Location     Type
  7928 ;;		None
  7929 ;; Auto vars:     Size  Location     Type
  7930 ;;  ui32_tmp        4    0[BANK0 ] unsigned long 
  7931 ;; Return value:  Size  Location     Type
  7932 ;;                  1    wreg      void 
  7933 ;; Registers used:
  7934 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7935 ;; Tracked objects:
  7936 ;;		On entry : 1F/0
  7937 ;;		On exit  : 1C/0
  7938 ;;		Unchanged: 0/0
  7939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7940 ;;      Params:         0       0       0       0       0       0       0       0
  7941 ;;      Locals:         0       4       0       0       0       0       0       0
  7942 ;;      Temps:          2       0       0       0       0       0       0       0
  7943 ;;      Totals:         2       4       0       0       0       0       0       0
  7944 ;;Total ram usage:        6 bytes
  7945 ;; Hardware stack levels used:    1
  7946 ;; Hardware stack levels required when called:    1
  7947 ;; This function calls:
  7948 ;;		_BLDCWait
  7949 ;;		i1_ADC_Read
  7950 ;;		i1_ADC_Wait
  7951 ;;		i1___lwdiv
  7952 ;;		i1___wmul
  7953 ;;		i1_commutate
  7954 ;; This function is called by:
  7955 ;;		_interrupt_handler
  7956 ;; This function uses a non-reentrant model
  7957 ;;
  7958                           
  7959                           
  7960                           ;psect for function _interrrupt_bldc
  7961  1BB1                     _interrrupt_bldc:	
  7962                           
  7963                           ;bldc.c: 286: unsigned long ui32_tmp ;
  7964                           ;bldc.c: 288: ++comm_time ;
  7965                           
  7966                           ;incstack = 0
  7967                           ; Regs used in _interrrupt_bldc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7968  1BB1  0ADA               	incf	_comm_time,f
  7969  1BB2  1903               	skipnz
  7970  1BB3  0ADB               	incf	_comm_time+1,f
  7971                           
  7972                           ;bldc.c: 291: if( comm_time > ui16_comm_time_max )
  7973  1BB4  085B               	movf	_comm_time+1,w
  7974  1BB5  0022               	movlb	2	; select bank2
  7975  1BB6  0232               	subwf	(_ui16_comm_time_max+1)^(0+256),w
  7976  1BB7  1D03               	skipz
  7977  1BB8  2BBD               	goto	u1076_25
  7978  1BB9  0020               	movlb	0	; select bank0
  7979  1BBA  085A               	movf	_comm_time,w
  7980  1BBB  0022               	movlb	2	; select bank2
  7981  1BBC  0231               	subwf	_ui16_comm_time_max^(0+256),w
  7982  1BBD                     u1076_25:	
  7983  1BBD  1803               	skipnc
  7984  1BBE  2BC1               	goto	i1l12534
  7985                           
  7986                           ;bldc.c: 294: {
  7987                           ;bldc.c: 296: commutate( );
  7988  1BBF  2583  319A         	fcall	i1_commutate
  7989  1BC1                     i1l12534:	
  7990                           
  7991                           ;bldc.c: 298: }
  7992                           ;bldc.c: 302: if( ui16_step_cnt < 10 )
  7993  1BC1  3000               	movlw	0
  7994  1BC2  0021               	movlb	1	; select bank1
  7995  1BC3  0239               	subwf	(_ui16_step_cnt+1)^(0+128),w
  7996  1BC4  300A               	movlw	10
  7997  1BC5  1903               	skipnz
  7998  1BC6  0238               	subwf	_ui16_step_cnt^(0+128),w
  7999  1BC7  1C03               	btfss	3,0
  8000  1BC8  2BCB               	goto	i1l12538
  8001                           
  8002                           ;bldc.c: 311: else
  8003                           ;bldc.c: 312: {
  8004                           ;bldc.c: 322: MotorFlags.bits.B3 = 0;
  8005  1BC9  0020               	movlb	0	; select bank0
  8006  1BCA  11E3               	bcf	_MotorFlags,3
  8007  1BCB                     i1l12538:	
  8008                           
  8009                           ;bldc.c: 328: }
  8010                           ;bldc.c: 331: if (ui16_step_cnt >= 3 )
  8011  1BCB  3000               	movlw	0
  8012  1BCC  0021               	movlb	1	; select bank1
  8013  1BCD  0239               	subwf	(_ui16_step_cnt+1)^(0+128),w
  8014  1BCE  3003               	movlw	3
  8015  1BCF  1903               	skipnz
  8016  1BD0  0238               	subwf	_ui16_step_cnt^(0+128),w
  8017  1BD1  1C03               	skipc
  8018  1BD2  2BD5               	goto	i1l12542
  8019                           
  8020                           ;bldc.c: 333: {
  8021                           ;bldc.c: 335: MotorFlags.bits.B4 = 0 ;
  8022  1BD3  0020               	movlb	0	; select bank0
  8023  1BD4  1263               	bcf	_MotorFlags,4
  8024  1BD5                     i1l12542:	
  8025                           
  8026                           ;bldc.c: 337: }
  8027                           ;bldc.c: 340: BLDCWait( );
  8028  1BD5  2686  319A         	fcall	_BLDCWait
  8029                           
  8030                           ;bldc.c: 346: if( C1OUT )
  8031  1BD7  0022               	movlb	2	; select bank2
  8032  1BD8  1F11               	btfss	17,6	;volatile
  8033  1BD9  2BDD               	goto	i1l263
  8034                           
  8035                           ;bldc.c: 349: {
  8036                           ;bldc.c: 351: ui8_CompFlag = 0x00;
  8037  1BDA  0021               	movlb	1	; select bank1
  8038  1BDB  01DE               	clrf	_ui8_CompFlag^(0+128)
  8039                           
  8040                           ;bldc.c: 353: }
  8041  1BDC  2CE5               	goto	i1l12724
  8042  1BDD                     i1l263:	
  8043                           
  8044                           ;bldc.c: 356: else
  8045                           ;bldc.c: 357: {
  8046                           ;bldc.c: 362: ui8_CompFlag = 0x01;
  8047  1BDD  0021               	movlb	1	; select bank1
  8048  1BDE  01DE               	clrf	_ui8_CompFlag^(0+128)
  8049  1BDF  0ADE               	incf	_ui8_CompFlag^(0+128),f
  8050  1BE0  2CE5               	goto	i1l12724
  8051  1BE1                     i1l12548:	
  8052                           
  8053                           ;bldc.c: 378: {
  8054                           ;bldc.c: 384: ( ADCON0 = ( 0x0B << 2 ) | 0x01 );
  8055  1BE1  302D               	movlw	45
  8056  1BE2  009D               	movwf	29	;volatile
  8057                           
  8058                           ;bldc.c: 387: ADC_Wait( );
  8059  1BE3  2547  319A         	fcall	i1_ADC_Wait
  8060                           
  8061                           ;bldc.c: 391: ( GO_nDONE = 1 );
  8062  1BE5  0021               	movlb	1	; select bank1
  8063  1BE6  149D               	bsf	29,1	;volatile
  8064                           
  8065                           ;bldc.c: 396: ui16_NTC_Temp_bldc = ADC_Read( );
  8066  1BE7  2560  319A         	fcall	i1_ADC_Read
  8067  1BE9  0871               	movf	?i1_ADC_Read+1,w
  8068  1BEA  0023               	movlb	3	; select bank3
  8069  1BEB  00E5               	movwf	(_ui16_NTC_Temp_bldc+1)^(0+384)
  8070  1BEC  0870               	movf	?i1_ADC_Read,w
  8071  1BED  00E4               	movwf	_ui16_NTC_Temp_bldc^(0+384)
  8072                           
  8073                           ;bldc.c: 400: ( ADCON0 = ( 0x0C << 2 ) | 0x01 );
  8074  1BEE  3031               	movlw	49
  8075  1BEF  0021               	movlb	1	; select bank1
  8076  1BF0                     L48:	
  8077  1BF0  009D               	movwf	29	;volatile
  8078  1BF1                     L43:	
  8079                           
  8080                           ;bldc.c: 403: ADC_Wait( );
  8081  1BF1  2547  319A         	fcall	i1_ADC_Wait
  8082                           
  8083                           ;bldc.c: 407: ( GO_nDONE = 1 );
  8084  1BF3  0021               	movlb	1	; select bank1
  8085  1BF4  149D               	bsf	29,1	;volatile
  8086  1BF5                     i1l12558:	
  8087                           
  8088                           ;bldc.c: 410: ui8_sampleState++;
  8089  1BF5  0021               	movlb	1	; select bank1
  8090  1BF6  0ADF               	incf	_ui8_sampleState^(0+128),f
  8091                           
  8092                           ;bldc.c: 413: break;
  8093  1BF7  2CF2               	goto	i1l267
  8094  1BF8                     i1l12560:	
  8095                           
  8096                           ;bldc.c: 421: {
  8097                           ;bldc.c: 427: ( ADCON0 = ui8_Ubemf_sel );
  8098  1BF8  0860               	movf	_ui8_Ubemf_sel^(0+128),w
  8099  1BF9  009D               	movwf	29	;volatile
  8100                           
  8101                           ;bldc.c: 444: ui16_Ubat_bldc.b.lo = ADRESL;
  8102  1BFA  081B               	movf	27,w	;volatile
  8103  1BFB  0020               	movlb	0	; select bank0
  8104  1BFC  00E6               	movwf	_ui16_Ubat_bldc	;volatile
  8105                           
  8106                           ;bldc.c: 445: ui16_Ubat_bldc.b.hi = ADRESH;
  8107  1BFD  0021               	movlb	1	; select bank1
  8108  1BFE  081C               	movf	28,w	;volatile
  8109  1BFF  0020               	movlb	0	; select bank0
  8110  1C00  00E7               	movwf	_ui16_Ubat_bldc+1	;volatile
  8111                           
  8112                           ;bldc.c: 454: __nop();
  8113  1C01  0000               	nop
  8114                           
  8115                           ;bldc.c: 455: __nop();
  8116  1C02  0000               	nop
  8117                           
  8118                           ;bldc.c: 456: __nop();
  8119  1C03  0000               	nop
  8120                           
  8121                           ;bldc.c: 457: __nop();
  8122  1C04  0000               	nop
  8123                           
  8124                           ;bldc.c: 458: __nop();
  8125  1C05  0000               	nop
  8126                           
  8127                           ;bldc.c: 459: __nop();
  8128  1C06  0000               	nop
  8129                           
  8130                           ;bldc.c: 460: __nop();
  8131  1C07  0000               	nop
  8132                           
  8133                           ;bldc.c: 461: __nop();
  8134  1C08  0000               	nop
  8135                           
  8136                           ;bldc.c: 463: __nop();
  8137  1C09  0000               	nop
  8138                           
  8139                           ;bldc.c: 464: __nop();
  8140  1C0A  0000               	nop
  8141                           
  8142                           ;bldc.c: 465: __nop();
  8143  1C0B  0000               	nop
  8144                           
  8145                           ;bldc.c: 466: __nop();
  8146  1C0C  0000               	nop
  8147                           
  8148                           ;bldc.c: 467: __nop();
  8149  1C0D  0000               	nop
  8150                           
  8151                           ;bldc.c: 468: __nop();
  8152  1C0E  0000               	nop
  8153                           
  8154                           ;bldc.c: 469: __nop();
  8155  1C0F  0000               	nop
  8156                           
  8157                           ;bldc.c: 470: __nop();
  8158  1C10  0000               	nop
  8159  1C11  2BF1               	goto	L43
  8160  1C12                     i1l12600:	
  8161                           ;bldc.c: 474: ADC_Wait();
  8162                           
  8163                           
  8164                           ;bldc.c: 491: {
  8165                           ;bldc.c: 505: ui16_Ubemf_bldc.b.lo = ADRESL;
  8166  1C12  081B               	movf	27,w	;volatile
  8167  1C13  00B4               	movwf	_ui16_Ubemf_bldc^(0+128)	;volatile
  8168                           
  8169                           ;bldc.c: 506: ui16_Ubemf_bldc.b.hi = ADRESH;
  8170  1C14  081C               	movf	28,w	;volatile
  8171  1C15  00B5               	movwf	(_ui16_Ubemf_bldc^(0+128)+1)	;volatile
  8172                           
  8173                           ;bldc.c: 511: ( GO_nDONE = 1 );
  8174  1C16  149D               	bsf	29,1	;volatile
  8175                           
  8176                           ;bldc.c: 519: if( ( MotorFlags.bits.B6 ) && ( ui8_duty_cycle_BLDC != 0 ) )
  8177  1C17  0020               	movlb	0	; select bank0
  8178  1C18  1F63               	btfss	_MotorFlags,6
  8179  1C19  2C2F               	goto	i1l12612
  8180  1C1A  0864               	movf	_ui8_duty_cycle_BLDC,w
  8181  1C1B  1903               	btfsc	3,2
  8182  1C1C  2C2F               	goto	i1l12612
  8183                           
  8184                           ;bldc.c: 521: {
  8185                           ;bldc.c: 523: if( rising_bemf_flag )
  8186  1C1D  1C68               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  8187  1C1E  2C38               	goto	i1l12620
  8188                           
  8189                           ;bldc.c: 525: {
  8190                           ;bldc.c: 527: if( ( ui16_Ubemf_bldc.w + 100 ) < ( ui16_Ubat_bldc.w ))
  8191  1C1F  0021               	movlb	1	; select bank1
  8192  1C20  0834               	movf	_ui16_Ubemf_bldc^(0+128),w	;volatile
  8193  1C21  3E64               	addlw	100
  8194  1C22  00FC               	movwf	??_interrrupt_bldc
  8195  1C23  3000               	movlw	0
  8196  1C24  3D35               	addwfc	(_ui16_Ubemf_bldc+1)^(0+128),w	;volatile
  8197  1C25  00FD               	movwf	??_interrrupt_bldc+1
  8198  1C26  0020               	movlb	0	; select bank0
  8199  1C27  0867               	movf	_ui16_Ubat_bldc+1,w	;volatile
  8200  1C28  027D               	subwf	??_interrrupt_bldc+1,w
  8201  1C29  1D03               	skipz
  8202  1C2A  2C2D               	goto	u1083_25
  8203  1C2B  0866               	movf	_ui16_Ubat_bldc,w	;volatile
  8204  1C2C  027C               	subwf	??_interrrupt_bldc,w
  8205  1C2D                     u1083_25:	
  8206  1C2D  1803               	skipnc
  8207  1C2E  2CF2               	goto	i1l267
  8208  1C2F                     i1l12612:	
  8209                           
  8210                           ;bldc.c: 530: {
  8211                           ;bldc.c: 534: ui8_sampleState++;
  8212  1C2F  0021               	movlb	1	; select bank1
  8213  1C30  0ADF               	incf	_ui8_sampleState^(0+128),f
  8214                           
  8215                           ;bldc.c: 538: ( ADCON0 = ui8_UPhase_sel );
  8216  1C31  0861               	movf	_ui8_UPhase_sel^(0+128),w
  8217  1C32  009D               	movwf	29	;volatile
  8218                           
  8219                           ;bldc.c: 540: ADC_Wait( );
  8220  1C33  2547  319A         	fcall	i1_ADC_Wait
  8221                           
  8222                           ;bldc.c: 544: ( GO_nDONE = 1 );
  8223  1C35  0021               	movlb	1	; select bank1
  8224  1C36  149D               	bsf	29,1	;volatile
  8225                           
  8226                           ;bldc.c: 547: }
  8227  1C37  2CF2               	goto	i1l267
  8228  1C38                     i1l12620:	
  8229                           
  8230                           ;bldc.c: 562: else
  8231                           ;bldc.c: 563: {
  8232                           ;bldc.c: 565: if( ( ui16_Ubemf_bldc.w ) > ( 30 ) )
  8233  1C38  3000               	movlw	0
  8234  1C39  0021               	movlb	1	; select bank1
  8235  1C3A  0235               	subwf	(_ui16_Ubemf_bldc+1)^(0+128),w	;volatile
  8236  1C3B  301F               	movlw	31
  8237  1C3C  1903               	skipnz
  8238  1C3D  0234               	subwf	_ui16_Ubemf_bldc^(0+128),w	;volatile
  8239  1C3E  1803               	btfsc	3,0
  8240  1C3F  2C2F               	goto	i1l12612
  8241  1C40  2CF2               	goto	i1l267
  8242  1C41                     i1l12638:	
  8243                           ;bldc.c: 593: }
  8244                           ;bldc.c: 596: }
  8245                           ;bldc.c: 601: }
  8246                           
  8247                           
  8248                           ;bldc.c: 665: ui8_BlankingCount = 0;
  8249  1C41  01E3               	clrf	_ui8_BlankingCount^(0+128)
  8250                           
  8251                           ;bldc.c: 671: ui16_UPhase_bldc = ADC_Read( );
  8252  1C42  2560  319A         	fcall	i1_ADC_Read
  8253                           
  8254                           ;bldc.c: 675: if ( ui8_error_Flags.bits.B1 == 1)
  8255  1C44  0020               	movlb	0	; select bank0
  8256  1C45  1CE5               	btfss	_ui8_error_Flags,1
  8257  1C46  2C50               	goto	i1l12652
  8258                           
  8259                           ;bldc.c: 677: {
  8260                           ;bldc.c: 679: ( ADCON0 = ui8_IPhase_sel );
  8261  1C47  0021               	movlb	1	; select bank1
  8262  1C48  0862               	movf	_ui8_IPhase_sel^(0+128),w
  8263  1C49  009D               	movwf	29	;volatile
  8264                           
  8265                           ;bldc.c: 682: ADC_Wait( );
  8266  1C4A  2547  319A         	fcall	i1_ADC_Wait
  8267                           
  8268                           ;bldc.c: 683: ( GO_nDONE = 1 );
  8269  1C4C  0021               	movlb	1	; select bank1
  8270  1C4D  149D               	bsf	29,1	;volatile
  8271                           
  8272                           ;bldc.c: 686: ui8_sampleState = 9;
  8273  1C4E  3009               	movlw	9
  8274  1C4F  2CE3               	goto	L44
  8275  1C50                     i1l12652:	
  8276                           ;bldc.c: 688: }
  8277                           
  8278                           
  8279                           ;bldc.c: 691: else
  8280                           ;bldc.c: 692: {
  8281                           ;bldc.c: 694: ( ADCON0 = ( 0x1D << 2 ) | 0x01 );
  8282  1C50  3075               	movlw	117
  8283  1C51  0021               	movlb	1	; select bank1
  8284  1C52  009D               	movwf	29	;volatile
  8285                           
  8286                           ;bldc.c: 697: ADC_Wait( );
  8287  1C53  2547  319A         	fcall	i1_ADC_Wait
  8288  1C55  2BF5               	goto	i1l12558
  8289  1C56                     i1l284:	
  8290                           ;bldc.c: 754: }
  8291                           ;bldc.c: 757: case 8:
  8292                           
  8293                           
  8294                           ;bldc.c: 759: {
  8295                           ;bldc.c: 764: ( GO_nDONE = 1 );
  8296  1C56  149D               	bsf	29,1	;volatile
  8297                           
  8298                           ;bldc.c: 769: ui16_CPU_Temp_bldc = ADC_Read( );
  8299  1C57  2560  319A         	fcall	i1_ADC_Read
  8300                           
  8301                           ;bldc.c: 773: ( ADCON0 = ui8_IPhase_sel );
  8302  1C59  0862               	movf	_ui8_IPhase_sel^(0+128),w
  8303  1C5A  2BF0               	goto	L48
  8304  1C5B                     i1l12672:	
  8305                           ;bldc.c: 776: ADC_Wait( );
  8306                           
  8307                           
  8308                           ;bldc.c: 795: {
  8309                           ;bldc.c: 802: ui16_IPhase_bldc.w = ADC_Read( );
  8310  1C5B  2560  319A         	fcall	i1_ADC_Read
  8311  1C5D  0871               	movf	?i1_ADC_Read+1,w
  8312  1C5E  0020               	movlb	0	; select bank0
  8313  1C5F  00D9               	movwf	_ui16_IPhase_bldc+1	;volatile
  8314  1C60  0870               	movf	?i1_ADC_Read,w
  8315  1C61  00D8               	movwf	_ui16_IPhase_bldc	;volatile
  8316                           
  8317                           ;bldc.c: 806: if (MotorFlags.bits.B6)
  8318  1C62  1B63               	btfsc	_MotorFlags,6
  8319  1C63  2CB5               	goto	i1l12698
  8320  1C64  2CC1               	goto	i1l12700
  8321  1C65                     i1l12678:	
  8322                           
  8323                           ;bldc.c: 816: {
  8324                           ;bldc.c: 818: if (ui16_IPhase_bldc.w > ( (unsigned int) ui8_current_cal[0]) )
  8325  1C65  0022               	movlb	2	; select bank2
  8326  1C66  0820               	movf	_ui8_current_cal^(0+256),w
  8327  1C67  2760  319A         	fcall	PL48	;call to abstracted procedure
  8328  1C69  1803               	skipnc
  8329  1C6A  2C7C               	goto	i1l12682
  8330                           
  8331                           ;bldc.c: 820: {
  8332                           ;bldc.c: 822: ui16_IPhase1_bldc.w = (((ui16_IPhase_bldc.w - ui8_current_cal[0])*ui16_I_c
      +                          al_Ph1)>>8);
  8333  1C6B  2785  319A         	fcall	PL84	;call to abstracted procedure
  8334  1C6D  0820               	movf	_ui8_current_cal^(0+256),w
  8335  1C6E  02F0               	subwf	i1___wmul@multiplier,f
  8336  1C6F  1C03               	skipc
  8337  1C70  03F1               	decf	i1___wmul@multiplier+1,f
  8338  1C71  0021               	movlb	1	; select bank1
  8339  1C72  086D               	movf	(_ui16_I_cal_Ph1+1)^(0+128),w
  8340  1C73  00F3               	movwf	i1___wmul@multiplicand+1
  8341  1C74  086C               	movf	_ui16_I_cal_Ph1^(0+128),w
  8342  1C75  00F2               	movwf	i1___wmul@multiplicand
  8343  1C76  256E  319A         	fcall	i1___wmul
  8344  1C78  0871               	movf	?i1___wmul+1,w
  8345  1C79  0022               	movlb	2	; select bank2
  8346  1C7A  00BB               	movwf	_ui16_IPhase1_bldc^(0+256)	;volatile
  8347  1C7B  2C7E               	goto	L45
  8348  1C7C                     i1l12682:	
  8349                           ;bldc.c: 824: }
  8350                           
  8351                           
  8352                           ;bldc.c: 827: else
  8353                           ;bldc.c: 828: {
  8354                           ;bldc.c: 830: ui16_IPhase1_bldc.w = 0 ;
  8355  1C7C  0022               	movlb	2	; select bank2
  8356  1C7D  01BB               	clrf	_ui16_IPhase1_bldc^(0+256)	;volatile
  8357  1C7E                     L45:	
  8358  1C7E  01BC               	clrf	(_ui16_IPhase1_bldc+1)^(0+256)	;volatile
  8359  1C7F  2CC9               	goto	i1l12702
  8360  1C80                     i1l12684:	
  8361                           
  8362                           ;bldc.c: 842: {
  8363                           ;bldc.c: 844: if (ui16_IPhase_bldc.w > ( (unsigned int) ui8_current_cal[1] ) )
  8364  1C80  0022               	movlb	2	; select bank2
  8365  1C81  0821               	movf	(_ui8_current_cal^(0+256)+1),w
  8366  1C82  2760  319A         	fcall	PL48	;call to abstracted procedure
  8367  1C84  1803               	skipnc
  8368  1C85  2C97               	goto	i1l12688
  8369                           
  8370                           ;bldc.c: 846: {
  8371                           ;bldc.c: 848: ui16_IPhase2_bldc.w = (((ui16_IPhase_bldc.w - ui8_current_cal[1])*ui16_I_c
      +                          al_Ph2)>>8);
  8372  1C86  2785  319A         	fcall	PL84	;call to abstracted procedure
  8373  1C88  0821               	movf	(_ui8_current_cal^(0+256)+1),w
  8374  1C89  02F0               	subwf	i1___wmul@multiplier,f
  8375  1C8A  1C03               	skipc
  8376  1C8B  03F1               	decf	i1___wmul@multiplier+1,f
  8377  1C8C  0021               	movlb	1	; select bank1
  8378  1C8D  086B               	movf	(_ui16_I_cal_Ph2+1)^(0+128),w
  8379  1C8E  00F3               	movwf	i1___wmul@multiplicand+1
  8380  1C8F  086A               	movf	_ui16_I_cal_Ph2^(0+128),w
  8381  1C90  00F2               	movwf	i1___wmul@multiplicand
  8382  1C91  256E  319A         	fcall	i1___wmul
  8383  1C93  0871               	movf	?i1___wmul+1,w
  8384  1C94  0023               	movlb	3	; select bank3
  8385  1C95  00D4               	movwf	_ui16_IPhase2_bldc^(0+384)	;volatile
  8386  1C96  2C99               	goto	L46
  8387  1C97                     i1l12688:	
  8388                           ;bldc.c: 851: }
  8389                           
  8390                           
  8391                           ;bldc.c: 854: else
  8392                           ;bldc.c: 855: {
  8393                           ;bldc.c: 857: ui16_IPhase2_bldc.w = 0 ;
  8394  1C97  0023               	movlb	3	; select bank3
  8395  1C98  01D4               	clrf	_ui16_IPhase2_bldc^(0+384)	;volatile
  8396  1C99                     L46:	
  8397  1C99  01D5               	clrf	(_ui16_IPhase2_bldc+1)^(0+384)	;volatile
  8398  1C9A  2CC9               	goto	i1l12702
  8399  1C9B                     i1l12690:	
  8400                           
  8401                           ;bldc.c: 869: {
  8402                           ;bldc.c: 871: if (ui16_IPhase_bldc.w > ((unsigned int) ui8_current_cal[2]) )
  8403  1C9B  0022               	movlb	2	; select bank2
  8404  1C9C  0822               	movf	(_ui8_current_cal^(0+256)+2),w
  8405  1C9D  2760  319A         	fcall	PL48	;call to abstracted procedure
  8406  1C9F  1803               	skipnc
  8407  1CA0  2CB2               	goto	i1l12694
  8408                           
  8409                           ;bldc.c: 873: {
  8410                           ;bldc.c: 875: ui16_IPhase3_bldc.w = (((ui16_IPhase_bldc.w - ui8_current_cal[2])*ui16_I_c
      +                          al_Ph3)>>8);
  8411  1CA1  2785  319A         	fcall	PL84	;call to abstracted procedure
  8412  1CA3  0822               	movf	(_ui8_current_cal^(0+256)+2),w
  8413  1CA4  02F0               	subwf	i1___wmul@multiplier,f
  8414  1CA5  1C03               	skipc
  8415  1CA6  03F1               	decf	i1___wmul@multiplier+1,f
  8416  1CA7  0021               	movlb	1	; select bank1
  8417  1CA8  0869               	movf	(_ui16_I_cal_Ph3+1)^(0+128),w
  8418  1CA9  00F3               	movwf	i1___wmul@multiplicand+1
  8419  1CAA  0868               	movf	_ui16_I_cal_Ph3^(0+128),w
  8420  1CAB  00F2               	movwf	i1___wmul@multiplicand
  8421  1CAC  256E  319A         	fcall	i1___wmul
  8422  1CAE  0871               	movf	?i1___wmul+1,w
  8423  1CAF  0023               	movlb	3	; select bank3
  8424  1CB0  00D2               	movwf	_ui16_IPhase3_bldc^(0+384)	;volatile
  8425  1CB1  2CC8               	goto	L47
  8426  1CB2                     i1l12694:	
  8427                           ;bldc.c: 877: }
  8428                           
  8429                           
  8430                           ;bldc.c: 880: else
  8431                           ;bldc.c: 881: {
  8432                           ;bldc.c: 883: ui16_IPhase3_bldc.w = 0 ;
  8433  1CB2  0023               	movlb	3	; select bank3
  8434  1CB3  2CC7               	goto	L49
  8435  1CB4                     i1l12696:	
  8436  1CB4  2CC1               	goto	i1l12700
  8437  1CB5                     i1l12698:	
  8438                           ;bldc.c: 902: }
  8439                           ;bldc.c: 904: }
  8440                           
  8441                           ;bldc.c: 899: ui16_IPhase3_bldc.w = 0;
  8442                           
  8443                           ;bldc.c: 898: ui16_IPhase2_bldc.w = 0;
  8444                           
  8445                           ;bldc.c: 895: {
  8446                           ;bldc.c: 897: ui16_IPhase1_bldc.w = 0;
  8447                           
  8448  1CB5  0021               	movlb	1	; select bank1
  8449  1CB6  0862               	movf	_ui8_IPhase_sel^(0+128),w
  8450                           
  8451                           ; Switch size 1, requested type "space"
  8452                           ; Number of cases is 3, Range of values is 9 to 53
  8453                           ; switch strategies available:
  8454                           ; Name         Instructions Cycles
  8455                           ; simple_byte           10     6 (average)
  8456                           ; direct_byte           99     9 (fixed)
  8457                           ; jumptable            263     9 (fixed)
  8458                           ;	Chosen strategy is simple_byte
  8459  1CB7  3A09               	xorlw	9	; case 9
  8460  1CB8  1903               	skipnz
  8461  1CB9  2C65               	goto	i1l12678
  8462  1CBA  3A18               	xorlw	24	; case 17
  8463  1CBB  1903               	skipnz
  8464  1CBC  2C9B               	goto	i1l12690
  8465  1CBD  3A24               	xorlw	36	; case 53
  8466  1CBE  1903               	skipnz
  8467  1CBF  2C80               	goto	i1l12684
  8468  1CC0  2CB4               	goto	i1l12696
  8469  1CC1                     i1l12700:	
  8470                           
  8471                           ;bldc.c: 910: else
  8472                           ;bldc.c: 911: {
  8473                           ;bldc.c: 913: ui16_IPhase1_bldc.w = 0;
  8474  1CC1  0022               	movlb	2	; select bank2
  8475  1CC2  01BB               	clrf	_ui16_IPhase1_bldc^(0+256)	;volatile
  8476  1CC3  01BC               	clrf	(_ui16_IPhase1_bldc+1)^(0+256)	;volatile
  8477                           
  8478                           ;bldc.c: 914: ui16_IPhase2_bldc.w = 0;
  8479  1CC4  0023               	movlb	3	; select bank3
  8480  1CC5  01D4               	clrf	_ui16_IPhase2_bldc^(0+384)	;volatile
  8481  1CC6  01D5               	clrf	(_ui16_IPhase2_bldc+1)^(0+384)	;volatile
  8482  1CC7                     L49:	
  8483                           
  8484                           ;bldc.c: 915: ui16_IPhase3_bldc.w = 0;
  8485  1CC7  01D2               	clrf	_ui16_IPhase3_bldc^(0+384)	;volatile
  8486  1CC8                     L47:	
  8487  1CC8  01D3               	clrf	(_ui16_IPhase3_bldc+1)^(0+384)	;volatile
  8488  1CC9                     i1l12702:	
  8489                           
  8490                           ;bldc.c: 918: }
  8491                           ;bldc.c: 956: if( (ui16_IPhase_bldc.w > 1000+40) )
  8492  1CC9  3004               	movlw	4
  8493  1CCA  0020               	movlb	0	; select bank0
  8494  1CCB  0259               	subwf	_ui16_IPhase_bldc+1,w	;volatile
  8495  1CCC  3011               	movlw	17
  8496  1CCD  1903               	skipnz
  8497  1CCE  0258               	subwf	_ui16_IPhase_bldc,w	;volatile
  8498  1CCF  1C03               	skipc
  8499  1CD0  2CD5               	goto	i1l12708
  8500  1CD1  30E5               	movlw	229
  8501                           
  8502                           ;bldc.c: 958: {
  8503                           ;bldc.c: 960: MotorFlags.bits.B0 = 1;
  8504  1CD2  1463               	bsf	_MotorFlags,0
  8505                           
  8506                           ;bldc.c: 964: LATC = LATC & 0b11100101;
  8507  1CD3  0022               	movlb	2	; select bank2
  8508  1CD4  058E               	andwf	14,f	;volatile
  8509  1CD5                     i1l12708:	
  8510                           ;bldc.c: 970: }
  8511                           
  8512                           
  8513                           ;bldc.c: 978: }
  8514                           ;bldc.c: 984: ADC_Wait( );
  8515  1CD5  2547  319A         	fcall	i1_ADC_Wait
  8516                           
  8517                           ;bldc.c: 988: ( GO_nDONE = 1 );
  8518  1CD7  0021               	movlb	1	; select bank1
  8519  1CD8  149D               	bsf	29,1	;volatile
  8520                           
  8521                           ;bldc.c: 991: if (ui8_error_Flags.bits.B1 == 1)
  8522  1CD9  0020               	movlb	0	; select bank0
  8523  1CDA  1CE5               	btfss	_ui8_error_Flags,1
  8524  1CDB  2BF5               	goto	i1l12558
  8525                           
  8526                           ;bldc.c: 993: {
  8527                           ;bldc.c: 995: ( ADCON0 = ( 0x1D << 2 ) | 0x01 );
  8528  1CDC  3075               	movlw	117
  8529  1CDD  0021               	movlb	1	; select bank1
  8530  1CDE  009D               	movwf	29	;volatile
  8531                           
  8532                           ;bldc.c: 998: ADC_Wait( );
  8533  1CDF  2547  319A         	fcall	i1_ADC_Wait
  8534                           
  8535                           ;bldc.c: 1001: ui8_sampleState = 5;
  8536  1CE1  3005               	movlw	5
  8537  1CE2  0021               	movlb	1	; select bank1
  8538  1CE3                     L44:	
  8539  1CE3  00DF               	movwf	_ui8_sampleState^(0+128)
  8540                           
  8541                           ;bldc.c: 1003: }
  8542  1CE4  2CF2               	goto	i1l267
  8543  1CE5                     i1l12724:	
  8544  1CE5  085F               	movf	_ui8_sampleState^(0+128),w
  8545                           
  8546                           ; Switch size 1, requested type "space"
  8547                           ; Number of cases is 10, Range of values is 1 to 10
  8548                           ; switch strategies available:
  8549                           ; Name         Instructions Cycles
  8550                           ; direct_byte           29     9 (fixed)
  8551                           ; simple_byte           31    16 (average)
  8552                           ; jumptable            263     9 (fixed)
  8553                           ;	Chosen strategy is direct_byte
  8554  1CE6  3EFF               	addlw	-1
  8555  1CE7  1C03               	skipc
  8556  1CE8  2CF2               	goto	i1l267
  8557  1CE9  0084               	movwf	4
  8558  1CEA  300A               	movlw	10
  8559  1CEB  0204               	subwf	4,w
  8560  1CEC  1803               	skipnc
  8561  1CED  2CF2               	goto	i1l267
  8562  1CEE  3187               	movlp	high i1S14502
  8563  1CEF  3504               	lslf	4,w
  8564  1CF0  3E2B               	addlw	low i1S14502
  8565  1CF1  0082               	movwf	2
  8566  1CF2                     i1l267:	
  8567                           
  8568                           ;bldc.c: 1069: if( MotorFlags.bits.B6 )
  8569  1CF2  0020               	movlb	0	; select bank0
  8570  1CF3  1F63               	btfss	_MotorFlags,6
  8571  1CF4  2D26               	goto	i1l12752
  8572                           
  8573                           ;bldc.c: 1071: {
  8574                           ;bldc.c: 1073: if( MotorFlags.bits.B3)
  8575  1CF5  1DE3               	btfss	_MotorFlags,3
  8576  1CF6  2D28               	goto	i1l12754
  8577                           
  8578                           ;bldc.c: 1075: {
  8579                           ;bldc.c: 1077: bool_start_demand_mat = 1 ;
  8580  1CF7  0021               	movlb	1	; select bank1
  8581  1CF8  3041               	movlw	65
  8582  1CF9  01E6               	clrf	_bool_start_demand_mat^(0+128)
  8583  1CFA  0AE6               	incf	_bool_start_demand_mat^(0+128),f
  8584                           
  8585                           ;bldc.c: 1079: ui16_Task_Cont500ms = 0 ;
  8586  1CFB  0023               	movlb	3	; select bank3
  8587  1CFC  00D8               	movwf	_ui8_fixed_start_speed_mat^(0+384)
  8588  1CFD  01D9               	clrf	(_ui8_fixed_start_speed_mat+1)^(0+384)
  8589                           
  8590                           ;bldc.c: 1090: if( ( comm_time % 4 ) == 0)
  8591  1CFE  0020               	movlb	0	; select bank0
  8592  1CFF  085A               	movf	_comm_time,w
  8593  1D00  3903               	andlw	3
  8594  1D01  1D03               	btfss	3,2
  8595  1D02  2D28               	goto	i1l12754
  8596                           
  8597                           ;bldc.c: 1111: else
  8598                           ;bldc.c: 1112: {
  8599                           ;bldc.c: 1114: if (ui16_Ubat_bldc.w)
  8600                           
  8601                           ;bldc.c: 1100: {
  8602                           ;bldc.c: 1103: ui32_tmp = ( 400 * 40 ) / ui16_Ubat_bldc.w ;
  8603                           
  8604                           ;bldc.c: 1096: {
  8605                           ;bldc.c: 1098: if (ui16_Ubat_bldc.w)
  8606                           
  8607                           ;bldc.c: 1092: {
  8608                           ;bldc.c: 1094: if (MotorFlags.bits.B4)
  8609  1D03  0866               	movf	_ui16_Ubat_bldc,w	;volatile
  8610  1D04  0467               	iorwf	_ui16_Ubat_bldc+1,w	;volatile
  8611  1D05  1903               	btfsc	3,2
  8612  1D06  2D17               	goto	i1l12744
  8613                           
  8614                           ;bldc.c: 1116: {
  8615                           ;bldc.c: 1119: ui32_tmp = ( 400 * 40 ) / ui16_Ubat_bldc.w ;
  8616  1D07  0867               	movf	_ui16_Ubat_bldc+1,w	;volatile
  8617  1D08  00F1               	movwf	i1___lwdiv@divisor+1
  8618  1D09  0866               	movf	_ui16_Ubat_bldc,w	;volatile
  8619  1D0A  00F0               	movwf	i1___lwdiv@divisor
  8620  1D0B  3080               	movlw	128
  8621  1D0C  00F2               	movwf	i1___lwdiv@dividend
  8622  1D0D  303E               	movlw	62
  8623  1D0E  00F3               	movwf	i1___lwdiv@dividend+1
  8624  1D0F  27D9  319A         	fcall	i1___lwdiv
  8625  1D11  0870               	movf	?i1___lwdiv,w
  8626  1D12  00A0               	movwf	interrrupt_bldc@ui32_tmp
  8627  1D13  0871               	movf	?i1___lwdiv+1,w
  8628  1D14  00A1               	movwf	interrrupt_bldc@ui32_tmp+1
  8629  1D15  01A2               	clrf	interrrupt_bldc@ui32_tmp+2
  8630  1D16  01A3               	clrf	interrrupt_bldc@ui32_tmp+3
  8631  1D17                     i1l12744:	
  8632                           
  8633                           ;bldc.c: 1121: }
  8634                           ;bldc.c: 1124: }
  8635                           ;bldc.c: 1127: if( ui8_StartupPWM > ( (unsigned char) ui32_tmp) )
  8636  1D17  0021               	movlb	1	; select bank1
  8637  1D18  0865               	movf	_ui8_StartupPWM^(0+128),w
  8638  1D19  0020               	movlb	0	; select bank0
  8639  1D1A  0220               	subwf	interrrupt_bldc@ui32_tmp,w
  8640  1D1B  1803               	skipnc
  8641  1D1C  2D20               	goto	i1l12748
  8642                           
  8643                           ;bldc.c: 1129: {
  8644                           ;bldc.c: 1131: ui8_StartupPWM--;
  8645  1D1D  0021               	movlb	1	; select bank1
  8646  1D1E  03E5               	decf	_ui8_StartupPWM^(0+128),f
  8647                           
  8648                           ;bldc.c: 1133: }
  8649  1D1F  2D22               	goto	i1l12750
  8650  1D20                     i1l12748:	
  8651                           
  8652                           ;bldc.c: 1136: else
  8653                           ;bldc.c: 1137: {
  8654                           ;bldc.c: 1139: ui8_StartupPWM++;
  8655  1D20  0021               	movlb	1	; select bank1
  8656  1D21  0AE5               	incf	_ui8_StartupPWM^(0+128),f
  8657  1D22                     i1l12750:	
  8658                           
  8659                           ;bldc.c: 1141: }
  8660                           ;bldc.c: 1144: CCPR1L = ui8_StartupPWM ;
  8661  1D22  0865               	movf	_ui8_StartupPWM^(0+128),w
  8662  1D23  0025               	movlb	5	; select bank5
  8663  1D24  0091               	movwf	17	;volatile
  8664  1D25  2D28               	goto	i1l12754
  8665  1D26                     i1l12752:	
  8666                           
  8667                           ;bldc.c: 1155: else
  8668                           ;bldc.c: 1156: {
  8669                           ;bldc.c: 1159: CCPR1L = 0;
  8670  1D26  0025               	movlb	5	; select bank5
  8671  1D27  0191               	clrf	17	;volatile
  8672  1D28                     i1l12754:	
  8673                           
  8674                           ;bldc.c: 1161: }
  8675                           ;bldc.c: 1165: if( 0 == ui8_BlankingCount )
  8676  1D28  0021               	movlb	1	; select bank1
  8677  1D29  0863               	movf	_ui8_BlankingCount^(0+128),w
  8678  1D2A  1D03               	btfss	3,2
  8679  1D2B  2D45               	goto	i1l12770
  8680                           
  8681                           ;bldc.c: 1168: {
  8682                           ;bldc.c: 1177: if( ui8_CompFlag )
  8683  1D2C  085E               	movf	_ui8_CompFlag^(0+128),w
  8684  1D2D  1903               	btfsc	3,2
  8685  1D2E  2D33               	goto	i1l316
  8686                           
  8687                           ;bldc.c: 1187: {
  8688                           ;bldc.c: 1191: ui8_zero_cros_cnt++;
  8689  1D2F  0020               	movlb	0	; select bank0
  8690  1D30  1AE3               	btfsc	_MotorFlags,5
  8691  1D31  2D33               	goto	i1l316
  8692                           
  8693                           ;bldc.c: 1193: MotorFlags.bits.B5 = 1;
  8694  1D32  16E3               	bsf	_MotorFlags,5
  8695  1D33                     i1l316:	
  8696                           ;bldc.c: 1196: }
  8697                           ;bldc.c: 1199: }
  8698                           ;bldc.c: 1202: CompFlag_prev = ui8_CompFlag;
  8699                           
  8700                           
  8701                           ;bldc.c: 1350: if( MotorFlags.bits.B5 )
  8702  1D33  0020               	movlb	0	; select bank0
  8703  1D34  1EE3               	btfss	_MotorFlags,5
  8704  1D35  0008               	return
  8705                           
  8706                           ;bldc.c: 1353: {
  8707                           ;bldc.c: 1357: if( 0 == phase_delay_counter )
  8708  1D36  0023               	movlb	3	; select bank3
  8709  1D37  0856               	movf	_phase_delay_counter^(0+384),w
  8710  1D38  0457               	iorwf	(_phase_delay_counter+1)^(0+384),w
  8711  1D39  1D03               	btfss	3,2
  8712  1D3A  2D40               	goto	i1l12768
  8713                           
  8714                           ;bldc.c: 1360: {
  8715                           ;bldc.c: 1362: if( MotorFlags.bits.B3 == 0)
  8716  1D3B  0020               	movlb	0	; select bank0
  8717  1D3C  19E3               	btfsc	_MotorFlags,3
  8718  1D3D  0008               	return
  8719                           
  8720                           ;bldc.c: 1364: {
  8721                           ;bldc.c: 1378: commutate( );
  8722  1D3E  2583               	fcall	i1_commutate
  8723  1D3F  0008               	return
  8724  1D40                     i1l12768:	
  8725                           
  8726                           ;bldc.c: 1389: else
  8727                           ;bldc.c: 1390: {
  8728                           ;bldc.c: 1392: phase_delay_counter--;
  8729  1D40  30FF               	movlw	-1
  8730  1D41  07D6               	addwf	_phase_delay_counter^(0+384),f
  8731  1D42  1C03               	skipc
  8732  1D43  03D7               	decf	(_phase_delay_counter+1)^(0+384),f
  8733                           
  8734                           ;bldc.c: 1394: }
  8735                           ;bldc.c: 1398: }
  8736                           ;bldc.c: 1401: }
  8737  1D44  0008               	return
  8738  1D45                     i1l12770:	
  8739                           
  8740                           ;bldc.c: 1408: bemf_filter = 62;
  8741  1D45  03E3               	decf	_ui8_BlankingCount^(0+128),f
  8742  1D46  0008               	return
  8743  1D47                     __end_of_interrrupt_bldc:	
  8744  1D47                     __ptext55:	
  8745 ;; *************** function i1_ADC_Wait *****************
  8746 ;; Defined at:
  8747 ;;		line 128 in file "../adc.c"
  8748 ;; Parameters:    Size  Location     Type
  8749 ;;		None
  8750 ;; Auto vars:     Size  Location     Type
  8751 ;;		None
  8752 ;; Return value:  Size  Location     Type
  8753 ;;                  1    wreg      void 
  8754 ;; Registers used:
  8755 ;;		None
  8756 ;; Tracked objects:
  8757 ;;		On entry : 0/1
  8758 ;;		On exit  : 0/0
  8759 ;;		Unchanged: 0/0
  8760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8761 ;;      Params:         0       0       0       0       0       0       0       0
  8762 ;;      Locals:         0       0       0       0       0       0       0       0
  8763 ;;      Temps:          0       0       0       0       0       0       0       0
  8764 ;;      Totals:         0       0       0       0       0       0       0       0
  8765 ;;Total ram usage:        0 bytes
  8766 ;; Hardware stack levels used:    1
  8767 ;; This function calls:
  8768 ;;		Nothing
  8769 ;; This function is called by:
  8770 ;;		_interrrupt_bldc
  8771 ;; This function uses a non-reentrant model
  8772 ;;
  8773                           
  8774                           
  8775                           ;psect for function i1_ADC_Wait
  8776  1D47                     i1_ADC_Wait:	
  8777                           
  8778                           ;adc.c: 133: __nop();
  8779                           
  8780                           ;incstack = 0
  8781                           ; Regs used in i1_ADC_Wait: []
  8782  1D47  0000               	nop
  8783                           
  8784                           ;adc.c: 134: __nop();
  8785  1D48  0000               	nop
  8786                           
  8787                           ;adc.c: 135: __nop();
  8788  1D49  0000               	nop
  8789                           
  8790                           ;adc.c: 136: __nop();
  8791  1D4A  0000               	nop
  8792                           
  8793                           ;adc.c: 137: __nop();
  8794  1D4B  0000               	nop
  8795                           
  8796                           ;adc.c: 138: __nop();
  8797  1D4C  0000               	nop
  8798                           
  8799                           ;adc.c: 139: __nop();
  8800  1D4D  0000               	nop
  8801                           
  8802                           ;adc.c: 140: __nop();
  8803  1D4E  0000               	nop
  8804                           
  8805                           ;adc.c: 142: __nop();
  8806  1D4F  0000               	nop
  8807                           
  8808                           ;adc.c: 143: __nop();
  8809  1D50  0000               	nop
  8810                           
  8811                           ;adc.c: 144: __nop();
  8812  1D51  0000               	nop
  8813                           
  8814                           ;adc.c: 145: __nop();
  8815  1D52  0000               	nop
  8816                           
  8817                           ;adc.c: 146: __nop();
  8818  1D53  0000               	nop
  8819                           
  8820                           ;adc.c: 147: __nop();
  8821  1D54  0000               	nop
  8822                           
  8823                           ;adc.c: 148: __nop();
  8824  1D55  0000               	nop
  8825                           
  8826                           ;adc.c: 149: __nop();
  8827  1D56  0000               	nop
  8828                           
  8829                           ;adc.c: 151: __nop();
  8830  1D57  0000               	nop
  8831                           
  8832                           ;adc.c: 152: __nop();
  8833  1D58  0000               	nop
  8834                           
  8835                           ;adc.c: 153: __nop();
  8836  1D59  0000               	nop
  8837                           
  8838                           ;adc.c: 154: __nop();
  8839  1D5A  0000               	nop
  8840                           
  8841                           ;adc.c: 155: __nop();
  8842  1D5B  0000               	nop
  8843                           
  8844                           ;adc.c: 156: __nop();
  8845  1D5C  0000               	nop
  8846                           
  8847                           ;adc.c: 157: __nop();
  8848  1D5D  0000               	nop
  8849                           
  8850                           ;adc.c: 158: __nop();
  8851  1D5E  0000               	nop
  8852  1D5F  0008               	return
  8853  1D60                     __end_ofi1_ADC_Wait:	
  8854  1D60                     __ptext56:	
  8855 ;; *************** function i1_ADC_Read *****************
  8856 ;; Defined at:
  8857 ;;		line 175 in file "../adc.c"
  8858 ;; Parameters:    Size  Location     Type
  8859 ;;		None
  8860 ;; Auto vars:     Size  Location     Type
  8861 ;;  ADC_Read        1    2[COMMON] unsigned char 
  8862 ;; Return value:  Size  Location     Type
  8863 ;;                  2    0[COMMON] unsigned int 
  8864 ;; Registers used:
  8865 ;;		wreg, status,2, status,0
  8866 ;; Tracked objects:
  8867 ;;		On entry : 1E/1
  8868 ;;		On exit  : 1F/1
  8869 ;;		Unchanged: 0/0
  8870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8871 ;;      Params:         2       0       0       0       0       0       0       0
  8872 ;;      Locals:         1       0       0       0       0       0       0       0
  8873 ;;      Temps:          0       0       0       0       0       0       0       0
  8874 ;;      Totals:         3       0       0       0       0       0       0       0
  8875 ;;Total ram usage:        3 bytes
  8876 ;; Hardware stack levels used:    1
  8877 ;; This function calls:
  8878 ;;		Nothing
  8879 ;; This function is called by:
  8880 ;;		_interrrupt_bldc
  8881 ;; This function uses a non-reentrant model
  8882 ;;
  8883                           
  8884                           
  8885                           ;psect for function i1_ADC_Read
  8886  1D60                     i1_ADC_Read:	
  8887                           
  8888                           ;adc.c: 179: unsigned char i;
  8889                           ;adc.c: 180: i = 0;
  8890                           
  8891                           ;incstack = 0
  8892                           ; Regs used in i1_ADC_Read: [wreg+status,2+status,0]
  8893  1D60  01F2               	clrf	i1ADC_Read@i
  8894  1D61                     i1l69:	
  8895                           ;adc.c: 182: while( GO_nDONE )
  8896                           
  8897  1D61  0021               	movlb	1	; select bank1
  8898  1D62  1C9D               	btfss	29,1	;volatile
  8899  1D63  2D69               	goto	i1l6988
  8900  1D64  3041               	movlw	65
  8901                           
  8902                           ;adc.c: 184: {
  8903                           ;adc.c: 186: i++;
  8904  1D65  0AF2               	incf	i1ADC_Read@i,f
  8905                           
  8906                           ;adc.c: 189: if( i > 64 )
  8907  1D66  0272               	subwf	i1ADC_Read@i,w
  8908  1D67  1C03               	skipc
  8909  1D68  2D61               	goto	i1l69
  8910  1D69                     i1l6988:	
  8911                           
  8912                           ;adc.c: 195: }
  8913                           ;adc.c: 198: }
  8914                           ;adc.c: 201: analog_value.b.hi = ADRESH;
  8915                           
  8916                           ;adc.c: 202: analog_value.b.lo = ADRESL;
  8917                           
  8918                           ;adc.c: 204: return analog_value.w;
  8919  1D69  27A4               	fcall	PL114	;call to abstracted procedure
  8920  1D6A  00F1               	movwf	?i1_ADC_Read+1
  8921  1D6B  083A               	movf	_analog_value^(0+128),w	;volatile
  8922  1D6C  00F0               	movwf	?i1_ADC_Read
  8923  1D6D  0008               	return
  8924  1D6E                     __end_ofi1_ADC_Read:	
  8925  1D6E                     __ptext53:	
  8926 ;; *************** function i1___wmul *****************
  8927 ;; Defined at:
  8928 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  8929 ;; Parameters:    Size  Location     Type
  8930 ;;  multiplier      2    0[COMMON] unsigned int 
  8931 ;;  multiplicand    2    2[COMMON] unsigned int 
  8932 ;; Auto vars:     Size  Location     Type
  8933 ;;  __wmul          2    4[COMMON] unsigned int 
  8934 ;; Return value:  Size  Location     Type
  8935 ;;                  2    0[COMMON] unsigned int 
  8936 ;; Registers used:
  8937 ;;		wreg, status,2, status,0
  8938 ;; Tracked objects:
  8939 ;;		On entry : 1F/1
  8940 ;;		On exit  : 1F/1
  8941 ;;		Unchanged: 1F/0
  8942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8943 ;;      Params:         4       0       0       0       0       0       0       0
  8944 ;;      Locals:         2       0       0       0       0       0       0       0
  8945 ;;      Temps:          0       0       0       0       0       0       0       0
  8946 ;;      Totals:         6       0       0       0       0       0       0       0
  8947 ;;Total ram usage:        6 bytes
  8948 ;; Hardware stack levels used:    1
  8949 ;; This function calls:
  8950 ;;		Nothing
  8951 ;; This function is called by:
  8952 ;;		_interrrupt_bldc
  8953 ;; This function uses a non-reentrant model
  8954 ;;
  8955                           
  8956                           
  8957                           ;psect for function i1___wmul
  8958  1D6E                     i1___wmul:	
  8959                           
  8960                           ;incstack = 0
  8961                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
  8962  1D6E  01F4               	clrf	i1___wmul@product
  8963  1D6F  01F5               	clrf	i1___wmul@product+1
  8964  1D70                     i1l12488:	
  8965  1D70  1C70               	btfss	i1___wmul@multiplier,0
  8966  1D71  2D76               	goto	i1l12492
  8967  1D72  0872               	movf	i1___wmul@multiplicand,w
  8968  1D73  07F4               	addwf	i1___wmul@product,f
  8969  1D74  0873               	movf	i1___wmul@multiplicand+1,w
  8970  1D75  3DF5               	addwfc	i1___wmul@product+1,f
  8971  1D76                     i1l12492:	
  8972  1D76  35F2               	lslf	i1___wmul@multiplicand,f
  8973  1D77  0DF3               	rlf	i1___wmul@multiplicand+1,f
  8974  1D78  36F1               	lsrf	i1___wmul@multiplier+1,f
  8975  1D79  0CF0               	rrf	i1___wmul@multiplier,f
  8976  1D7A  0870               	movf	i1___wmul@multiplier,w
  8977  1D7B  0471               	iorwf	i1___wmul@multiplier+1,w
  8978  1D7C  1D03               	btfss	3,2
  8979  1D7D  2D70               	goto	i1l12488
  8980  1D7E  0875               	movf	i1___wmul@product+1,w
  8981  1D7F  00F1               	movwf	?i1___wmul+1
  8982  1D80  0874               	movf	i1___wmul@product,w
  8983  1D81  00F0               	movwf	?i1___wmul
  8984  1D82  0008               	return
  8985  1D83                     __end_ofi1___wmul:	
  8986  1D83                     __ptext52:	
  8987 ;; *************** function i1_commutate *****************
  8988 ;; Defined at:
  8989 ;;		line 1426 in file "../bldc.c"
  8990 ;; Parameters:    Size  Location     Type
  8991 ;;		None
  8992 ;; Auto vars:     Size  Location     Type
  8993 ;;		None
  8994 ;; Return value:  Size  Location     Type
  8995 ;;                  1    wreg      void 
  8996 ;; Registers used:
  8997 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  8998 ;; Tracked objects:
  8999 ;;		On entry : 1D/2
  9000 ;;		On exit  : 1F/0
  9001 ;;		Unchanged: 0/0
  9002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9003 ;;      Params:         0       0       0       0       0       0       0       0
  9004 ;;      Locals:         0       0       0       0       0       0       0       0
  9005 ;;      Temps:         12       0       0       0       0       0       0       0
  9006 ;;      Totals:        12       0       0       0       0       0       0       0
  9007 ;;Total ram usage:       12 bytes
  9008 ;; Hardware stack levels used:    1
  9009 ;; This function calls:
  9010 ;;		Nothing
  9011 ;; This function is called by:
  9012 ;;		_interrrupt_bldc
  9013 ;; This function uses a non-reentrant model
  9014 ;;
  9015                           
  9016                           
  9017                           ;psect for function i1_commutate
  9018  1D83                     i1_commutate:	
  9019                           
  9020                           ;bldc.c: 1431: if( ui16_step_cnt < 10 )
  9021                           
  9022                           ;incstack = 0
  9023                           ; Regs used in i1_commutate: [wreg-fsr1h+status,2+status,0]
  9024  1D83  3000               	movlw	0
  9025  1D84  0021               	movlb	1	; select bank1
  9026  1D85  0239               	subwf	(_ui16_step_cnt+1)^(0+128),w
  9027  1D86  300A               	movlw	10
  9028  1D87  1903               	skipnz
  9029  1D88  0238               	subwf	_ui16_step_cnt^(0+128),w
  9030  1D89  1803               	skipnc
  9031  1D8A  2D8E               	goto	i1l6996
  9032                           
  9033                           ;bldc.c: 1433: {
  9034                           ;bldc.c: 1435: ui16_step_cnt++;
  9035  1D8B  0AB8               	incf	_ui16_step_cnt^(0+128),f
  9036  1D8C  1903               	skipnz
  9037  1D8D  0AB9               	incf	(_ui16_step_cnt+1)^(0+128),f
  9038  1D8E                     i1l6996:	
  9039                           
  9040                           ;bldc.c: 1437: }
  9041                           ;bldc.c: 1440: B[ Bcnt++ ] = ( comm_time );
  9042                           
  9043                           ;bldc.c: 1441: Bcnt &= ( ( sizeof( B ) / sizeof( B[ 0 ] ) ) - 1 );
  9044                           
  9045                           ;bldc.c: 1442: ui16_speed_fil = ( B[ 0 ] + B[ 1 ] + B[ 2 ] + B[ 3 ] + B[ 4 ] + B[ 5 ] + 
      +                          B[ 6 ] + B[ 7 ] );
  9046  1D8E  26C2  319A         	fcall	PL20	;call to abstracted procedure
  9047  1D90  00F0               	movwf	??i1_commutate
  9048  1D91  0825               	movf	((_B+1)^(0+384)+4),w
  9049  1D92  3D23               	addwfc	((_B+1)^(0+384)+2),w
  9050  1D93  00F1               	movwf	??i1_commutate+1
  9051  1D94  0826               	movf	(_B^(0+384)+6),w
  9052  1D95  0770               	addwf	??i1_commutate,w
  9053  1D96  00F2               	movwf	??i1_commutate+2
  9054  1D97  0827               	movf	((_B+1)^(0+384)+6),w
  9055  1D98  3D71               	addwfc	??i1_commutate+1,w
  9056  1D99  00F3               	movwf	??i1_commutate+3
  9057  1D9A  0828               	movf	(_B^(0+384)+8),w
  9058  1D9B  0772               	addwf	??i1_commutate+2,w
  9059  1D9C  00F4               	movwf	??i1_commutate+4
  9060  1D9D  0829               	movf	((_B+1)^(0+384)+8),w
  9061  1D9E  3D73               	addwfc	??i1_commutate+3,w
  9062  1D9F  00F5               	movwf	??i1_commutate+5
  9063  1DA0  082A               	movf	(_B^(0+384)+10),w
  9064  1DA1  0774               	addwf	??i1_commutate+4,w
  9065  1DA2  00F6               	movwf	??i1_commutate+6
  9066  1DA3  082B               	movf	((_B+1)^(0+384)+10),w
  9067  1DA4  3D75               	addwfc	??i1_commutate+5,w
  9068  1DA5  00F7               	movwf	??i1_commutate+7
  9069  1DA6  3F00               	moviw [0]fsr0
  9070  1DA7  0776               	addwf	??i1_commutate+6,w
  9071  1DA8  00F8               	movwf	??i1_commutate+8
  9072  1DA9  3F01               	moviw [1]fsr0
  9073  1DAA  3D77               	addwfc	??i1_commutate+7,w
  9074  1DAB  00F9               	movwf	??i1_commutate+9
  9075  1DAC  3F40               	moviw [0]fsr1
  9076  1DAD  0778               	addwf	??i1_commutate+8,w
  9077  1DAE  00FA               	movwf	??i1_commutate+10
  9078  1DAF  3F41               	moviw [1]fsr1
  9079  1DB0  3D79               	addwfc	??i1_commutate+9,w
  9080  1DB1  00FB               	movwf	??i1_commutate+11
  9081  1DB2  0820               	movf	_B^(0+384),w
  9082  1DB3  077A               	addwf	??i1_commutate+10,w
  9083  1DB4  0021               	movlb	1	; select bank1
  9084  1DB5  00B2               	movwf	_ui16_speed_fil^(0+128)
  9085  1DB6  0023               	movlb	3	; select bank3
  9086  1DB7  0821               	movf	(_B+1)^(0+384),w
  9087  1DB8  3D7B               	addwfc	??i1_commutate+11,w
  9088                           
  9089                           ;bldc.c: 1443: ui16_speed_rar = comm_time;
  9090                           
  9091                           ;bldc.c: 1448: MotorFlags.bits.B5 = 0;
  9092                           
  9093                           ;bldc.c: 1455: bemf_filter = 62;
  9094                           
  9095                           ;bldc.c: 1458: MotorFlags.bits.B7 = 1;
  9096  1DB9  26EB  319A         	fcall	PL34	;call to abstracted procedure
  9097                           
  9098                           ;bldc.c: 1461: if( MotorFlags.bits.B3 )
  9099  1DBB  1DE3               	btfss	_MotorFlags,3
  9100  1DBC  2DF3               	goto	i1l327
  9101                           
  9102                           ;bldc.c: 1463: {
  9103                           ;bldc.c: 1468: ui16_phase_advancement = ( ( ui16_speed_rar>>3 ) * 128 )>>7;
  9104                           
  9105                           ;bldc.c: 1472: if( comm_time > ui16_phase_advancement )
  9106  1DBD  26A7  319A         	fcall	PL18	;call to abstracted procedure
  9107  1DBF  1803               	skipnc
  9108  1DC0  2DC4               	goto	i1l7024
  9109                           
  9110                           ;bldc.c: 1474: {
  9111                           ;bldc.c: 1476: phase_delay_counter = ( ( comm_time ) - ui16_phase_advancement );
  9112  1DC1  271F  319A         	fcall	PL40	;call to abstracted procedure
  9113                           
  9114                           ;bldc.c: 1478: }
  9115  1DC3  2DD5               	goto	i1l7048
  9116  1DC4                     i1l7024:	
  9117                           
  9118                           ;bldc.c: 1481: else
  9119                           ;bldc.c: 1482: {
  9120                           ;bldc.c: 1484: phase_delay_counter = 0;
  9121  1DC4  0023               	movlb	3	; select bank3
  9122  1DC5  01D6               	clrf	_phase_delay_counter^(0+384)
  9123  1DC6  01D7               	clrf	(_phase_delay_counter+1)^(0+384)
  9124  1DC7  2DD5               	goto	i1l7048
  9125  1DC8                     i1l7026:	
  9126                           
  9127                           ;bldc.c: 1514: {
  9128                           ;bldc.c: 1516: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 600 * 2 ) 
      +                          ) ;
  9129  1DC8  27AA  319A         	fcall	PL118	;call to abstracted procedure
  9130                           
  9131                           ;bldc.c: 1517: break;
  9132  1DCA  2DE3               	goto	i1l7050
  9133  1DCB                     i1l7028:	
  9134                           
  9135                           ;bldc.c: 1524: {
  9136                           ;bldc.c: 1526: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 100 * 2 ) 
      +                          ) ;
  9137  1DCB  27B4  319A         	fcall	PL122	;call to abstracted procedure
  9138  1DCD  2DD3               	goto	L51
  9139  1DCE                     i1l7030:	
  9140                           ;bldc.c: 1527: break;
  9141                           
  9142                           
  9143                           ;bldc.c: 1534: {
  9144                           ;bldc.c: 1536: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 150 * 2 ) 
      +                          ) ;
  9145  1DCE  27CC  319A         	fcall	PL136	;call to abstracted procedure
  9146  1DD0  2DD3               	goto	L51
  9147  1DD1                     i1l7032:	
  9148                           ;bldc.c: 1537: break;
  9149                           
  9150                           
  9151                           ;bldc.c: 1544: {
  9152                           ;bldc.c: 1546: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 200 * 2 ) 
      +                          ) ;
  9153  1DD1  27D5  319A         	fcall	PL142	;call to abstracted procedure
  9154  1DD3                     L51:	
  9155  1DD3  00B2               	movwf	(_ui16_comm_time_max^(0+256)+1)
  9156                           
  9157                           ;bldc.c: 1547: break;
  9158  1DD4  2DE3               	goto	i1l7050
  9159  1DD5                     i1l7048:	
  9160                           
  9161                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9162                           ; Switch size 1, requested type "space"
  9163                           ; Number of cases is 1, Range of values is 0 to 0
  9164                           ; switch strategies available:
  9165                           ; Name         Instructions Cycles
  9166                           ; simple_byte            4     3 (average)
  9167                           ; direct_byte            8     6 (fixed)
  9168                           ; jumptable            260     6 (fixed)
  9169                           ;	Chosen strategy is simple_byte
  9170  1DD5  0021               	movlb	1	; select bank1
  9171  1DD6  0839               	movf	(_ui16_step_cnt+1)^(0+128),w
  9172  1DD7  3A00               	xorlw	0	; case 0
  9173  1DD8  1903               	skipnz
  9174  1DD9  2DDB               	goto	i1l14504
  9175  1DDA  2DD1               	goto	i1l7032
  9176  1DDB                     i1l14504:	
  9177                           
  9178                           ; Switch size 1, requested type "space"
  9179                           ; Number of cases is 10, Range of values is 0 to 9
  9180                           ; switch strategies available:
  9181                           ; Name         Instructions Cycles
  9182                           ; direct_byte           26     6 (fixed)
  9183                           ; simple_byte           31    16 (average)
  9184                           ; jumptable            260     6 (fixed)
  9185                           ;	Chosen strategy is direct_byte
  9186  1DDB  27BD  319A         	fcall	PL126	;call to abstracted procedure
  9187  1DDD  1803               	skipnc
  9188  1DDE  2DD1               	goto	i1l7032
  9189  1DDF  3187               	movlp	high i1S14506
  9190  1DE0  3504               	lslf	4,w
  9191  1DE1  3E3F               	addlw	low i1S14506
  9192  1DE2  0082               	movwf	2
  9193  1DE3                     i1l7050:	
  9194                           
  9195                           ;bldc.c: 1624: if( ui16_comm_time_max < ( unsigned short ) ( ( 10 * 20000UL ) / ( 200 * 
      +                          2 ) ) )
  9196  1DE3  3001               	movlw	1
  9197  1DE4  0232               	subwf	(_ui16_comm_time_max+1)^(0+256),w
  9198  1DE5  30F4               	movlw	244
  9199  1DE6  1903               	skipnz
  9200  1DE7  0231               	subwf	_ui16_comm_time_max^(0+256),w
  9201  1DE8  1803               	skipnc
  9202  1DE9  2DEC               	goto	i1l7054
  9203                           
  9204                           ;bldc.c: 1626: {
  9205                           ;bldc.c: 1628: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 200 * 2 ) 
      +                          );
  9206  1DEA  27B8  319A         	fcall	PL124	;call to abstracted procedure
  9207  1DEC                     i1l7054:	
  9208                           
  9209                           ;bldc.c: 1630: }
  9210                           ;bldc.c: 1634: if (MotorFlags.bits.B4)
  9211  1DEC  0020               	movlb	0	; select bank0
  9212  1DED  1E63               	btfss	_MotorFlags,4
  9213  1DEE  2E1F               	goto	i1l345
  9214                           
  9215                           ;bldc.c: 1636: {
  9216                           ;bldc.c: 1639: ui8_StartupPWM = 10 ;
  9217  1DEF  300A               	movlw	10
  9218  1DF0  0021               	movlb	1	; select bank1
  9219  1DF1  00E5               	movwf	_ui8_StartupPWM^(0+128)
  9220                           
  9221                           ;bldc.c: 1641: }
  9222                           ;bldc.c: 1644: }
  9223  1DF2  2E1F               	goto	i1l345
  9224  1DF3                     i1l327:	
  9225                           
  9226                           ;bldc.c: 1647: else
  9227                           ;bldc.c: 1648: {
  9228                           ;bldc.c: 1652: if( rising_bemf_flag)
  9229  1DF3  1C68               	btfss	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  9230  1DF4  2DF9               	goto	i1l7060
  9231                           
  9232                           ;bldc.c: 1654: {
  9233                           ;bldc.c: 1657: phase_delay_counter = 0;
  9234  1DF5  0023               	movlb	3	; select bank3
  9235  1DF6  01D6               	clrf	_phase_delay_counter^(0+384)
  9236  1DF7  01D7               	clrf	(_phase_delay_counter+1)^(0+384)
  9237                           
  9238                           ;bldc.c: 1659: }
  9239  1DF8  2E04               	goto	i1l7062
  9240  1DF9                     i1l7060:	
  9241                           
  9242                           ;bldc.c: 1662: else
  9243                           ;bldc.c: 1663: {
  9244                           ;bldc.c: 1666: phase_delay_counter = comm_time>>1;
  9245  1DF9  085B               	movf	_comm_time+1,w
  9246  1DFA  00F1               	movwf	??i1_commutate+1
  9247  1DFB  085A               	movf	_comm_time,w
  9248  1DFC  00F0               	movwf	??i1_commutate
  9249  1DFD  36F1               	lsrf	??i1_commutate+1,f
  9250  1DFE  0CF0               	rrf	??i1_commutate,f
  9251  1DFF  0870               	movf	??i1_commutate,w
  9252  1E00  0023               	movlb	3	; select bank3
  9253  1E01  00D6               	movwf	_phase_delay_counter^(0+384)
  9254  1E02  0871               	movf	??i1_commutate+1,w
  9255  1E03  00D7               	movwf	(_phase_delay_counter+1)^(0+384)
  9256  1E04                     i1l7062:	
  9257                           
  9258                           ;bldc.c: 1680: phase_delay_counter_debug = phase_delay_counter;
  9259                           
  9260                           ;bldc.c: 1686: ui16_comm_time_max = ( unsigned short ) ( ( 10 * 20000UL ) / ( 200 * 2 ) 
      +                          );
  9261                           
  9262                           ;bldc.c: 1691: if( MotorFlags.bits.B6 )
  9263  1E04  276A  319A         	fcall	PL66	;call to abstracted procedure
  9264  1E06  1F63               	btfss	_MotorFlags,6
  9265  1E07  2E1D               	goto	i1l7086
  9266                           
  9267                           ;bldc.c: 1693: {
  9268                           ;bldc.c: 1697: if (CCPR1L == ui8_duty_cycle_BLDC)
  9269  1E08  27AF  319A         	fcall	PL120	;call to abstracted procedure
  9270  1E0A  1903               	btfsc	3,2
  9271  1E0B  2E1F               	goto	i1l345
  9272                           
  9273                           ;bldc.c: 1706: else
  9274                           ;bldc.c: 1707: {
  9275                           ;bldc.c: 1709: if( CCPR1L > ui8_duty_cycle_BLDC )
  9276  1E0C  27D0  319A         	fcall	PL140	;call to abstracted procedure
  9277  1E0E  1803               	skipnc
  9278  1E0F  2E17               	goto	i1l7080
  9279                           
  9280                           ;bldc.c: 1712: {
  9281                           ;bldc.c: 1714: CCPR1L--;
  9282                           
  9283                           ;bldc.c: 1716: if (CCPR1L > ui8_duty_cycle_BLDC)
  9284  1E10  279E  319A         	fcall	PL108	;call to abstracted procedure
  9285  1E12  1803               	skipnc
  9286  1E13  2E1F               	goto	i1l345
  9287                           
  9288                           ;bldc.c: 1718: {
  9289                           ;bldc.c: 1720: CCPR1L--;
  9290  1E14  0025               	movlb	5	; select bank5
  9291  1E15  0391               	decf	17,f	;volatile
  9292  1E16  2E1F               	goto	i1l345
  9293  1E17                     i1l7080:	
  9294                           
  9295                           ;bldc.c: 1728: else
  9296                           ;bldc.c: 1729: {
  9297                           ;bldc.c: 1731: CCPR1L++;
  9298                           
  9299                           ;bldc.c: 1733: if (CCPR1L < ui8_duty_cycle_BLDC)
  9300  1E17  278B  319A         	fcall	PL90	;call to abstracted procedure
  9301  1E19  1803               	skipnc
  9302  1E1A  2E1F               	goto	i1l345
  9303                           
  9304                           ;bldc.c: 1735: {
  9305                           ;bldc.c: 1737: CCPR1L++;
  9306  1E1B  0A91               	incf	17,f	;volatile
  9307  1E1C  2E1F               	goto	i1l345
  9308  1E1D                     i1l7086:	
  9309                           
  9310                           ;bldc.c: 1768: else
  9311                           ;bldc.c: 1769: {
  9312                           ;bldc.c: 1771: CCPR1L = 0;
  9313  1E1D  0025               	movlb	5	; select bank5
  9314  1E1E  0191               	clrf	17	;volatile
  9315  1E1F                     i1l345:	
  9316                           
  9317                           ;bldc.c: 1773: }
  9318                           ;bldc.c: 1777: }
  9319                           ;bldc.c: 1780: comm_time = 0;
  9320                           
  9321                           ;bldc.c: 1784: if( comm_state == 0xff )
  9322  1E1F  27C7  319A         	fcall	PL134	;call to abstracted procedure
  9323  1E21  0F64               	incfsz	_comm_state^(0+128),w
  9324  1E22  2E71               	goto	i1l7236
  9325                           
  9326                           ;bldc.c: 1786: {
  9327                           ;bldc.c: 1788: comm_state = 6;
  9328  1E23  3006               	movlw	6
  9329  1E24  00E4               	movwf	_comm_state^(0+128)
  9330  1E25  2E71               	goto	i1l7236
  9331  1E26                     i1l7092:	
  9332                           
  9333                           ;bldc.c: 1800: {
  9334                           ;bldc.c: 1806: PSTR1CON = 0b00000001;
  9335  1E26  3001               	movlw	1
  9336  1E27  0025               	movlb	5	; select bank5
  9337  1E28  0096               	movwf	22	;volatile
  9338                           
  9339                           ;bldc.c: 1809: if( MotorFlags.bits.B6 )
  9340  1E29  0020               	movlb	0	; select bank0
  9341  1E2A  1F63               	btfss	_MotorFlags,6
  9342  1E2B  2E2E               	goto	i1l7098
  9343                           
  9344                           ;bldc.c: 1811: {
  9345                           ;bldc.c: 1813: LATC = ( LATC & 0b11100101 ) | 0b00001010;
  9346  1E2C  2779  319A         	fcall	PL74	;call to abstracted procedure
  9347  1E2E                     i1l7098:	
  9348                           
  9349                           ;bldc.c: 1815: }
  9350                           ;bldc.c: 1819: LATB2 = 0;
  9351                           
  9352                           ;bldc.c: 1820: LATB1 = 0;
  9353                           
  9354                           ;bldc.c: 1821: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
  9355                           
  9356                           ;bldc.c: 1822: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
  9357                           
  9358                           ;bldc.c: 1823: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
  9359                           
  9360                           ;bldc.c: 1824: CM1CON1 = 0x02;
  9361                           
  9362                           ;bldc.c: 1837: CM1CON0 = 0x84;
  9363                           
  9364                           ;bldc.c: 1838: rising_bemf_flag = 1;
  9365  1E2E  26DA  319A         	fcall	PL32	;call to abstracted procedure
  9366  1E30  2E5E               	goto	L57
  9367  1E31                     i1l7116:	
  9368                           ;bldc.c: 1845: break;
  9369                           
  9370                           ;bldc.c: 1839: comm_state = 6;
  9371                           
  9372                           
  9373                           ;bldc.c: 1855: {
  9374                           ;bldc.c: 1860: PSTR1CON = 0b00000001;
  9375  1E31  3001               	movlw	1
  9376  1E32  0025               	movlb	5	; select bank5
  9377  1E33  0096               	movwf	22	;volatile
  9378                           
  9379                           ;bldc.c: 1863: if( MotorFlags.bits.B6 )
  9380  1E34  0020               	movlb	0	; select bank0
  9381  1E35  1F63               	btfss	_MotorFlags,6
  9382  1E36  2E39               	goto	i1l7122
  9383                           
  9384                           ;bldc.c: 1865: {
  9385                           ;bldc.c: 1867: LATC = ( LATC & 0b11100101 ) | 0b00010010;
  9386  1E37  277F  319A         	fcall	PL78	;call to abstracted procedure
  9387  1E39                     i1l7122:	
  9388                           
  9389                           ;bldc.c: 1869: }
  9390                           ;bldc.c: 1873: LATB2 = 1;
  9391                           
  9392                           ;bldc.c: 1874: LATB1 = 0;
  9393                           
  9394                           ;bldc.c: 1875: ui8_IPhase_sel = ( 0x02 << 2 ) | 0x01;
  9395                           
  9396                           ;bldc.c: 1876: ui8_UPhase_sel = ( 0x00 << 2 ) | 0x01;
  9397                           
  9398                           ;bldc.c: 1877: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
  9399                           
  9400                           ;bldc.c: 1878: CM1CON1 = 0x01;
  9401                           
  9402                           ;bldc.c: 1892: CM1CON0 = 0x94;
  9403  1E39  2750  319A         	fcall	PL46	;call to abstracted procedure
  9404  1E3B                     i1l7136:	
  9405                           
  9406                           ;bldc.c: 1893: rising_bemf_flag = 0;
  9407                           
  9408                           ;bldc.c: 1894: comm_state = 1;
  9409  1E3B  2798  319A         	fcall	PL100	;call to abstracted procedure
  9410                           
  9411                           ;bldc.c: 1902: break;
  9412  1E3D  2E85               	goto	i1l7238
  9413  1E3E                     i1l7140:	
  9414                           
  9415                           ;bldc.c: 1912: {
  9416                           ;bldc.c: 1917: PSTR1CON = 0b00000010;
  9417  1E3E  3002               	movlw	2
  9418  1E3F  0025               	movlb	5	; select bank5
  9419  1E40  0096               	movwf	22	;volatile
  9420                           
  9421                           ;bldc.c: 1920: if( MotorFlags.bits.B6 )
  9422  1E41  0020               	movlb	0	; select bank0
  9423  1E42  1F63               	btfss	_MotorFlags,6
  9424  1E43  2E46               	goto	i1l7146
  9425                           
  9426                           ;bldc.c: 1922: {
  9427                           ;bldc.c: 1924: LATC = ( LATC & 0b11100101 ) | 0b00011000;
  9428  1E44  2773  319A         	fcall	PL70	;call to abstracted procedure
  9429  1E46                     i1l7146:	
  9430                           
  9431                           ;bldc.c: 1926: }
  9432                           ;bldc.c: 1929: LATC2 = 0;
  9433                           
  9434                           ;bldc.c: 1931: LATB1 = 0;
  9435                           
  9436                           ;bldc.c: 1932: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
  9437                           
  9438                           ;bldc.c: 1933: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
  9439                           
  9440                           ;bldc.c: 1934: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
  9441                           
  9442                           ;bldc.c: 1935: CM1CON1 = 0x00;
  9443                           
  9444                           ;bldc.c: 1949: CM1CON0 = 0x84;
  9445                           
  9446                           ;bldc.c: 1950: rising_bemf_flag = 1;
  9447  1E46  2740  319A         	fcall	PL44	;call to abstracted procedure
  9448  1E48  2E5E               	goto	L57
  9449  1E49                     i1l7160:	
  9450                           ;bldc.c: 1956: break;
  9451                           
  9452                           ;bldc.c: 1951: comm_state = 2;
  9453                           
  9454                           
  9455                           ;bldc.c: 1966: {
  9456                           ;bldc.c: 1972: PSTR1CON = 0b00000010;
  9457  1E49  3002               	movlw	2
  9458  1E4A  0025               	movlb	5	; select bank5
  9459  1E4B  0096               	movwf	22	;volatile
  9460                           
  9461                           ;bldc.c: 1975: if( MotorFlags.bits.B6 )
  9462  1E4C  0020               	movlb	0	; select bank0
  9463  1E4D  1F63               	btfss	_MotorFlags,6
  9464  1E4E  2E51               	goto	i1l7166
  9465                           
  9466                           ;bldc.c: 1977: {
  9467                           ;bldc.c: 1979: LATC = ( LATC & 0b11100101 ) | 0b00001010;
  9468  1E4F  2779  319A         	fcall	PL74	;call to abstracted procedure
  9469  1E51                     i1l7166:	
  9470                           
  9471                           ;bldc.c: 1981: }
  9472                           ;bldc.c: 1984: LATC2 = 0;
  9473                           
  9474                           ;bldc.c: 1986: LATB1 = 1;
  9475                           
  9476                           ;bldc.c: 1987: ui8_IPhase_sel = ( 0x0D << 2 ) | 0x01;
  9477                           
  9478                           ;bldc.c: 1988: ui8_UPhase_sel = ( 0x01 << 2 ) | 0x01;
  9479                           
  9480                           ;bldc.c: 1989: ui8_Ubemf_sel = ( 0x09 << 2 ) | 0x01;
  9481                           
  9482                           ;bldc.c: 1990: CM1CON1 = 0x02;
  9483                           
  9484                           ;bldc.c: 2004: CM1CON0 = 0x94;
  9485                           
  9486                           ;bldc.c: 2005: rising_bemf_flag = 0;
  9487  1E51  270E  319A         	fcall	PL38	;call to abstracted procedure
  9488  1E53  2E6A               	goto	L58
  9489  1E54                     i1l7184:	
  9490                           ;bldc.c: 2011: break;
  9491                           
  9492                           ;bldc.c: 2006: comm_state = 3;
  9493                           
  9494                           
  9495                           ;bldc.c: 2020: {
  9496                           ;bldc.c: 2026: PSTR1CON = 0b00000100;
  9497  1E54  3004               	movlw	4
  9498  1E55  0025               	movlb	5	; select bank5
  9499  1E56  0096               	movwf	22	;volatile
  9500                           
  9501                           ;bldc.c: 2029: if( MotorFlags.bits.B6 )
  9502  1E57  0020               	movlb	0	; select bank0
  9503  1E58  1F63               	btfss	_MotorFlags,6
  9504  1E59  2E5C               	goto	i1l7190
  9505                           
  9506                           ;bldc.c: 2031: {
  9507                           ;bldc.c: 2033: LATC = ( LATC & 0b11100101 ) | 0b00010010;
  9508  1E5A  277F  319A         	fcall	PL78	;call to abstracted procedure
  9509  1E5C                     i1l7190:	
  9510                           
  9511                           ;bldc.c: 2035: }
  9512                           ;bldc.c: 2038: LATC2 = 0;
  9513                           
  9514                           ;bldc.c: 2039: LATB2 = 0;
  9515                           
  9516                           ;bldc.c: 2041: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
  9517                           
  9518                           ;bldc.c: 2042: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
  9519                           
  9520                           ;bldc.c: 2043: ui8_Ubemf_sel = ( 0x01 << 2 ) | 0x01;
  9521                           
  9522                           ;bldc.c: 2044: CM1CON1 = 0x01;
  9523                           
  9524                           ;bldc.c: 2059: CM1CON0 = 0x84;
  9525                           
  9526                           ;bldc.c: 2060: rising_bemf_flag = 1;
  9527  1E5C  26FD  319A         	fcall	PL36	;call to abstracted procedure
  9528  1E5E                     L57:	
  9529  1E5E  1468               	bsf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  9530                           
  9531                           ;bldc.c: 2061: comm_state = 4;
  9532  1E5F  2E6B               	goto	L55
  9533  1E60                     i1l7208:	
  9534                           ;bldc.c: 2066: break;
  9535                           
  9536                           
  9537                           ;bldc.c: 2076: {
  9538                           ;bldc.c: 2081: PSTR1CON = 0b00000100;
  9539  1E60  3004               	movlw	4
  9540  1E61  0025               	movlb	5	; select bank5
  9541  1E62  0096               	movwf	22	;volatile
  9542                           
  9543                           ;bldc.c: 2084: if( MotorFlags.bits.B6 )
  9544  1E63  0020               	movlb	0	; select bank0
  9545  1E64  1F63               	btfss	_MotorFlags,6
  9546  1E65  2E68               	goto	i1l7214
  9547                           
  9548                           ;bldc.c: 2086: {
  9549                           ;bldc.c: 2088: LATC = ( LATC & 0b11100101 ) | 0b00011000;
  9550  1E66  2773  319A         	fcall	PL70	;call to abstracted procedure
  9551  1E68                     i1l7214:	
  9552                           
  9553                           ;bldc.c: 2090: }
  9554                           ;bldc.c: 2093: LATC2 = 1;
  9555                           
  9556                           ;bldc.c: 2094: LATB2 = 0;
  9557                           
  9558                           ;bldc.c: 2096: ui8_IPhase_sel = ( 0x04 << 2 ) | 0x01;
  9559                           
  9560                           ;bldc.c: 2097: ui8_UPhase_sel = ( 0x09 << 2 ) | 0x01;
  9561                           
  9562                           ;bldc.c: 2098: ui8_Ubemf_sel = ( 0x00 << 2 ) | 0x01;
  9563                           
  9564                           ;bldc.c: 2099: CM1CON1 = 0x00;
  9565                           
  9566                           ;bldc.c: 2113: CM1CON0 = 0x94;
  9567                           
  9568                           ;bldc.c: 2114: rising_bemf_flag = 0;
  9569  1E68  2730  319A         	fcall	PL42	;call to abstracted procedure
  9570  1E6A                     L58:	
  9571  1E6A  1068               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
  9572  1E6B                     L55:	
  9573                           
  9574                           ;bldc.c: 2115: comm_state = 5;
  9575  1E6B  0021               	movlb	1	; select bank1
  9576  1E6C  00E4               	movwf	_comm_state^(0+128)
  9577                           
  9578                           ;bldc.c: 2120: break;
  9579  1E6D  2E85               	goto	i1l7238
  9580  1E6E                     i1l7228:	
  9581                           
  9582                           ;bldc.c: 2129: {
  9583                           ;bldc.c: 2131: PSTR1CON = 0x00;
  9584                           
  9585                           ;bldc.c: 2132: CM1CON0 = 0x00;
  9586  1E6E  27C2  319A         	fcall	PL128	;call to abstracted procedure
  9587  1E70  2E3B               	goto	i1l7136
  9588  1E71                     i1l7236:	
  9589  1E71  0864               	movf	_comm_state^(0+128),w
  9590                           
  9591                           ; Switch size 1, requested type "space"
  9592                           ; Number of cases is 6, Range of values is 1 to 6
  9593                           ; switch strategies available:
  9594                           ; Name         Instructions Cycles
  9595                           ; simple_byte           19    10 (average)
  9596                           ; direct_byte           21     9 (fixed)
  9597                           ; jumptable            263     9 (fixed)
  9598                           ;	Chosen strategy is simple_byte
  9599  1E72  3A01               	xorlw	1	; case 1
  9600  1E73  1903               	skipnz
  9601  1E74  2E26               	goto	i1l7092
  9602  1E75  3A03               	xorlw	3	; case 2
  9603  1E76  1903               	skipnz
  9604  1E77  2E31               	goto	i1l7116
  9605  1E78  3A01               	xorlw	1	; case 3
  9606  1E79  1903               	skipnz
  9607  1E7A  2E3E               	goto	i1l7140
  9608  1E7B  3A07               	xorlw	7	; case 4
  9609  1E7C  1903               	skipnz
  9610  1E7D  2E49               	goto	i1l7160
  9611  1E7E  3A01               	xorlw	1	; case 5
  9612  1E7F  1903               	skipnz
  9613  1E80  2E54               	goto	i1l7184
  9614  1E81  3A03               	xorlw	3	; case 6
  9615  1E82  1903               	skipnz
  9616  1E83  2E60               	goto	i1l7208
  9617  1E84  2E6E               	goto	i1l7228
  9618  1E85                     i1l7238:	
  9619                           
  9620                           ;bldc.c: 2146: {
  9621                           ;bldc.c: 2148: ui8_BlankingCount = ( unsigned char ) ( 0.002 * 20000UL );
  9622                           
  9623                           ;bldc.c: 2158: }
  9624                           ;bldc.c: 2161: comm_time = 0;
  9625                           
  9626                           ;bldc.c: 2150: }
  9627  1E85  2F92               	ljmp	PL92	;call to abstracted procedure
  9628  1E86                     __end_ofi1_commutate:	
  9629  1E86                     __ptext57:	
  9630 ;; *************** function _BLDCWait *****************
  9631 ;; Defined at:
  9632 ;;		line 156 in file "../bldc.c"
  9633 ;; Parameters:    Size  Location     Type
  9634 ;;		None
  9635 ;; Auto vars:     Size  Location     Type
  9636 ;;		None
  9637 ;; Return value:  Size  Location     Type
  9638 ;;                  1    wreg      void 
  9639 ;; Registers used:
  9640 ;;		None
  9641 ;; Tracked objects:
  9642 ;;		On entry : 1E/1
  9643 ;;		On exit  : 0/0
  9644 ;;		Unchanged: 0/0
  9645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9646 ;;      Params:         0       0       0       0       0       0       0       0
  9647 ;;      Locals:         0       0       0       0       0       0       0       0
  9648 ;;      Temps:          0       0       0       0       0       0       0       0
  9649 ;;      Totals:         0       0       0       0       0       0       0       0
  9650 ;;Total ram usage:        0 bytes
  9651 ;; Hardware stack levels used:    1
  9652 ;; This function calls:
  9653 ;;		Nothing
  9654 ;; This function is called by:
  9655 ;;		_interrrupt_bldc
  9656 ;; This function uses a non-reentrant model
  9657 ;;
  9658                           
  9659                           
  9660                           ;psect for function _BLDCWait
  9661  1E86                     _BLDCWait:	
  9662                           
  9663                           ;bldc.c: 161: __nop();
  9664                           
  9665                           ;incstack = 0
  9666                           ; Regs used in _BLDCWait: []
  9667  1E86  0000               	nop
  9668                           
  9669                           ;bldc.c: 162: __nop();
  9670  1E87  0000               	nop
  9671                           
  9672                           ;bldc.c: 163: __nop();
  9673  1E88  0000               	nop
  9674                           
  9675                           ;bldc.c: 164: __nop();
  9676  1E89  0000               	nop
  9677                           
  9678                           ;bldc.c: 165: __nop();
  9679  1E8A  0000               	nop
  9680                           
  9681                           ;bldc.c: 166: __nop();
  9682  1E8B  0000               	nop
  9683                           
  9684                           ;bldc.c: 167: __nop();
  9685  1E8C  0000               	nop
  9686                           
  9687                           ;bldc.c: 168: __nop();
  9688  1E8D  0000               	nop
  9689                           
  9690                           ;bldc.c: 170: __nop();
  9691  1E8E  0000               	nop
  9692                           
  9693                           ;bldc.c: 171: __nop();
  9694  1E8F  0000               	nop
  9695                           
  9696                           ;bldc.c: 172: __nop();
  9697  1E90  0000               	nop
  9698                           
  9699                           ;bldc.c: 173: __nop();
  9700  1E91  0000               	nop
  9701                           
  9702                           ;bldc.c: 174: __nop();
  9703  1E92  0000               	nop
  9704                           
  9705                           ;bldc.c: 175: __nop();
  9706  1E93  0000               	nop
  9707                           
  9708                           ;bldc.c: 176: __nop();
  9709  1E94  0000               	nop
  9710                           
  9711                           ;bldc.c: 177: __nop();
  9712  1E95  0000               	nop
  9713                           
  9714                           ;bldc.c: 179: __nop();
  9715  1E96  0000               	nop
  9716                           
  9717                           ;bldc.c: 180: __nop();
  9718  1E97  0000               	nop
  9719                           
  9720                           ;bldc.c: 181: __nop();
  9721  1E98  0000               	nop
  9722                           
  9723                           ;bldc.c: 182: __nop();
  9724  1E99  0000               	nop
  9725                           
  9726                           ;bldc.c: 183: __nop();
  9727  1E9A  0000               	nop
  9728                           
  9729                           ;bldc.c: 184: __nop();
  9730  1E9B  0000               	nop
  9731                           
  9732                           ;bldc.c: 185: __nop();
  9733  1E9C  0000               	nop
  9734                           
  9735                           ;bldc.c: 186: __nop();
  9736  1E9D  0000               	nop
  9737                           
  9738                           ;bldc.c: 188: __nop();
  9739  1E9E  0000               	nop
  9740                           
  9741                           ;bldc.c: 189: __nop();
  9742  1E9F  0000               	nop
  9743                           
  9744                           ;bldc.c: 190: __nop();
  9745  1EA0  0000               	nop
  9746                           
  9747                           ;bldc.c: 191: __nop();
  9748  1EA1  0000               	nop
  9749                           
  9750                           ;bldc.c: 192: __nop();
  9751  1EA2  0000               	nop
  9752                           
  9753                           ;bldc.c: 193: __nop();
  9754  1EA3  0000               	nop
  9755                           
  9756                           ;bldc.c: 194: __nop();
  9757  1EA4  0000               	nop
  9758                           
  9759                           ;bldc.c: 195: __nop();
  9760  1EA5  0000               	nop
  9761  1EA6  0008               	return
  9762  1EA7                     __end_of_BLDCWait:	
  9763  1EA7                     PL18:	
  9764  1EA7  0022               	movlb	2	; select bank2
  9765  1EA8  0834               	movf	(_ui16_speed_rar+1)^(0+256),w
  9766  1EA9  0021               	movlb	1	; select bank1
  9767  1EAA  00B7               	movwf	(_ui16_phase_advancement+1)^(0+128)
  9768  1EAB  0022               	movlb	2	; select bank2
  9769  1EAC  0833               	movf	_ui16_speed_rar^(0+256),w
  9770  1EAD  0021               	movlb	1	; select bank1
  9771  1EAE  00B6               	movwf	_ui16_phase_advancement^(0+128)
  9772  1EAF  3001               	movlw	1
  9773  1EB0  36B7               	lsrf	(_ui16_phase_advancement+1)^(0+128),f
  9774  1EB1  0CB6               	rrf	_ui16_phase_advancement^(0+128),f
  9775  1EB2  36B7               	lsrf	(_ui16_phase_advancement+1)^(0+128),f
  9776  1EB3  0CB6               	rrf	_ui16_phase_advancement^(0+128),f
  9777  1EB4  36B7               	lsrf	(_ui16_phase_advancement+1)^(0+128),f
  9778  1EB5  0CB6               	rrf	_ui16_phase_advancement^(0+128),f
  9779  1EB6  05B7               	andwf	(_ui16_phase_advancement+1)^(0+128),f
  9780  1EB7  0020               	movlb	0	; select bank0
  9781  1EB8  085B               	movf	_comm_time+1,w
  9782  1EB9  0021               	movlb	1	; select bank1
  9783  1EBA  0237               	subwf	(_ui16_phase_advancement+1)^(0+128),w
  9784  1EBB  1D03               	skipz
  9785  1EBC  0008               	return
  9786  1EBD  0020               	movlb	0	; select bank0
  9787  1EBE  085A               	movf	_comm_time,w
  9788  1EBF  0021               	movlb	1	; select bank1
  9789  1EC0  0236               	subwf	_ui16_phase_advancement^(0+128),w
  9790  1EC1  0008               	return
  9791  1EC2                     __end_ofPL18:	
  9792  1EC2                     PL20:	
  9793  1EC2  355D               	lslf	_Bcnt^(0+128),w
  9794  1EC3  3EA0               	addlw	(low (_B| (0+256)))& (0+255)
  9795  1EC4  0086               	movwf	6
  9796  1EC5  3001               	movlw	1	; select bank3/4
  9797  1EC6  0087               	movwf	7
  9798  1EC7  0020               	movlb	0	; select bank0
  9799  1EC8  085A               	movf	_comm_time,w
  9800  1EC9  3FC0               	movwi [0]fsr1
  9801  1ECA  085B               	movf	_comm_time+1,w
  9802  1ECB  3FC1               	movwi [1]fsr1
  9803  1ECC  0021               	movlb	1	; select bank1
  9804  1ECD  3007               	movlw	7
  9805  1ECE  0ADD               	incf	_Bcnt^(0+128),f
  9806  1ECF  05DD               	andwf	_Bcnt^(0+128),f
  9807  1ED0  30AE               	movlw	((low (_B| (0+256)))& (0+255)+14)
  9808  1ED1  0086               	movwf	6
  9809  1ED2  30AC               	movlw	((low (_B| (0+256)))& (0+255)+12)
  9810  1ED3  0084               	movwf	4
  9811  1ED4  3001               	movlw	1	; select bank3/4
  9812  1ED5  0085               	movwf	5
  9813  1ED6  0023               	movlb	3	; select bank3
  9814  1ED7  0824               	movf	(_B^(0+384)+4),w
  9815  1ED8  0722               	addwf	(_B^(0+384)+2),w
  9816  1ED9  0008               	return
  9817  1EDA                     __end_ofPL20:	
  9818  1EDA                     PL32:	
  9819  1EDA  0022               	movlb	2	; select bank2
  9820  1EDB  110D               	bcf	13,2	;volatile
  9821  1EDC  108D               	bcf	13,1	;volatile
  9822  1EDD  3009               	movlw	9
  9823  1EDE  0021               	movlb	1	; select bank1
  9824  1EDF  00E2               	movwf	_ui8_IPhase_sel^(0+128)
  9825  1EE0  3025               	movlw	37
  9826  1EE1  01E1               	clrf	_ui8_UPhase_sel^(0+128)
  9827  1EE2  0AE1               	incf	_ui8_UPhase_sel^(0+128),f
  9828  1EE3  00E0               	movwf	_ui8_Ubemf_sel^(0+128)
  9829  1EE4  3002               	movlw	2
  9830  1EE5  0022               	movlb	2	; select bank2
  9831  1EE6  0092               	movwf	18	;volatile
  9832  1EE7  3084               	movlw	132
  9833  1EE8  0091               	movwf	17	;volatile
  9834  1EE9  0020               	movlb	0	; select bank0
  9835  1EEA  3406               	retlw	6
  9836  1EEB                     __end_ofPL32:	
  9837  1EEB                     PL34:	
  9838  1EEB  0021               	movlb	1	; select bank1
  9839  1EEC  00B3               	movwf	(_ui16_speed_fil+1)^(0+128)
  9840  1EED  0020               	movlb	0	; select bank0
  9841  1EEE  085B               	movf	_comm_time+1,w
  9842  1EEF  0022               	movlb	2	; select bank2
  9843  1EF0  00B4               	movwf	(_ui16_speed_rar+1)^(0+256)
  9844  1EF1  0020               	movlb	0	; select bank0
  9845  1EF2  085A               	movf	_comm_time,w
  9846  1EF3  0022               	movlb	2	; select bank2
  9847  1EF4  00B3               	movwf	_ui16_speed_rar^(0+256)
  9848  1EF5  0020               	movlb	0	; select bank0
  9849  1EF6  12E3               	bcf	_MotorFlags,5
  9850  1EF7  0021               	movlb	1	; select bank1
  9851  1EF8  01DF               	clrf	_ui8_sampleState^(0+128)
  9852  1EF9  0ADF               	incf	_ui8_sampleState^(0+128),f
  9853  1EFA  0020               	movlb	0	; select bank0
  9854  1EFB  17E3               	bsf	_MotorFlags,7
  9855  1EFC  0008               	return
  9856  1EFD                     __end_ofPL34:	
  9857  1EFD                     PL36:	
  9858  1EFD  0022               	movlb	2	; select bank2
  9859  1EFE  110E               	bcf	14,2	;volatile
  9860  1EFF  110D               	bcf	13,2	;volatile
  9861  1F00  3011               	movlw	17
  9862  1F01  0021               	movlb	1	; select bank1
  9863  1F02  00E2               	movwf	_ui8_IPhase_sel^(0+128)
  9864  1F03  3025               	movlw	37
  9865  1F04  00E1               	movwf	_ui8_UPhase_sel^(0+128)
  9866  1F05  3005               	movlw	5
  9867  1F06  00E0               	movwf	_ui8_Ubemf_sel^(0+128)
  9868  1F07  3001               	movlw	1
  9869  1F08  0022               	movlb	2	; select bank2
  9870  1F09  0092               	movwf	18	;volatile
  9871  1F0A  3084               	movlw	132
  9872  1F0B  0091               	movwf	17	;volatile
  9873  1F0C  0020               	movlb	0	; select bank0
  9874  1F0D  3404               	retlw	4
  9875  1F0E                     __end_ofPL36:	
  9876  1F0E                     PL38:	
  9877  1F0E  0022               	movlb	2	; select bank2
  9878  1F0F  110E               	bcf	14,2	;volatile
  9879  1F10  148D               	bsf	13,1	;volatile
  9880  1F11  3035               	movlw	53
  9881  1F12  0021               	movlb	1	; select bank1
  9882  1F13  00E2               	movwf	_ui8_IPhase_sel^(0+128)
  9883  1F14  3005               	movlw	5
  9884  1F15  00E1               	movwf	_ui8_UPhase_sel^(0+128)
  9885  1F16  3025               	movlw	37
  9886  1F17  00E0               	movwf	_ui8_Ubemf_sel^(0+128)
  9887  1F18  3002               	movlw	2
  9888  1F19  0022               	movlb	2	; select bank2
  9889  1F1A  0092               	movwf	18	;volatile
  9890  1F1B  3094               	movlw	148
  9891  1F1C  0091               	movwf	17	;volatile
  9892  1F1D  0020               	movlb	0	; select bank0
  9893  1F1E  3403               	retlw	3
  9894  1F1F                     __end_ofPL38:	
  9895  1F1F                     PL40:	
  9896  1F1F  0020               	movlb	0	; select bank0
  9897  1F20  085B               	movf	_comm_time+1,w
  9898  1F21  0023               	movlb	3	; select bank3
  9899  1F22  00D7               	movwf	(_phase_delay_counter+1)^(0+384)
  9900  1F23  0020               	movlb	0	; select bank0
  9901  1F24  085A               	movf	_comm_time,w
  9902  1F25  0023               	movlb	3	; select bank3
  9903  1F26  00D6               	movwf	_phase_delay_counter^(0+384)
  9904  1F27  0021               	movlb	1	; select bank1
  9905  1F28  0836               	movf	_ui16_phase_advancement^(0+128),w
  9906  1F29  0023               	movlb	3	; select bank3
  9907  1F2A  02D6               	subwf	_phase_delay_counter^(0+384),f
  9908  1F2B  0021               	movlb	1	; select bank1
  9909  1F2C  0837               	movf	(_ui16_phase_advancement+1)^(0+128),w
  9910  1F2D  0023               	movlb	3	; select bank3
  9911  1F2E  3BD7               	subwfb	(_phase_delay_counter+1)^(0+384),f
  9912  1F2F  0008               	return
  9913  1F30                     __end_ofPL40:	
  9914  1F30                     PL42:	
  9915  1F30  0022               	movlb	2	; select bank2
  9916  1F31  150E               	bsf	14,2	;volatile
  9917  1F32  110D               	bcf	13,2	;volatile
  9918  1F33  3011               	movlw	17
  9919  1F34  0021               	movlb	1	; select bank1
  9920  1F35  00E2               	movwf	_ui8_IPhase_sel^(0+128)
  9921  1F36  3025               	movlw	37
  9922  1F37  00E1               	movwf	_ui8_UPhase_sel^(0+128)
  9923  1F38  01E0               	clrf	_ui8_Ubemf_sel^(0+128)
  9924  1F39  0AE0               	incf	_ui8_Ubemf_sel^(0+128),f
  9925  1F3A  0022               	movlb	2	; select bank2
  9926  1F3B  0192               	clrf	18	;volatile
  9927  1F3C  3094               	movlw	148
  9928  1F3D  0091               	movwf	17	;volatile
  9929  1F3E  0020               	movlb	0	; select bank0
  9930  1F3F  3405               	retlw	5
  9931  1F40                     __end_ofPL42:	
  9932  1F40                     PL44:	
  9933  1F40  0022               	movlb	2	; select bank2
  9934  1F41  110E               	bcf	14,2	;volatile
  9935  1F42  108D               	bcf	13,1	;volatile
  9936  1F43  3035               	movlw	53
  9937  1F44  0021               	movlb	1	; select bank1
  9938  1F45  00E2               	movwf	_ui8_IPhase_sel^(0+128)
  9939  1F46  3005               	movlw	5
  9940  1F47  00E1               	movwf	_ui8_UPhase_sel^(0+128)
  9941  1F48  01E0               	clrf	_ui8_Ubemf_sel^(0+128)
  9942  1F49  0AE0               	incf	_ui8_Ubemf_sel^(0+128),f
  9943  1F4A  0022               	movlb	2	; select bank2
  9944  1F4B  0192               	clrf	18	;volatile
  9945  1F4C  3084               	movlw	132
  9946  1F4D  0091               	movwf	17	;volatile
  9947  1F4E  0020               	movlb	0	; select bank0
  9948  1F4F  3402               	retlw	2
  9949  1F50                     __end_ofPL44:	
  9950  1F50                     PL46:	
  9951  1F50  0022               	movlb	2	; select bank2
  9952  1F51  150D               	bsf	13,2	;volatile
  9953  1F52  108D               	bcf	13,1	;volatile
  9954  1F53  3009               	movlw	9
  9955  1F54  0021               	movlb	1	; select bank1
  9956  1F55  00E2               	movwf	_ui8_IPhase_sel^(0+128)
  9957  1F56  3005               	movlw	5
  9958  1F57  01E1               	clrf	_ui8_UPhase_sel^(0+128)
  9959  1F58  0AE1               	incf	_ui8_UPhase_sel^(0+128),f
  9960  1F59  00E0               	movwf	_ui8_Ubemf_sel^(0+128)
  9961  1F5A  3001               	movlw	1
  9962  1F5B  0022               	movlb	2	; select bank2
  9963  1F5C  0092               	movwf	18	;volatile
  9964  1F5D  3094               	movlw	148
  9965  1F5E  0091               	movwf	17	;volatile
  9966  1F5F  0008               	return
  9967  1F60                     __end_ofPL46:	
  9968  1F60                     PL48:	
  9969  1F60  00FC               	movwf	??_interrrupt_bldc
  9970  1F61  01FD               	clrf	??_interrrupt_bldc+1
  9971  1F62  0020               	movlb	0	; select bank0
  9972  1F63  0859               	movf	_ui16_IPhase_bldc+1,w	;volatile
  9973  1F64  027D               	subwf	??_interrrupt_bldc+1,w
  9974  1F65  1D03               	skipz
  9975  1F66  0008               	return
  9976  1F67  0858               	movf	_ui16_IPhase_bldc,w	;volatile
  9977  1F68  027C               	subwf	??_interrrupt_bldc,w
  9978  1F69  0008               	return
  9979  1F6A                     __end_ofPL48:	
  9980  1F6A                     PL66:	
  9981  1F6A  30F4               	movlw	244
  9982  1F6B  01D6               	clrf	_phase_delay_counter^(0+384)
  9983  1F6C  01D7               	clrf	(_phase_delay_counter+1)^(0+384)
  9984  1F6D  0022               	movlb	2	; select bank2
  9985  1F6E  00B1               	movwf	_ui16_comm_time_max^(0+256)
  9986  1F6F  3001               	movlw	1
  9987  1F70  00B2               	movwf	(_ui16_comm_time_max^(0+256)+1)
  9988  1F71  0020               	movlb	0	; select bank0
  9989  1F72  0008               	return
  9990  1F73                     __end_ofPL66:	
  9991  1F73                     PL70:	
  9992  1F73  0022               	movlb	2	; select bank2
  9993  1F74  080E               	movf	14,w	;volatile
  9994  1F75  39E5               	andlw	229
  9995  1F76  3818               	iorlw	24
  9996  1F77  008E               	movwf	14	;volatile
  9997  1F78  0008               	return
  9998  1F79                     __end_ofPL70:	
  9999  1F79                     PL74:	
 10000  1F79  0022               	movlb	2	; select bank2
 10001  1F7A  080E               	movf	14,w	;volatile
 10002  1F7B  39E5               	andlw	229
 10003  1F7C  380A               	iorlw	10
 10004  1F7D  008E               	movwf	14	;volatile
 10005  1F7E  0008               	return
 10006  1F7F                     __end_ofPL74:	
 10007  1F7F                     PL78:	
 10008  1F7F  0022               	movlb	2	; select bank2
 10009  1F80  080E               	movf	14,w	;volatile
 10010  1F81  39E5               	andlw	229
 10011  1F82  3812               	iorlw	18
 10012  1F83  008E               	movwf	14	;volatile
 10013  1F84  0008               	return
 10014  1F85                     __end_ofPL78:	
 10015  1F85                     PL84:	
 10016  1F85  0859               	movf	_ui16_IPhase_bldc+1,w	;volatile
 10017  1F86  00F1               	movwf	i1___wmul@multiplier+1
 10018  1F87  0858               	movf	_ui16_IPhase_bldc,w	;volatile
 10019  1F88  00F0               	movwf	i1___wmul@multiplier
 10020  1F89  0022               	movlb	2	; select bank2
 10021  1F8A  0008               	return
 10022  1F8B                     __end_ofPL84:	
 10023  1F8B                     PL90:	
 10024  1F8B  0025               	movlb	5	; select bank5
 10025  1F8C  0A91               	incf	17,f	;volatile
 10026  1F8D  0020               	movlb	0	; select bank0
 10027  1F8E  0864               	movf	_ui8_duty_cycle_BLDC,w
 10028  1F8F  0025               	movlb	5	; select bank5
 10029  1F90  0211               	subwf	17,w	;volatile
 10030  1F91  0008               	return
 10031  1F92                     __end_ofPL90:	
 10032  1F92                     PL92:	
 10033  1F92  3028               	movlw	40
 10034  1F93  00E3               	movwf	_ui8_BlankingCount^(0+128)
 10035  1F94  0020               	movlb	0	; select bank0
 10036  1F95  01DA               	clrf	_comm_time
 10037  1F96  01DB               	clrf	_comm_time+1
 10038  1F97  0008               	return
 10039  1F98                     __end_ofPL92:	
 10040  1F98                     PL100:	
 10041  1F98  0020               	movlb	0	; select bank0
 10042  1F99  1068               	bcf	_rising_bemf_flag/(0+8),_rising_bemf_flag& (0+7)
 10043  1F9A  0021               	movlb	1	; select bank1
 10044  1F9B  01E4               	clrf	_comm_state^(0+128)
 10045  1F9C  0AE4               	incf	_comm_state^(0+128),f
 10046  1F9D  0008               	return
 10047  1F9E                     __end_ofPL100:	
 10048  1F9E                     PL108:	
 10049  1F9E  0025               	movlb	5	; select bank5
 10050  1F9F  0391               	decf	17,f	;volatile
 10051  1FA0  0811               	movf	17,w	;volatile
 10052  1FA1  0020               	movlb	0	; select bank0
 10053  1FA2  0264               	subwf	_ui8_duty_cycle_BLDC,w
 10054  1FA3  0008               	return
 10055  1FA4                     __end_ofPL108:	
 10056  1FA4                     PL114:	
 10057  1FA4  081C               	movf	28,w	;volatile
 10058  1FA5  00BB               	movwf	(_analog_value^(0+128)+1)	;volatile
 10059  1FA6  081B               	movf	27,w	;volatile
 10060  1FA7  00BA               	movwf	_analog_value^(0+128)	;volatile
 10061  1FA8  083B               	movf	(_analog_value+1)^(0+128),w	;volatile
 10062  1FA9  0008               	return
 10063  1FAA                     __end_ofPL114:	
 10064  1FAA                     PL118:	
 10065  1FAA  30A6               	movlw	166
 10066  1FAB  0022               	movlb	2	; select bank2
 10067  1FAC  00B1               	movwf	_ui16_comm_time_max^(0+256)
 10068  1FAD  01B2               	clrf	(_ui16_comm_time_max+1)^(0+256)
 10069  1FAE  0008               	return
 10070  1FAF                     __end_ofPL118:	
 10071  1FAF                     PL120:	
 10072  1FAF  0025               	movlb	5	; select bank5
 10073  1FB0  0811               	movf	17,w	;volatile
 10074  1FB1  0020               	movlb	0	; select bank0
 10075  1FB2  0664               	xorwf	_ui8_duty_cycle_BLDC,w
 10076  1FB3  0008               	return
 10077  1FB4                     __end_ofPL120:	
 10078  1FB4                     PL122:	
 10079  1FB4  30E8               	movlw	232
 10080  1FB5  0022               	movlb	2	; select bank2
 10081  1FB6  00B1               	movwf	_ui16_comm_time_max^(0+256)
 10082  1FB7  3403               	retlw	3
 10083  1FB8                     __end_ofPL122:	
 10084  1FB8                     PL124:	
 10085  1FB8  30F4               	movlw	244
 10086  1FB9  00B1               	movwf	_ui16_comm_time_max^(0+256)
 10087  1FBA  3001               	movlw	1
 10088  1FBB  00B2               	movwf	(_ui16_comm_time_max^(0+256)+1)
 10089  1FBC  0008               	return
 10090  1FBD                     __end_ofPL124:	
 10091  1FBD                     PL126:	
 10092  1FBD  0838               	movf	_ui16_step_cnt^(0+128),w
 10093  1FBE  0084               	movwf	4
 10094  1FBF  300A               	movlw	10
 10095  1FC0  0204               	subwf	4,w
 10096  1FC1  0008               	return
 10097  1FC2                     __end_ofPL126:	
 10098  1FC2                     PL128:	
 10099  1FC2  0025               	movlb	5	; select bank5
 10100  1FC3  0196               	clrf	22	;volatile
 10101  1FC4  0022               	movlb	2	; select bank2
 10102  1FC5  0191               	clrf	17	;volatile
 10103  1FC6  0008               	return
 10104  1FC7                     __end_ofPL128:	
 10105  1FC7                     PL134:	
 10106  1FC7  0020               	movlb	0	; select bank0
 10107  1FC8  01DA               	clrf	_comm_time
 10108  1FC9  01DB               	clrf	_comm_time+1
 10109  1FCA  0021               	movlb	1	; select bank1
 10110  1FCB  0008               	return
 10111  1FCC                     __end_ofPL134:	
 10112  1FCC                     PL136:	
 10113  1FCC  309A               	movlw	154
 10114  1FCD  0022               	movlb	2	; select bank2
 10115  1FCE  00B1               	movwf	_ui16_comm_time_max^(0+256)
 10116  1FCF  3402               	retlw	2
 10117  1FD0                     __end_ofPL136:	
 10118  1FD0                     PL140:	
 10119  1FD0  0025               	movlb	5	; select bank5
 10120  1FD1  0811               	movf	17,w	;volatile
 10121  1FD2  0020               	movlb	0	; select bank0
 10122  1FD3  0264               	subwf	_ui8_duty_cycle_BLDC,w
 10123  1FD4  0008               	return
 10124  1FD5                     __end_ofPL140:	
 10125  1FD5                     PL142:	
 10126  1FD5  30F4               	movlw	244
 10127  1FD6  0022               	movlb	2	; select bank2
 10128  1FD7  00B1               	movwf	_ui16_comm_time_max^(0+256)
 10129  1FD8  3401               	retlw	1
 10130  1FD9                     __end_ofPL142:	
 10131  1FD9                     __ptext54:	
 10132 ;; *************** function i1___lwdiv *****************
 10133 ;; Defined at:
 10134 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
 10135 ;; Parameters:    Size  Location     Type
 10136 ;;  divisor         2    0[COMMON] unsigned int 
 10137 ;;  dividend        2    2[COMMON] unsigned int 
 10138 ;; Auto vars:     Size  Location     Type
 10139 ;;  __lwdiv         2    5[COMMON] unsigned int 
 10140 ;;  __lwdiv         1    4[COMMON] unsigned char 
 10141 ;; Return value:  Size  Location     Type
 10142 ;;                  2    0[COMMON] unsigned int 
 10143 ;; Registers used:
 10144 ;;		wreg, status,2, status,0
 10145 ;; Tracked objects:
 10146 ;;		On entry : 1F/0
 10147 ;;		On exit  : 1F/0
 10148 ;;		Unchanged: 1F/0
 10149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10150 ;;      Params:         4       0       0       0       0       0       0       0
 10151 ;;      Locals:         3       0       0       0       0       0       0       0
 10152 ;;      Temps:          0       0       0       0       0       0       0       0
 10153 ;;      Totals:         7       0       0       0       0       0       0       0
 10154 ;;Total ram usage:        7 bytes
 10155 ;; Hardware stack levels used:    1
 10156 ;; This function calls:
 10157 ;;		Nothing
 10158 ;; This function is called by:
 10159 ;;		_interrrupt_bldc
 10160 ;; This function uses a non-reentrant model
 10161 ;;
 10162                           
 10163                           
 10164                           ;psect for function i1___lwdiv
 10165  1FD9                     i1___lwdiv:	
 10166                           
 10167                           ;incstack = 0
 10168                           ; Regs used in i1___lwdiv: [wreg+status,2+status,0]
 10169  1FD9  01F5               	clrf	i1___lwdiv@quotient
 10170  1FDA  01F6               	clrf	i1___lwdiv@quotient+1
 10171  1FDB  0870               	movf	i1___lwdiv@divisor,w
 10172  1FDC  0471               	iorwf	i1___lwdiv@divisor+1,w
 10173  1FDD  1903               	btfsc	3,2
 10174  1FDE  2FF9               	goto	i1l12524
 10175  1FDF  01F4               	clrf	i1___lwdiv@counter
 10176  1FE0                     L59:	
 10177  1FE0  0AF4               	incf	i1___lwdiv@counter,f
 10178  1FE1  1BF1               	btfsc	i1___lwdiv@divisor+1,7
 10179  1FE2  2FE6               	goto	i1l12512
 10180  1FE3  35F0               	lslf	i1___lwdiv@divisor,f
 10181  1FE4  0DF1               	rlf	i1___lwdiv@divisor+1,f
 10182  1FE5  2FE0               	goto	L59
 10183  1FE6                     i1l12512:	
 10184  1FE6  35F5               	lslf	i1___lwdiv@quotient,f
 10185  1FE7  0DF6               	rlf	i1___lwdiv@quotient+1,f
 10186  1FE8  0871               	movf	i1___lwdiv@divisor+1,w
 10187  1FE9  0273               	subwf	i1___lwdiv@dividend+1,w
 10188  1FEA  1D03               	skipz
 10189  1FEB  2FEE               	goto	u1074_25
 10190  1FEC  0870               	movf	i1___lwdiv@divisor,w
 10191  1FED  0272               	subwf	i1___lwdiv@dividend,w
 10192  1FEE                     u1074_25:	
 10193  1FEE  1C03               	skipc
 10194  1FEF  2FF5               	goto	i1l12520
 10195  1FF0  0870               	movf	i1___lwdiv@divisor,w
 10196  1FF1  02F2               	subwf	i1___lwdiv@dividend,f
 10197  1FF2  0871               	movf	i1___lwdiv@divisor+1,w
 10198  1FF3  3BF3               	subwfb	i1___lwdiv@dividend+1,f
 10199  1FF4  1475               	bsf	i1___lwdiv@quotient,0
 10200  1FF5                     i1l12520:	
 10201  1FF5  36F1               	lsrf	i1___lwdiv@divisor+1,f
 10202  1FF6  0CF0               	rrf	i1___lwdiv@divisor,f
 10203  1FF7  0BF4               	decfsz	i1___lwdiv@counter,f
 10204  1FF8  2FE6               	goto	i1l12512
 10205  1FF9                     i1l12524:	
 10206  1FF9  0876               	movf	i1___lwdiv@quotient+1,w
 10207  1FFA  00F1               	movwf	?i1___lwdiv+1
 10208  1FFB  0875               	movf	i1___lwdiv@quotient,w
 10209  1FFC  00F0               	movwf	?i1___lwdiv
 10210  1FFD  0008               	return
 10211  1FFE                     __end_ofi1___lwdiv:	
 10212                           
 10213                           	psect	swtext1
 10214  0717                     __pswtext1:	
 10215  0717                     S14498:	
 10216  0717  319A  2AF1         	ljmp	l5936
 10217  0719  319A  2AF4         	ljmp	l5938
 10218  071B  319A  2AF7         	ljmp	l5940
 10219  071D  319A  2AFA         	ljmp	l5942
 10220  071F  319A  2AFA         	ljmp	l5942
 10221  0721  319A  2AFA         	ljmp	l5942
 10222  0723  319A  2AFA         	ljmp	l5942
 10223  0725  319A  2AFA         	ljmp	l5942
 10224  0727  319A  2AFA         	ljmp	l5942
 10225  0729  319A  2AFA         	ljmp	l5942
 10226                           
 10227                           	psect	text11
 10228  10A1                     __ptext11:	
 10229 ;; *************** function _I_calibrationInit *****************
 10230 ;; Defined at:
 10231 ;;		line 174 in file "../main.c"
 10232 ;; Parameters:    Size  Location     Type
 10233 ;;		None
 10234 ;; Auto vars:     Size  Location     Type
 10235 ;;		None
 10236 ;; Return value:  Size  Location     Type
 10237 ;;                  1    wreg      void 
 10238 ;; Registers used:
 10239 ;;		wreg, status,2, status,0, pclath, cstack
 10240 ;; Tracked objects:
 10241 ;;		On entry : 1F/3
 10242 ;;		On exit  : 1F/2
 10243 ;;		Unchanged: 0/0
 10244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10245 ;;      Params:         0       0       0       0       0       0       0       0
 10246 ;;      Locals:         0       0       0       0       0       0       0       0
 10247 ;;      Temps:          0       1       0       0       0       0       0       0
 10248 ;;      Totals:         0       1       0       0       0       0       0       0
 10249 ;;Total ram usage:        1 bytes
 10250 ;; Hardware stack levels used:    1
 10251 ;; Hardware stack levels required when called:    4
 10252 ;; This function calls:
 10253 ;;		_ADC_Read
 10254 ;;		_ADC_Wait
 10255 ;;		_read_eeprom_data
 10256 ;; This function is called by:
 10257 ;;		_system_init
 10258 ;; This function uses a non-reentrant model
 10259 ;;
 10260                           
 10261                           
 10262                           ;psect for function _I_calibrationInit
 10263  10A1                     _I_calibrationInit:	
 10264                           
 10265                           ;main.c: 178: if ( read_eeprom_data( 0x03 ) != 0x00 && read_eeprom_data( 0x03 ) != 0xFF)
 10266                           
 10267                           ;incstack = 0
 10268                           ; Regs used in _I_calibrationInit: [wreg+status,2+status,0+pclath+cstack]
 10269  10A1  3003               	movlw	3
 10270  10A2  25BD  3190         	fcall	_read_eeprom_data
 10271  10A4  3A00               	xorlw	0
 10272  10A5  1903               	skipnz
 10273  10A6  28BB               	goto	l12372
 10274  10A7  3003               	movlw	3
 10275  10A8  25BD  3190         	fcall	_read_eeprom_data
 10276  10AA  3AFF               	xorlw	255
 10277  10AB  1903               	skipnz
 10278  10AC  28BB               	goto	l12372
 10279                           
 10280                           ;main.c: 180: {
 10281                           ;main.c: 182: ui16_I_cal_Ph1 = ( read_eeprom_data( 0x02 )<<8 ) | read_eeprom_data( 0x03 
      +                          );
 10282  10AD  3003               	movlw	3
 10283  10AE  25BD  3190         	fcall	_read_eeprom_data
 10284  10B0  00A7               	movwf	??_I_calibrationInit
 10285  10B1  3002               	movlw	2
 10286  10B2  25BD  3190         	fcall	_read_eeprom_data
 10287  10B4  0021               	movlb	1	; select bank1
 10288  10B5  00ED               	movwf	(_ui16_I_cal_Ph1+1)^(0+128)
 10289  10B6  0020               	movlb	0	; select bank0
 10290  10B7  0827               	movf	??_I_calibrationInit,w
 10291  10B8  0021               	movlb	1	; select bank1
 10292  10B9  00EC               	movwf	_ui16_I_cal_Ph1^(0+128)
 10293                           
 10294                           ;main.c: 185: }
 10295  10BA  28BF               	goto	l12374
 10296  10BB                     l12372:	
 10297                           
 10298                           ;main.c: 188: else
 10299                           ;main.c: 189: {
 10300                           ;main.c: 191: ui16_I_cal_Ph1 = 0x0100;
 10301  10BB  0021               	movlb	1	; select bank1
 10302  10BC  3001               	movlw	1
 10303  10BD  01EC               	clrf	_ui16_I_cal_Ph1^(0+128)
 10304  10BE  00ED               	movwf	(_ui16_I_cal_Ph1^(0+128)+1)
 10305  10BF                     l12374:	
 10306                           
 10307                           ;main.c: 194: }
 10308                           ;main.c: 197: if ( read_eeprom_data( 0x05 ) != 0x00 && read_eeprom_data( 0x05 ) != 0xFF)
 10309  10BF  3005               	movlw	5
 10310  10C0  25BD  3190         	fcall	_read_eeprom_data
 10311  10C2  3A00               	xorlw	0
 10312  10C3  1903               	skipnz
 10313  10C4  28D9               	goto	l12380
 10314  10C5  3005               	movlw	5
 10315  10C6  25BD  3190         	fcall	_read_eeprom_data
 10316  10C8  3AFF               	xorlw	255
 10317  10C9  1903               	skipnz
 10318  10CA  28D9               	goto	l12380
 10319                           
 10320                           ;main.c: 199: {
 10321                           ;main.c: 201: ui16_I_cal_Ph2 = ( read_eeprom_data( 0x04 )<<8 ) | read_eeprom_data( 0x05 
      +                          );
 10322  10CB  3005               	movlw	5
 10323  10CC  25BD  3190         	fcall	_read_eeprom_data
 10324  10CE  00A7               	movwf	??_I_calibrationInit
 10325  10CF  3004               	movlw	4
 10326  10D0  25BD  3190         	fcall	_read_eeprom_data
 10327  10D2  0021               	movlb	1	; select bank1
 10328  10D3  00EB               	movwf	(_ui16_I_cal_Ph2+1)^(0+128)
 10329  10D4  0020               	movlb	0	; select bank0
 10330  10D5  0827               	movf	??_I_calibrationInit,w
 10331  10D6  0021               	movlb	1	; select bank1
 10332  10D7  00EA               	movwf	_ui16_I_cal_Ph2^(0+128)
 10333                           
 10334                           ;main.c: 204: }
 10335  10D8  28DD               	goto	l12382
 10336  10D9                     l12380:	
 10337                           
 10338                           ;main.c: 207: else
 10339                           ;main.c: 208: {
 10340                           ;main.c: 210: ui16_I_cal_Ph2 = 0x0100;
 10341  10D9  0021               	movlb	1	; select bank1
 10342  10DA  3001               	movlw	1
 10343  10DB  01EA               	clrf	_ui16_I_cal_Ph2^(0+128)
 10344  10DC  00EB               	movwf	(_ui16_I_cal_Ph2^(0+128)+1)
 10345  10DD                     l12382:	
 10346                           
 10347                           ;main.c: 213: }
 10348                           ;main.c: 216: if ( read_eeprom_data( 0x07 ) != 0x00 && read_eeprom_data( 0x07 ) != 0xFF)
 10349  10DD  3007               	movlw	7
 10350  10DE  25BD  3190         	fcall	_read_eeprom_data
 10351  10E0  3A00               	xorlw	0
 10352  10E1  1903               	skipnz
 10353  10E2  28F7               	goto	l12388
 10354  10E3  3007               	movlw	7
 10355  10E4  25BD  3190         	fcall	_read_eeprom_data
 10356  10E6  3AFF               	xorlw	255
 10357  10E7  1903               	skipnz
 10358  10E8  28F7               	goto	l12388
 10359                           
 10360                           ;main.c: 218: {
 10361                           ;main.c: 220: ui16_I_cal_Ph3 = ( read_eeprom_data( 0x06 )<<8 ) | read_eeprom_data( 0x07 
      +                          );
 10362  10E9  3007               	movlw	7
 10363  10EA  25BD  3190         	fcall	_read_eeprom_data
 10364  10EC  00A7               	movwf	??_I_calibrationInit
 10365  10ED  3006               	movlw	6
 10366  10EE  25BD  3190         	fcall	_read_eeprom_data
 10367  10F0  0021               	movlb	1	; select bank1
 10368  10F1  00E9               	movwf	(_ui16_I_cal_Ph3+1)^(0+128)
 10369  10F2  0020               	movlb	0	; select bank0
 10370  10F3  0827               	movf	??_I_calibrationInit,w
 10371  10F4  0021               	movlb	1	; select bank1
 10372  10F5  00E8               	movwf	_ui16_I_cal_Ph3^(0+128)
 10373                           
 10374                           ;main.c: 222: }
 10375  10F6  28FB               	goto	l12390
 10376  10F7                     l12388:	
 10377                           
 10378                           ;main.c: 225: else
 10379                           ;main.c: 226: {
 10380                           ;main.c: 228: ui16_I_cal_Ph3 = 0x0100;
 10381  10F7  0021               	movlb	1	; select bank1
 10382  10F8  3001               	movlw	1
 10383  10F9  01E8               	clrf	_ui16_I_cal_Ph3^(0+128)
 10384  10FA  00E9               	movwf	(_ui16_I_cal_Ph3^(0+128)+1)
 10385  10FB                     l12390:	
 10386                           
 10387                           ;main.c: 231: }
 10388                           ;main.c: 324: LATC2 = 0;
 10389  10FB  0022               	movlb	2	; select bank2
 10390  10FC  110E               	bcf	14,2	;volatile
 10391                           
 10392                           ;main.c: 325: LATB2 = 0;
 10393  10FD  110D               	bcf	13,2	;volatile
 10394                           
 10395                           ;main.c: 326: LATB1 = 0;
 10396  10FE  108D               	bcf	13,1	;volatile
 10397                           
 10398                           ;main.c: 327: LATC = LATC | 0b00011010;
 10399  10FF  080E               	movf	14,w	;volatile
 10400  1100  381A               	iorlw	26
 10401  1101  008E               	movwf	14	;volatile
 10402                           
 10403                           ;main.c: 329: ADC_Wait();
 10404  1102  2623  3190         	fcall	_ADC_Wait
 10405                           
 10406                           ;main.c: 330: ADC_Wait();
 10407  1104  2623  3190         	fcall	_ADC_Wait
 10408                           
 10409                           ;main.c: 332: ( ADCON0 = ( 0x04 << 2 ) | 0x01 );
 10410  1106  3011               	movlw	17
 10411  1107  0021               	movlb	1	; select bank1
 10412  1108  009D               	movwf	29	;volatile
 10413                           
 10414                           ;main.c: 333: ADC_Wait();
 10415  1109  2623               	fcall	_ADC_Wait
 10416                           
 10417                           ;main.c: 334: ( GO_nDONE = 1 );
 10418  110A  0021               	movlb	1	; select bank1
 10419  110B  149D               	bsf	29,1	;volatile
 10420                           
 10421                           ;main.c: 337: ui8_current_cal[2] = ADC_Read();
 10422  110C  3184  24CF  3190   	fcall	_ADC_Read
 10423  110F  0824               	movf	?_ADC_Read,w
 10424  1110  0022               	movlb	2	; select bank2
 10425  1111  00A2               	movwf	(_ui8_current_cal^(0+256)+2)
 10426                           
 10427                           ;main.c: 339: ( ADCON0 = ( 0x0D << 2 ) | 0x01 );
 10428  1112  3035               	movlw	53
 10429  1113  0021               	movlb	1	; select bank1
 10430  1114  009D               	movwf	29	;volatile
 10431                           
 10432                           ;main.c: 340: ADC_Wait();
 10433  1115  2623               	fcall	_ADC_Wait
 10434                           
 10435                           ;main.c: 341: ( GO_nDONE = 1 );
 10436  1116  0021               	movlb	1	; select bank1
 10437  1117  149D               	bsf	29,1	;volatile
 10438                           
 10439                           ;main.c: 344: ui8_current_cal[1] = ADC_Read();
 10440  1118  3184  24CF  3190   	fcall	_ADC_Read
 10441  111B  0824               	movf	?_ADC_Read,w
 10442  111C  0022               	movlb	2	; select bank2
 10443  111D  00A1               	movwf	(_ui8_current_cal^(0+256)+1)
 10444                           
 10445                           ;main.c: 346: ( ADCON0 = ( 0x02 << 2 ) | 0x01 );
 10446  111E  3009               	movlw	9
 10447  111F  0021               	movlb	1	; select bank1
 10448  1120  009D               	movwf	29	;volatile
 10449                           
 10450                           ;main.c: 347: ADC_Wait();
 10451  1121  2623               	fcall	_ADC_Wait
 10452                           
 10453                           ;main.c: 348: ( GO_nDONE = 1 );
 10454  1122  0021               	movlb	1	; select bank1
 10455  1123  149D               	bsf	29,1	;volatile
 10456                           
 10457                           ;main.c: 351: ui8_current_cal[0] = ADC_Read();
 10458  1124  3184  24CF         	fcall	_ADC_Read
 10459  1126  0824               	movf	?_ADC_Read,w
 10460  1127  0022               	movlb	2	; select bank2
 10461  1128  00A0               	movwf	_ui8_current_cal^(0+256)
 10462  1129  0008               	return
 10463  112A                     __end_of_I_calibrationInit:	
 10464  112A                     __ptext24:	
 10465 ;; *************** function _EOL *****************
 10466 ;; Defined at:
 10467 ;;		line 456 in file "../diag.c"
 10468 ;; Parameters:    Size  Location     Type
 10469 ;;		None
 10470 ;; Auto vars:     Size  Location     Type
 10471 ;;  _dcnt           1   45[BANK0 ] unsigned char 
 10472 ;;  _dcnt           1   44[BANK0 ] unsigned char 
 10473 ;;  _dcnt           1   43[BANK0 ] unsigned char 
 10474 ;;  _dcnt           1   42[BANK0 ] unsigned char 
 10475 ;;  _dcnt           1   41[BANK0 ] unsigned char 
 10476 ;;  _dcnt           1   40[BANK0 ] unsigned char 
 10477 ;;  _dcnt           1   39[BANK0 ] unsigned char 
 10478 ;;  _dcnt           1   38[BANK0 ] unsigned char 
 10479 ;;  _dcnt           1   37[BANK0 ] unsigned char 
 10480 ;;  _dcnt           1   36[BANK0 ] unsigned char 
 10481 ;;  _dcnt           1   35[BANK0 ] unsigned char 
 10482 ;;  _dcnt           1   34[BANK0 ] unsigned char 
 10483 ;;  _dcnt           1   33[BANK0 ] unsigned char 
 10484 ;;  _dcnt           1   32[BANK0 ] unsigned char 
 10485 ;;  _dcnt           1   31[BANK0 ] unsigned char 
 10486 ;;  _dcnt           1   30[BANK0 ] unsigned char 
 10487 ;;  _dcnt           1   29[BANK0 ] unsigned char 
 10488 ;;  _dcnt           1   28[BANK0 ] unsigned char 
 10489 ;;  ui8_b_DResB3    1   51[BANK0 ] unsigned char 
 10490 ;;  ui8_b_DResB2    1   50[BANK0 ] unsigned char 
 10491 ;;  ui8_b_DResB1    1   49[BANK0 ] unsigned char 
 10492 ;;  ui8_b_DResB0    1   48[BANK0 ] unsigned char 
 10493 ;;  ui8_b_DResB4    1   47[BANK0 ] unsigned char 
 10494 ;;  ui8_b_DResB5    1   46[BANK0 ] unsigned char 
 10495 ;; Return value:  Size  Location     Type
 10496 ;;                  1    wreg      void 
 10497 ;; Registers used:
 10498 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10499 ;; Tracked objects:
 10500 ;;		On entry : 1F/0
 10501 ;;		On exit  : 1E/0
 10502 ;;		Unchanged: 0/0
 10503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10504 ;;      Params:         0       0       0       0       0       0       0       0
 10505 ;;      Locals:         0      24       0       0       0       0       0       0
 10506 ;;      Temps:          0       3       0       0       0       0       0       0
 10507 ;;      Totals:         0      27       0       0       0       0       0       0
 10508 ;;Total ram usage:       27 bytes
 10509 ;; Hardware stack levels used:    1
 10510 ;; Hardware stack levels required when called:    7
 10511 ;; This function calls:
 10512 ;;		_ADC_Read
 10513 ;;		_ADC_Wait
 10514 ;;		_InitMotorStop
 10515 ;;		_NegativeAnswer
 10516 ;;		_PWMReadDC
 10517 ;;		_PWM_Write_Out
 10518 ;;		_Transmit_LIN_8Bytes
 10519 ;;		___lwdiv
 10520 ;;		___wmul
 10521 ;;		_cksum
 10522 ;;		_read_eeprom_data
 10523 ;;		_write_eeprom_data
 10524 ;; This function is called by:
 10525 ;;		_main
 10526 ;; This function uses a non-reentrant model
 10527 ;;
 10528                           
 10529                           
 10530                           ;psect for function _EOL
 10531  112A                     _EOL:	
 10532                           
 10533                           ;diag.c: 460: unsigned char ui8_b_DResB0_RD;
 10534                           ;diag.c: 461: unsigned char ui8_b_DResB1_RD;
 10535                           ;diag.c: 462: unsigned char ui8_b_DResB2_RD;
 10536                           ;diag.c: 463: unsigned char ui8_b_DResB3_RD;
 10537                           ;diag.c: 464: unsigned char ui8_b_DResB4_RD;
 10538                           ;diag.c: 465: unsigned char ui8_b_DResB5_RD;
 10539                           ;diag.c: 469: if( ui8_b_DResServID_c == 0x3b )
 10540                           
 10541                           ;incstack = 0
 10542                           ; Regs used in _EOL: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10543  112A  303B               	movlw	59
 10544  112B  0021               	movlb	1	; select bank1
 10545  112C  0658               	xorwf	_ui8_b_DResServID_c^(0+128),w
 10546  112D  1D03               	btfss	3,2
 10547  112E  2DBA               	goto	l13354
 10548                           
 10549                           ;diag.c: 471: {
 10550                           ;diag.c: 477: ui8_selected_lid = ui8_b_DResLocID_c;
 10551  112F  0020               	movlb	0	; select bank0
 10552  1130  0862               	movf	_ui8_b_DResLocID_c,w
 10553  1131  00E9               	movwf	_ui8_selected_lid
 10554                           
 10555                           ;diag.c: 2406: break;
 10556                           
 10557                           ;diag.c: 482: switch( ui8_b_DResLocID_c)
 10558  1132  0862               	movf	_ui8_b_DResLocID_c,w
 10559                           
 10560                           ; Switch size 1, requested type "space"
 10561                           ; Number of cases is 10, Range of values is 128 to 250
 10562                           ; switch strategies available:
 10563                           ; Name         Instructions Cycles
 10564                           ; simple_byte           31    16 (average)
 10565                           ; direct_byte          255     9 (fixed)
 10566                           ; jumptable            263     9 (fixed)
 10567                           ;	Chosen strategy is simple_byte
 10568  1133  3A80               	xorlw	128	; case 128
 10569  1134  1903               	skipnz
 10570  1135  2952               	goto	l12806
 10571  1136  3A10               	xorlw	16	; case 144
 10572  1137  1903               	skipnz
 10573  1138  2962               	goto	l12814
 10574  1139  3A01               	xorlw	1	; case 145
 10575  113A  1903               	skipnz
 10576  113B  29C1               	goto	l12854
 10577  113C  3A02               	xorlw	2	; case 147
 10578  113D  1903               	skipnz
 10579  113E  29F5               	goto	l12876
 10580  113F  3A07               	xorlw	7	; case 148
 10581  1140  1903               	skipnz
 10582  1141  2A63               	goto	l12934
 10583  1142  3A01               	xorlw	1	; case 149
 10584  1143  1903               	skipnz
 10585  1144  2AB9               	goto	l12964
 10586  1145  3A0D               	xorlw	13	; case 152
 10587  1146  1903               	skipnz
 10588  1147  2C7C               	goto	l13132
 10589  1148  3A07               	xorlw	7	; case 159
 10590  1149  1903               	skipnz
 10591  114A  2D08               	goto	l13230
 10592  114B  3A3F               	xorlw	63	; case 160
 10593  114C  1903               	skipnz
 10594  114D  2D4C               	goto	l13308
 10595  114E  3A5A               	xorlw	90	; case 250
 10596  114F  1903               	skipnz
 10597  1150  2DA6               	goto	l13340
 10598  1151  2DB8               	goto	l13348
 10599  1152                     l12806:	
 10600                           
 10601                           ;diag.c: 490: {
 10602                           ;diag.c: 492: if( 0x80 == ui8_selected_lid )
 10603  1152  3080               	movlw	128
 10604  1153  0669               	xorwf	_ui8_selected_lid,w
 10605  1154  1D03               	btfss	3,2
 10606  1155  0008               	return
 10607                           
 10608                           ;diag.c: 494: {
 10609                           ;diag.c: 496: ui8_selected_lid = 0x90;
 10610  1156  3090               	movlw	144
 10611  1157  00E9               	movwf	_ui8_selected_lid
 10612                           
 10613                           ;diag.c: 497: ict_stamp = 1;
 10614  1158  0022               	movlb	2	; select bank2
 10615  1159  303A               	movlw	58
 10616  115A  01EF               	clrf	_ict_stamp^(0+256)
 10617  115B  0AEF               	incf	_ict_stamp^(0+256),f
 10618                           
 10619                           ;diag.c: 499: Transmit_LIN_8Bytes( 0x10, 0x3A, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
      +                          );
 10620  115C  0020               	movlb	0	; select bank0
 10621  115D  00AF               	movwf	Transmit_LIN_8Bytes@B0
 10622  115E  3080               	movlw	128
 10623  115F  26F4  3190         	fcall	PL76	;call to abstracted procedure
 10624  1161  2DE1               	ljmp	_Transmit_LIN_8Bytes
 10625  1162                     l12814:	
 10626                           ;diag.c: 516: }
 10627                           ;diag.c: 519: break;
 10628                           
 10629                           ;diag.c: 506: else
 10630                           ;diag.c: 507: {
 10631                           
 10632                           ;diag.c: 503: }
 10633                           
 10634                           
 10635                           ;diag.c: 529: {
 10636                           ;diag.c: 531: if( 0x90 == ui8_selected_lid )
 10637  1162  3090               	movlw	144
 10638  1163  0669               	xorwf	_ui8_selected_lid,w
 10639  1164  1D03               	btfss	3,2
 10640  1165  0008               	return
 10641  1166  2999               	goto	l12836
 10642  1167                     l12818:	
 10643                           
 10644                           ;diag.c: 557: {
 10645                           ;diag.c: 559: ui8_b_DResB0_RD = read_eeprom_data( 0xf0 );
 10646  1167  30F0               	movlw	240
 10647  1168  25BD  3190         	fcall	_read_eeprom_data
 10648  116A  00D0               	movwf	EOL@ui8_b_DResB0_RD
 10649                           
 10650                           ;diag.c: 560: ui8_b_DResB1_RD = read_eeprom_data( 0xf1 );
 10651  116B  30F1               	movlw	241
 10652  116C  25BD  3190         	fcall	_read_eeprom_data
 10653  116E  00D1               	movwf	EOL@ui8_b_DResB1_RD
 10654                           
 10655                           ;diag.c: 561: ui8_b_DResB2_RD = read_eeprom_data( 0xf2 );
 10656  116F  30F2               	movlw	242
 10657  1170  25BD  3190         	fcall	_read_eeprom_data
 10658  1172  00D2               	movwf	EOL@ui8_b_DResB2_RD
 10659                           
 10660                           ;diag.c: 562: ui8_b_DResB3_RD = read_eeprom_data( 0xf3 );
 10661  1173  30F3               	movlw	243
 10662  1174  25BD  3190         	fcall	_read_eeprom_data
 10663  1176  00D3               	movwf	EOL@ui8_b_DResB3_RD
 10664  1177  3002               	movlw	2
 10665                           
 10666                           ;diag.c: 563: ui8_b_DResB4_RD = 0;
 10667  1178  01CF               	clrf	EOL@ui8_b_DResB4_RD
 10668                           
 10669                           ;diag.c: 564: ui8_b_DResB5_RD = 0;
 10670  1179  01CE               	clrf	EOL@ui8_b_DResB5_RD
 10671                           
 10672                           ;diag.c: 566: ict_stamp = 2;
 10673  117A  0022               	movlb	2	; select bank2
 10674  117B  00EF               	movwf	_ict_stamp^(0+256)
 10675                           
 10676                           ;diag.c: 567: break;
 10677  117C  29A2               	goto	l12838
 10678  117D                     l12826:	
 10679                           
 10680                           ;diag.c: 574: {
 10681                           ;diag.c: 576: ui8_b_DResB0_RD = read_eeprom_data( 0xeb );
 10682  117D  30EB               	movlw	235
 10683  117E  25BD  3190         	fcall	_read_eeprom_data
 10684  1180  00D0               	movwf	EOL@ui8_b_DResB0_RD
 10685                           
 10686                           ;diag.c: 577: ui8_b_DResB1_RD = read_eeprom_data( 0xec );
 10687  1181  30EC               	movlw	236
 10688  1182  25BD  3190         	fcall	_read_eeprom_data
 10689  1184  00D1               	movwf	EOL@ui8_b_DResB1_RD
 10690                           
 10691                           ;diag.c: 578: ui8_b_DResB2_RD = read_eeprom_data( 0xed );
 10692  1185  30ED               	movlw	237
 10693  1186  25BD  3190         	fcall	_read_eeprom_data
 10694  1188  00D2               	movwf	EOL@ui8_b_DResB2_RD
 10695                           
 10696                           ;diag.c: 579: ui8_b_DResB3_RD = read_eeprom_data( 0xee );
 10697  1189  30EE               	movlw	238
 10698  118A  25BD  3190         	fcall	_read_eeprom_data
 10699  118C  00D3               	movwf	EOL@ui8_b_DResB3_RD
 10700                           
 10701                           ;diag.c: 580: ui8_b_DResB4_RD = read_eeprom_data( 0xef );
 10702  118D  30EF               	movlw	239
 10703  118E  25BD  3190         	fcall	_read_eeprom_data
 10704  1190  00CF               	movwf	EOL@ui8_b_DResB4_RD
 10705  1191  3091               	movlw	145
 10706                           
 10707                           ;diag.c: 581: ui8_b_DResB5_RD = 0;
 10708  1192  01CE               	clrf	EOL@ui8_b_DResB5_RD
 10709                           
 10710                           ;diag.c: 583: ui8_selected_lid = 0x91;
 10711  1193  00E9               	movwf	_ui8_selected_lid
 10712                           
 10713                           ;diag.c: 584: break;
 10714  1194  29A2               	goto	l12838
 10715  1195                     l12832:	
 10716                           
 10717                           ;diag.c: 591: {
 10718                           ;diag.c: 594: NegativeAnswer(0x90);
 10719  1195  3090               	movlw	144
 10720  1196  2735  3190         	fcall	_NegativeAnswer
 10721                           
 10722                           ;diag.c: 595: break;
 10723  1198  29A2               	goto	l12838
 10724  1199                     l12836:	
 10725  1199  0022               	movlb	2	; select bank2
 10726  119A  086F               	movf	_ict_stamp^(0+256),w
 10727                           
 10728                           ; Switch size 1, requested type "space"
 10729                           ; Number of cases is 2, Range of values is 1 to 2
 10730                           ; switch strategies available:
 10731                           ; Name         Instructions Cycles
 10732                           ; simple_byte            7     4 (average)
 10733                           ; direct_byte           13     9 (fixed)
 10734                           ; jumptable            263     9 (fixed)
 10735                           ;	Chosen strategy is simple_byte
 10736  119B  3A01               	xorlw	1	; case 1
 10737  119C  1903               	skipnz
 10738  119D  2967               	goto	l12818
 10739  119E  3A03               	xorlw	3	; case 2
 10740  119F  1903               	skipnz
 10741  11A0  297D               	goto	l12826
 10742  11A1  2995               	goto	l12832
 10743  11A2                     l12838:	
 10744                           
 10745                           ;diag.c: 602: if ((ui8_b_DResB0_RD != 0xFF) && (ui8_b_DResB1_RD != 0xFF) && (ui8_b_DResB
      +                          2_RD != 0xFF) && (ui8_b_DResB3_RD != 0xFF) && (ui8_b_DResB4_RD != 0xFF) && (ui8_b_DResB5
      +                          _RD != 0xFF))
 10746  11A2  0020               	movlb	0	; select bank0
 10747  11A3  0A50               	incf	EOL@ui8_b_DResB0_RD,w
 10748  11A4  1903               	btfsc	3,2
 10749  11A5  29B9               	goto	l12852
 10750  11A6  0A51               	incf	EOL@ui8_b_DResB1_RD,w
 10751  11A7  1903               	btfsc	3,2
 10752  11A8  29B9               	goto	l12852
 10753  11A9  0A52               	incf	EOL@ui8_b_DResB2_RD,w
 10754  11AA  1903               	btfsc	3,2
 10755  11AB  29B9               	goto	l12852
 10756  11AC  0A53               	incf	EOL@ui8_b_DResB3_RD,w
 10757  11AD  1903               	btfsc	3,2
 10758  11AE  29B9               	goto	l12852
 10759  11AF  0A4F               	incf	EOL@ui8_b_DResB4_RD,w
 10760  11B0  1903               	btfsc	3,2
 10761  11B1  29B9               	goto	l12852
 10762  11B2  0A4E               	incf	EOL@ui8_b_DResB5_RD,w
 10763  11B3  1903               	btfsc	3,2
 10764  11B4  29B9               	goto	l12852
 10765                           
 10766                           ;diag.c: 604: {
 10767                           ;diag.c: 606: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD, ui8_b
      +                          _DResB1_RD, ui8_b_DResB2_RD, ui8_b_DResB3_RD, ui8_b_DResB4_RD, ui8_b_DResB5_RD );
 10768  11B5  303A               	movlw	58
 10769  11B6  2659  3190         	fcall	PL2	;call to abstracted procedure
 10770  11B8  2DE1               	ljmp	_Transmit_LIN_8Bytes
 10771  11B9                     l12852:	
 10772                           ;diag.c: 609: }
 10773                           
 10774                           
 10775                           ;diag.c: 612: else
 10776                           ;diag.c: 613: {
 10777                           ;diag.c: 615: Transmit_LIN_8Bytes( 0x10, 0x7F, 0x90, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
      +                          );
 10778  11B9  307F               	movlw	127
 10779  11BA  00AF               	movwf	Transmit_LIN_8Bytes@B0
 10780  11BB  3090               	movlw	144
 10781  11BC  26CC  3190         	fcall	PL22	;call to abstracted procedure
 10782  11BE  00B6               	movwf	Transmit_LIN_8Bytes@B7
 10783  11BF  3010               	movlw	16
 10784  11C0  2DE1               	ljmp	_Transmit_LIN_8Bytes
 10785  11C1                     l12854:	
 10786                           
 10787                           ;diag.c: 657: {
 10788                           ;diag.c: 659: if( 0x91 == ui8_selected_lid )
 10789  11C1  3091               	movlw	145
 10790  11C2  0669               	xorwf	_ui8_selected_lid,w
 10791  11C3  1D03               	btfss	3,2
 10792  11C4  0008               	return
 10793                           
 10794                           ;diag.c: 661: {
 10795                           ;diag.c: 672: ui8_b_DResB0_RD = read_eeprom_data( 0xf4 );
 10796  11C5  30F4               	movlw	244
 10797  11C6  25BD  3190         	fcall	_read_eeprom_data
 10798  11C8  00D0               	movwf	EOL@ui8_b_DResB0_RD
 10799                           
 10800                           ;diag.c: 673: ui8_b_DResB1_RD = read_eeprom_data( 0xf5 );
 10801  11C9  30F5               	movlw	245
 10802  11CA  25BD  3190         	fcall	_read_eeprom_data
 10803  11CC  00D1               	movwf	EOL@ui8_b_DResB1_RD
 10804                           
 10805                           ;diag.c: 674: ui8_b_DResB2_RD = read_eeprom_data( 0xf6 );
 10806  11CD  30F6               	movlw	246
 10807  11CE  25BD  3190         	fcall	_read_eeprom_data
 10808  11D0  00D2               	movwf	EOL@ui8_b_DResB2_RD
 10809                           
 10810                           ;diag.c: 675: ui8_b_DResB3_RD = read_eeprom_data( 0xf7 );
 10811  11D1  30F7               	movlw	247
 10812  11D2  25BD  3190         	fcall	_read_eeprom_data
 10813  11D4  00D3               	movwf	EOL@ui8_b_DResB3_RD
 10814                           
 10815                           ;diag.c: 676: ui8_b_DResB4_RD = read_eeprom_data( 0xf8 );
 10816  11D5  30F8               	movlw	248
 10817  11D6  25BD  3190         	fcall	_read_eeprom_data
 10818  11D8  00CF               	movwf	EOL@ui8_b_DResB4_RD
 10819                           
 10820                           ;diag.c: 677: ui8_b_DResB5_RD = 0;
 10821  11D9  01CE               	clrf	EOL@ui8_b_DResB5_RD
 10822                           
 10823                           ;diag.c: 679: if ((ui8_b_DResB0_RD == 0xFF) && (ui8_b_DResB1_RD == 0xFF) && (ui8_b_DResB
      +                          2_RD == 0xFF) && (ui8_b_DResB3_RD == 0xFF) && (ui8_b_DResB4_RD == 0xFF))
 10824  11DA  0F50               	incfsz	EOL@ui8_b_DResB0_RD,w
 10825  11DB  29E9               	goto	l12872
 10826  11DC  0F51               	incfsz	EOL@ui8_b_DResB1_RD,w
 10827  11DD  29E9               	goto	l12872
 10828  11DE  0F52               	incfsz	EOL@ui8_b_DResB2_RD,w
 10829  11DF  29E9               	goto	l12872
 10830  11E0  0F53               	incfsz	EOL@ui8_b_DResB3_RD,w
 10831  11E1  29E9               	goto	l12872
 10832  11E2  0F4F               	incfsz	EOL@ui8_b_DResB4_RD,w
 10833  11E3  29E9               	goto	l12872
 10834                           
 10835                           ;diag.c: 681: {
 10836                           ;diag.c: 683: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD, ui8_b
      +                          _DResB1_RD, ui8_b_DResB2_RD, ui8_b_DResB3_RD, ui8_b_DResB4_RD, ui8_b_DResB5_RD );
 10837  11E4  303A               	movlw	58
 10838  11E5  00AF               	movwf	Transmit_LIN_8Bytes@B0
 10839  11E6  2669  3190         	fcall	PL4	;call to abstracted procedure
 10840  11E8  29EE               	goto	L12
 10841  11E9                     l12872:	
 10842                           ;diag.c: 686: }
 10843                           
 10844                           
 10845                           ;diag.c: 689: else
 10846                           ;diag.c: 690: {
 10847                           ;diag.c: 692: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, 0xFF, 0xFF, 0xFF, 0xFF
      +                          , 0xFF, 0xFF );
 10848  11E9  307F               	movlw	127
 10849  11EA  00AF               	movwf	Transmit_LIN_8Bytes@B0
 10850  11EB  0862               	movf	_ui8_b_DResLocID_c,w
 10851  11EC  26CC  3190         	fcall	PL22	;call to abstracted procedure
 10852  11EE                     L12:	
 10853  11EE  00B6               	movwf	Transmit_LIN_8Bytes@B7
 10854  11EF  3010               	movlw	16
 10855  11F0  25E1               	fcall	_Transmit_LIN_8Bytes
 10856                           
 10857                           ;diag.c: 702: }
 10858                           ;diag.c: 705: ui8_selected_lid = 0x92;
 10859  11F1  3092               	movlw	146
 10860  11F2  0020               	movlb	0	; select bank0
 10861  11F3  00E9               	movwf	_ui8_selected_lid
 10862                           
 10863                           ;diag.c: 708: }
 10864  11F4  0008               	return
 10865  11F5                     l12876:	
 10866                           
 10867                           ;diag.c: 834: {
 10868                           ;diag.c: 836: if( 0x93 == ui8_selected_lid )
 10869  11F5  3093               	movlw	147
 10870  11F6  0669               	xorwf	_ui8_selected_lid,w
 10871  11F7  1D03               	btfss	3,2
 10872  11F8  0008               	return
 10873                           
 10874                           ;diag.c: 838: {
 10875                           ;diag.c: 850: sum = cksum( );
 10876  11F9  2747  3190         	fcall	_cksum
 10877  11FB  0825               	movf	?_cksum+1,w
 10878  11FC  0022               	movlb	2	; select bank2
 10879  11FD  00B0               	movwf	(_sum+1)^(0+256)
 10880  11FE  0020               	movlb	0	; select bank0
 10881  11FF  0824               	movf	?_cksum,w
 10882  1200  0022               	movlb	2	; select bank2
 10883  1201  00AF               	movwf	_sum^(0+256)
 10884                           
 10885                           ;diag.c: 851: checksum[ 1 ] = ( (EEADRL=(0x1FFF)&0xff, EEADRH=(0x1FFF)>>8, WREN=0, EECON
      +                          1 |= 0x80, RD=1, __nop(), __nop(), (EEDATH << 8) | EEDATA) );
 10886  1202  30FF               	movlw	255
 10887  1203  0023               	movlb	3	; select bank3
 10888  1204  0091               	movwf	17	;volatile
 10889  1205  301F               	movlw	31
 10890  1206  0092               	movwf	18	;volatile
 10891  1207  1115               	bcf	21,2	;volsfr
 10892  1208  1795               	bsf	21,7	;volsfr
 10893  1209  1415               	bsf	21,0	;volsfr
 10894  120A  0000               	nop
 10895  120B  0000               	nop
 10896  120C  0023               	movlb	3	; select bank3
 10897  120D  0814               	movf	20,w	;volatile
 10898  120E  00BB               	movwf	((_checksum+1)^(0+384)+2)
 10899  120F  0813               	movf	19,w	;volatile
 10900  1210  00BA               	movwf	(_checksum^(0+384)+2)
 10901                           
 10902                           ;diag.c: 852: checksum[ 2 ] = ( (EEADRL=(0x1FFE)&0xff, EEADRH=(0x1FFE)>>8, WREN=0, EECON
      +                          1 |= 0x80, RD=1, __nop(), __nop(), (EEDATH << 8) | EEDATA) );
 10903  1211  30FE               	movlw	254
 10904  1212  0091               	movwf	17	;volatile
 10905  1213  301F               	movlw	31
 10906  1214  0092               	movwf	18	;volatile
 10907  1215  1115               	bcf	21,2	;volsfr
 10908  1216  1795               	bsf	21,7	;volsfr
 10909  1217  1415               	bsf	21,0	;volsfr
 10910  1218  0000               	nop
 10911  1219  0000               	nop
 10912  121A  0023               	movlb	3	; select bank3
 10913  121B  0814               	movf	20,w	;volatile
 10914  121C  00BD               	movwf	((_checksum+1)^(0+384)+4)
 10915  121D  0813               	movf	19,w	;volatile
 10916  121E  00BC               	movwf	(_checksum^(0+384)+4)
 10917                           
 10918                           ;diag.c: 853: checksum[ 0 ] = ( checksum[ 1 ]<<8 ) + checksum[ 2 ];
 10919  121F  30BC               	movlw	((low (_checksum| (0+256)))& (0+255)+4)
 10920  1220  0086               	movwf	6
 10921  1221  3001               	movlw	1	; select bank3/4
 10922  1222  0087               	movwf	7
 10923  1223  083A               	movf	(_checksum^(0+384)+2),w
 10924  1224  0020               	movlb	0	; select bank0
 10925  1225  00BA               	movwf	??_EOL+1
 10926  1226  01B9               	clrf	??_EOL
 10927  1227  3F40               	moviw [0]fsr1
 10928  1228  0739               	addwf	??_EOL,w
 10929  1229  0023               	movlb	3	; select bank3
 10930  122A  00B8               	movwf	_checksum^(0+384)
 10931  122B  3F41               	moviw [1]fsr1
 10932  122C  0020               	movlb	0	; select bank0
 10933  122D  3D3A               	addwfc	??_EOL+1,w
 10934  122E  0023               	movlb	3	; select bank3
 10935  122F  00B9               	movwf	(_checksum^(0+384)+1)
 10936                           
 10937                           ;diag.c: 856: ui8_b_DResB0_RD = 0x02;
 10938  1230  3002               	movlw	2
 10939  1231  0020               	movlb	0	; select bank0
 10940  1232  00D0               	movwf	EOL@ui8_b_DResB0_RD
 10941                           
 10942                           ;diag.c: 857: ui8_b_DResB1_RD = 0x00;
 10943  1233  01D1               	clrf	EOL@ui8_b_DResB1_RD
 10944                           
 10945                           ;diag.c: 858: ui8_b_DResB2_RD = checksum[1] ;
 10946  1234  0023               	movlb	3	; select bank3
 10947  1235  083A               	movf	(_checksum^(0+384)+2),w
 10948  1236  0020               	movlb	0	; select bank0
 10949  1237  00D2               	movwf	EOL@ui8_b_DResB2_RD
 10950                           
 10951                           ;diag.c: 859: ui8_b_DResB3_RD = checksum[2] ;
 10952  1238  0023               	movlb	3	; select bank3
 10953  1239  083C               	movf	(_checksum^(0+384)+4),w
 10954  123A  0020               	movlb	0	; select bank0
 10955  123B  00D3               	movwf	EOL@ui8_b_DResB3_RD
 10956                           
 10957                           ;diag.c: 860: ui8_b_DResB4_RD = (unsigned int)((sum)>>8) ;
 10958  123C  0022               	movlb	2	; select bank2
 10959  123D  0830               	movf	(_sum^(0+256)+1),w
 10960  123E  0020               	movlb	0	; select bank0
 10961  123F  00CF               	movwf	EOL@ui8_b_DResB4_RD
 10962                           
 10963                           ;diag.c: 861: ui8_b_DResB5_RD = (unsigned int)(sum) ;
 10964  1240  0022               	movlb	2	; select bank2
 10965  1241  082F               	movf	_sum^(0+256),w
 10966  1242  0020               	movlb	0	; select bank0
 10967  1243  00CE               	movwf	EOL@ui8_b_DResB5_RD
 10968                           
 10969                           ;diag.c: 865: if (checksum[0] == sum)
 10970  1244  0022               	movlb	2	; select bank2
 10971  1245  0830               	movf	(_sum+1)^(0+256),w
 10972  1246  0023               	movlb	3	; select bank3
 10973  1247  0639               	xorwf	(_checksum+1)^(0+384),w
 10974  1248  1D03               	skipz
 10975  1249  2A4E               	goto	u11285
 10976  124A  0022               	movlb	2	; select bank2
 10977  124B  082F               	movf	_sum^(0+256),w
 10978  124C  0023               	movlb	3	; select bank3
 10979  124D  0638               	xorwf	_checksum^(0+384),w
 10980  124E                     u11285:	
 10981  124E  1D03               	skipz
 10982  124F  2A56               	goto	l12930
 10983                           
 10984                           ;diag.c: 867: {
 10985                           ;diag.c: 869: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD, ui8_b
      +                          _DResB1_RD, ui8_b_DResB2_RD,
 10986                           ;diag.c: 870: ui8_b_DResB3_RD, ui8_b_DResB4_RD, ui8_b_DResB5_RD );
 10987  1250  303A               	movlw	58
 10988  1251  0020               	movlb	0	; select bank0
 10989  1252  00AF               	movwf	Transmit_LIN_8Bytes@B0
 10990  1253  2669  3190         	fcall	PL4	;call to abstracted procedure
 10991  1255  2A5C               	goto	L13
 10992  1256                     l12930:	
 10993                           ;diag.c: 873: }
 10994                           
 10995                           
 10996                           ;diag.c: 876: else
 10997                           ;diag.c: 877: {
 10998                           ;diag.c: 879: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, 0xFF, 0xFF, 0xFF, 0xFF
      +                          , 0xFF, 0xFF );
 10999  1256  307F               	movlw	127
 11000  1257  0020               	movlb	0	; select bank0
 11001  1258  00AF               	movwf	Transmit_LIN_8Bytes@B0
 11002  1259  0862               	movf	_ui8_b_DResLocID_c,w
 11003  125A  26CC  3190         	fcall	PL22	;call to abstracted procedure
 11004  125C                     L13:	
 11005  125C  00B6               	movwf	Transmit_LIN_8Bytes@B7
 11006  125D  3010               	movlw	16
 11007  125E  25E1               	fcall	_Transmit_LIN_8Bytes
 11008                           
 11009                           ;diag.c: 889: }
 11010                           ;diag.c: 892: ui8_selected_lid = 0x94;
 11011  125F  3094               	movlw	148
 11012  1260  0020               	movlb	0	; select bank0
 11013  1261  00E9               	movwf	_ui8_selected_lid
 11014                           
 11015                           ;diag.c: 896: }
 11016  1262  0008               	return
 11017  1263                     l12934:	
 11018                           
 11019                           ;diag.c: 923: {
 11020                           ;diag.c: 925: if( 0x94 == ui8_selected_lid )
 11021  1263  3094               	movlw	148
 11022  1264  0669               	xorwf	_ui8_selected_lid,w
 11023  1265  1D03               	btfss	3,2
 11024  1266  0008               	return
 11025                           
 11026                           ;diag.c: 927: {
 11027                           ;diag.c: 940: ui8_given_supply = (ui8_b_DResB0_c);
 11028  1267  0861               	movf	_ui8_b_DResB0_c,w
 11029  1268  0021               	movlb	1	; select bank1
 11030  1269  00D2               	movwf	_ui8_given_supply^(0+128)
 11031                           
 11032                           ;diag.c: 942: if (ui8_given_supply == 0)
 11033  126A  0852               	movf	_ui8_given_supply^(0+128),w
 11034  126B  1D03               	btfss	3,2
 11035  126C  2A6F               	goto	l12942
 11036                           
 11037                           ;diag.c: 944: {
 11038                           ;diag.c: 946: ui8_given_supply = 0x6F;
 11039  126D  306F               	movlw	111
 11040  126E  00D2               	movwf	_ui8_given_supply^(0+128)
 11041  126F                     l12942:	
 11042                           
 11043                           ;diag.c: 948: }
 11044                           ;diag.c: 951: ui8_b_DResB0_RD = ( unsigned char )( ui16_fir_Bat_mittel>>2 );
 11045  126F  0022               	movlb	2	; select bank2
 11046  1270  083A               	movf	(_ui16_fir_Bat_mittel+1)^(0+256),w
 11047  1271  0020               	movlb	0	; select bank0
 11048  1272  00BA               	movwf	??_EOL+1
 11049  1273  0022               	movlb	2	; select bank2
 11050  1274  0839               	movf	_ui16_fir_Bat_mittel^(0+256),w
 11051  1275  0020               	movlb	0	; select bank0
 11052  1276  00B9               	movwf	??_EOL
 11053  1277  36BA               	lsrf	??_EOL+1,f
 11054  1278  0CB9               	rrf	??_EOL,f
 11055  1279  36BA               	lsrf	??_EOL+1,f
 11056  127A  0CB9               	rrf	??_EOL,f
 11057  127B  0839               	movf	??_EOL,w
 11058  127C  00D0               	movwf	EOL@ui8_b_DResB0_RD
 11059                           
 11060                           ;diag.c: 952: ui8_b_DResB1_RD = 0;
 11061  127D  01D1               	clrf	EOL@ui8_b_DResB1_RD
 11062                           
 11063                           ;diag.c: 953: ui8_b_DResB2_RD = 0;
 11064  127E  01D2               	clrf	EOL@ui8_b_DResB2_RD
 11065                           
 11066                           ;diag.c: 954: ui8_b_DResB3_RD = 0;
 11067  127F  01D3               	clrf	EOL@ui8_b_DResB3_RD
 11068                           
 11069                           ;diag.c: 955: ui8_b_DResB4_RD = 0;
 11070  1280  01CF               	clrf	EOL@ui8_b_DResB4_RD
 11071                           
 11072                           ;diag.c: 956: ui8_b_DResB5_RD = 0;
 11073  1281  01CE               	clrf	EOL@ui8_b_DResB5_RD
 11074                           
 11075                           ;diag.c: 961: if ((ui8_b_DResB0_RD > ui8_given_supply - 3) && (ui8_b_DResB0_RD < ui8_giv
      +                          en_supply + 3) )
 11076  1282  0021               	movlb	1	; select bank1
 11077  1283  0852               	movf	_ui8_given_supply^(0+128),w
 11078  1284  3EFD               	addlw	253
 11079  1285  0020               	movlb	0	; select bank0
 11080  1286  00B9               	movwf	??_EOL
 11081  1287  30FF               	movlw	255
 11082  1288  1803               	skipnc
 11083  1289  3000               	movlw	0
 11084  128A  00BA               	movwf	??_EOL+1
 11085  128B  3A80               	xorlw	128
 11086  128C  00BB               	movwf	??_EOL+2
 11087  128D  3080               	movlw	128
 11088  128E  023B               	subwf	??_EOL+2,w
 11089  128F  1D03               	skipz
 11090  1290  2A93               	goto	u11315
 11091  1291  0850               	movf	EOL@ui8_b_DResB0_RD,w
 11092  1292  0239               	subwf	??_EOL,w
 11093  1293                     u11315:	
 11094  1293  1803               	skipnc
 11095  1294  2AAC               	goto	l12960
 11096  1295  0021               	movlb	1	; select bank1
 11097  1296  0852               	movf	_ui8_given_supply^(0+128),w
 11098  1297  3E03               	addlw	3
 11099  1298  0020               	movlb	0	; select bank0
 11100  1299  00B9               	movwf	??_EOL
 11101  129A  3000               	movlw	0
 11102  129B  1803               	skipnc
 11103  129C  3001               	movlw	1
 11104  129D  00BA               	movwf	??_EOL+1
 11105  129E  3A80               	xorlw	128
 11106  129F  3C80               	sublw	128
 11107  12A0  1D03               	skipz
 11108  12A1  2AA4               	goto	u11325
 11109  12A2  0839               	movf	??_EOL,w
 11110  12A3  0250               	subwf	EOL@ui8_b_DResB0_RD,w
 11111  12A4                     u11325:	
 11112  12A4  1803               	skipnc
 11113  12A5  2AAC               	goto	l12960
 11114                           
 11115                           ;diag.c: 965: {
 11116                           ;diag.c: 967: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD, ui8_b
      +                          _DResB1_RD, ui8_b_DResB2_RD,
 11117                           ;diag.c: 968: ui8_b_DResB3_RD, ui8_b_DResB4_RD, ui8_b_DResB5_RD );
 11118  12A6  303A               	movlw	58
 11119  12A7  0020               	movlb	0	; select bank0
 11120  12A8  00AF               	movwf	Transmit_LIN_8Bytes@B0
 11121  12A9  2669  3190         	fcall	PL4	;call to abstracted procedure
 11122  12AB  2AB2               	goto	L14
 11123  12AC                     l12960:	
 11124                           ;diag.c: 971: }
 11125                           
 11126                           
 11127                           ;diag.c: 974: else
 11128                           ;diag.c: 975: {
 11129                           ;diag.c: 977: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, 0xFF, 0xFF, 0xFF, 0xFF
      +                          , 0xFF, 0xFF );
 11130  12AC  307F               	movlw	127
 11131  12AD  0020               	movlb	0	; select bank0
 11132  12AE  00AF               	movwf	Transmit_LIN_8Bytes@B0
 11133  12AF  0862               	movf	_ui8_b_DResLocID_c,w
 11134  12B0  26CC  3190         	fcall	PL22	;call to abstracted procedure
 11135  12B2                     L14:	
 11136  12B2  00B6               	movwf	Transmit_LIN_8Bytes@B7
 11137  12B3  3010               	movlw	16
 11138  12B4  25E1               	fcall	_Transmit_LIN_8Bytes
 11139                           
 11140                           ;diag.c: 987: }
 11141                           ;diag.c: 990: ui8_selected_lid = 0x95;
 11142  12B5  3095               	movlw	149
 11143  12B6  0020               	movlb	0	; select bank0
 11144  12B7  00E9               	movwf	_ui8_selected_lid
 11145                           
 11146                           ;diag.c: 993: }
 11147  12B8  0008               	return
 11148  12B9                     l12964:	
 11149                           
 11150                           ;diag.c: 1022: {
 11151                           ;diag.c: 1024: if( 0x95 == ui8_selected_lid )
 11152  12B9  3095               	movlw	149
 11153  12BA  0669               	xorwf	_ui8_selected_lid,w
 11154  12BB  1903               	btfsc	3,2
 11155  12BC  2C6B               	goto	l13128
 11156  12BD  2C7A               	goto	l13130
 11157  12BE                     l12968:	
 11158                           
 11159                           ;diag.c: 1037: {
 11160                           ;diag.c: 1039: InitMotorStop( );
 11161  12BE  3181  21F7  3190   	fcall	_InitMotorStop
 11162                           
 11163                           ;diag.c: 1042: PEIE = 0;
 11164  12C1  130B               	bcf	11,6	;volatile
 11165                           
 11166                           ;diag.c: 1043: GIE = 0;
 11167  12C2  138B               	bcf	11,7	;volatile
 11168                           
 11169                           ;diag.c: 1044: CCP1CON = 0x00;
 11170  12C3  0025               	movlb	5	; select bank5
 11171  12C4  0193               	clrf	19	;volatile
 11172                           
 11173                           ;diag.c: 1050: LATB2 = 1;
 11174  12C5  0022               	movlb	2	; select bank2
 11175  12C6  150D               	bsf	13,2	;volatile
 11176                           
 11177                           ;diag.c: 1051: LATC3 = 1;
 11178  12C7  158E               	bsf	14,3	;volatile
 11179                           
 11180                           ;diag.c: 1054: LATC1 = 0;
 11181  12C8  108E               	bcf	14,1	;volatile
 11182                           
 11183                           ;diag.c: 1055: LATC4 = 0;
 11184  12C9  120E               	bcf	14,4	;volatile
 11185                           
 11186                           ;diag.c: 1061: { unsigned char _dcnt; if( 200 >= 4 ) _dcnt = ( 200 * ( 32000000UL ) / 2 
      +                          ); else _dcnt = 1; while( --_dcnt > 0 ) { asm( "nop" ); asm( "nop" ); continue; } };
 11187  12CA  3035               	movlw	53
 11188  12CB  0021               	movlb	1	; select bank1
 11189  12CC  009D               	movwf	29	;volatile
 11190  12CD  0020               	movlb	0	; select bank0
 11191  12CE  01BC               	clrf	EOL@_dcnt
 11192  12CF  2AD2               	goto	l584
 11193  12D0                     l585:	
 11194  12D0  0000               	nop	;# 
 11195  12D1  0000               	nop	;# 
 11196  12D2                     l584:	
 11197  12D2  0020               	movlb	0	; select bank0
 11198  12D3  0BBC               	decfsz	EOL@_dcnt,f
 11199  12D4  2AD0               	goto	l585
 11200  12D5  01BD               	clrf	EOL@_dcnt_413
 11201  12D6  2AD9               	goto	l589
 11202  12D7                     l590:	
 11203  12D7  0000               	nop	;# 
 11204  12D8  0000               	nop	;# 
 11205  12D9                     l589:	
 11206  12D9  0020               	movlb	0	; select bank0
 11207  12DA  0BBD               	decfsz	EOL@_dcnt_413,f
 11208  12DB  2AD7               	goto	l590
 11209  12DC  01BE               	clrf	EOL@_dcnt_414
 11210  12DD  2AE0               	goto	l594
 11211  12DE                     l595:	
 11212  12DE  0000               	nop	;# 
 11213  12DF  0000               	nop	;# 
 11214  12E0                     l594:	
 11215  12E0  0020               	movlb	0	; select bank0
 11216  12E1  0BBE               	decfsz	EOL@_dcnt_414,f
 11217  12E2  2ADE               	goto	l595
 11218  12E3  01BF               	clrf	EOL@_dcnt_415
 11219  12E4  2AE7               	goto	l599
 11220  12E5                     l600:	
 11221  12E5  0000               	nop	;# 
 11222  12E6  0000               	nop	;# 
 11223  12E7                     l599:	
 11224  12E7  0020               	movlb	0	; select bank0
 11225  12E8  0BBF               	decfsz	EOL@_dcnt_415,f
 11226  12E9  2AE5               	goto	l600
 11227  12EA  01C0               	clrf	EOL@_dcnt_416
 11228  12EB  2AEE               	goto	l604
 11229  12EC                     l605:	
 11230  12EC  0000               	nop	;# 
 11231  12ED  0000               	nop	;# 
 11232  12EE                     l604:	
 11233  12EE  0020               	movlb	0	; select bank0
 11234  12EF  0BC0               	decfsz	EOL@_dcnt_416,f
 11235  12F0  2AEC               	goto	l605
 11236  12F1  01C1               	clrf	EOL@_dcnt_417
 11237  12F2  2AF5               	goto	l609
 11238  12F3                     l610:	
 11239  12F3  0000               	nop	;# 
 11240  12F4  0000               	nop	;# 
 11241  12F5                     l609:	
 11242  12F5  0020               	movlb	0	; select bank0
 11243  12F6  0BC1               	decfsz	EOL@_dcnt_417,f
 11244  12F7  2AF3               	goto	l610
 11245                           
 11246                           ;diag.c: 1069: ADC_Wait();
 11247  12F8  2623               	fcall	_ADC_Wait
 11248                           
 11249                           ;diag.c: 1070: ( GO_nDONE = 1 );
 11250  12F9  0021               	movlb	1	; select bank1
 11251  12FA  149D               	bsf	29,1	;volatile
 11252                           
 11253                           ;diag.c: 1071: ui16_IPhase2_bldc_cal.w = ADC_Read() - ui8_current_cal[1];
 11254  12FB  3184  24CF  3190   	fcall	_ADC_Read
 11255  12FE  0825               	movf	?_ADC_Read+1,w
 11256  12FF  0022               	movlb	2	; select bank2
 11257  1300  00E5               	movwf	(_ui16_IPhase2_bldc_cal+1)^(0+256)
 11258  1301  0020               	movlb	0	; select bank0
 11259  1302  0824               	movf	?_ADC_Read,w
 11260  1303  0022               	movlb	2	; select bank2
 11261  1304  00E4               	movwf	_ui16_IPhase2_bldc_cal^(0+256)
 11262  1305  0821               	movf	(_ui8_current_cal^(0+256)+1),w
 11263  1306  02E4               	subwf	_ui16_IPhase2_bldc_cal^(0+256),f
 11264  1307  1C03               	skipc
 11265  1308  03E5               	decf	(_ui16_IPhase2_bldc_cal+1)^(0+256),f
 11266                           
 11267                           ;diag.c: 1077: LATC2 = 1;
 11268  1309  150E               	bsf	14,2	;volatile
 11269                           
 11270                           ;diag.c: 1078: LATC1 = 1;
 11271  130A  148E               	bsf	14,1	;volatile
 11272                           
 11273                           ;diag.c: 1081: LATC3 = 0;
 11274  130B  118E               	bcf	14,3	;volatile
 11275                           
 11276                           ;diag.c: 1082: LATC4 = 0;
 11277  130C  120E               	bcf	14,4	;volatile
 11278                           
 11279                           ;diag.c: 1088: { unsigned char _dcnt; if( 200 >= 4 ) _dcnt = ( 200 * ( 32000000UL ) / 2 
      +                          ); else _dcnt = 1; while( --_dcnt > 0 ) { asm( "nop" ); asm( "nop" ); continue; } };
 11280  130D  3009               	movlw	9
 11281  130E  0021               	movlb	1	; select bank1
 11282  130F  009D               	movwf	29	;volatile
 11283  1310  0020               	movlb	0	; select bank0
 11284  1311  01C2               	clrf	EOL@_dcnt_418
 11285  1312  2B15               	goto	l614
 11286  1313                     l615:	
 11287  1313  0000               	nop	;# 
 11288  1314  0000               	nop	;# 
 11289  1315                     l614:	
 11290  1315  0020               	movlb	0	; select bank0
 11291  1316  0BC2               	decfsz	EOL@_dcnt_418,f
 11292  1317  2B13               	goto	l615
 11293  1318  01C3               	clrf	EOL@_dcnt_419
 11294  1319  2B1C               	goto	l619
 11295  131A                     l620:	
 11296  131A  0000               	nop	;# 
 11297  131B  0000               	nop	;# 
 11298  131C                     l619:	
 11299  131C  0020               	movlb	0	; select bank0
 11300  131D  0BC3               	decfsz	EOL@_dcnt_419,f
 11301  131E  2B1A               	goto	l620
 11302  131F  01C4               	clrf	EOL@_dcnt_420
 11303  1320  2B23               	goto	l624
 11304  1321                     l625:	
 11305  1321  0000               	nop	;# 
 11306  1322  0000               	nop	;# 
 11307  1323                     l624:	
 11308  1323  0020               	movlb	0	; select bank0
 11309  1324  0BC4               	decfsz	EOL@_dcnt_420,f
 11310  1325  2B21               	goto	l625
 11311  1326  01C5               	clrf	EOL@_dcnt_421
 11312  1327  2B2A               	goto	l629
 11313  1328                     l630:	
 11314  1328  0000               	nop	;# 
 11315  1329  0000               	nop	;# 
 11316  132A                     l629:	
 11317  132A  0020               	movlb	0	; select bank0
 11318  132B  0BC5               	decfsz	EOL@_dcnt_421,f
 11319  132C  2B28               	goto	l630
 11320  132D  01C6               	clrf	EOL@_dcnt_422
 11321  132E  2B31               	goto	l634
 11322  132F                     l635:	
 11323  132F  0000               	nop	;# 
 11324  1330  0000               	nop	;# 
 11325  1331                     l634:	
 11326  1331  0020               	movlb	0	; select bank0
 11327  1332  0BC6               	decfsz	EOL@_dcnt_422,f
 11328  1333  2B2F               	goto	l635
 11329  1334  01C7               	clrf	EOL@_dcnt_423
 11330  1335  2B38               	goto	l639
 11331  1336                     l640:	
 11332  1336  0000               	nop	;# 
 11333  1337  0000               	nop	;# 
 11334  1338                     l639:	
 11335  1338  0020               	movlb	0	; select bank0
 11336  1339  0BC7               	decfsz	EOL@_dcnt_423,f
 11337  133A  2B36               	goto	l640
 11338                           
 11339                           ;diag.c: 1096: ADC_Wait();
 11340  133B  2623               	fcall	_ADC_Wait
 11341                           
 11342                           ;diag.c: 1097: ( GO_nDONE = 1 );
 11343  133C  0021               	movlb	1	; select bank1
 11344  133D  149D               	bsf	29,1	;volatile
 11345                           
 11346                           ;diag.c: 1098: ui16_IPhase1_bldc_cal.w = ADC_Read() - ui8_current_cal[0];
 11347  133E  3184  24CF  3190   	fcall	_ADC_Read
 11348  1341  0825               	movf	?_ADC_Read+1,w
 11349  1342  0022               	movlb	2	; select bank2
 11350  1343  00E7               	movwf	(_ui16_IPhase1_bldc_cal+1)^(0+256)
 11351  1344  0020               	movlb	0	; select bank0
 11352  1345  0824               	movf	?_ADC_Read,w
 11353  1346  0022               	movlb	2	; select bank2
 11354  1347  00E6               	movwf	_ui16_IPhase1_bldc_cal^(0+256)
 11355  1348  0820               	movf	_ui8_current_cal^(0+256),w
 11356  1349  02E6               	subwf	_ui16_IPhase1_bldc_cal^(0+256),f
 11357  134A  1C03               	skipc
 11358  134B  03E7               	decf	(_ui16_IPhase1_bldc_cal+1)^(0+256),f
 11359                           
 11360                           ;diag.c: 1104: LATB1 = 1;
 11361  134C  148D               	bsf	13,1	;volatile
 11362                           
 11363                           ;diag.c: 1105: LATC4 = 1;
 11364  134D  160E               	bsf	14,4	;volatile
 11365                           
 11366                           ;diag.c: 1107: LATC1 = 0;
 11367  134E  108E               	bcf	14,1	;volatile
 11368                           
 11369                           ;diag.c: 1108: LATC3 = 0;
 11370  134F  118E               	bcf	14,3	;volatile
 11371                           
 11372                           ;diag.c: 1115: { unsigned char _dcnt; if( 200 >= 4 ) _dcnt = ( 200 * ( 32000000UL ) / 2 
      +                          ); else _dcnt = 1; while( --_dcnt > 0 ) { asm( "nop" ); asm( "nop" ); continue; } };
 11373  1350  3011               	movlw	17
 11374  1351  0021               	movlb	1	; select bank1
 11375  1352  009D               	movwf	29	;volatile
 11376  1353  0020               	movlb	0	; select bank0
 11377  1354  01C8               	clrf	EOL@_dcnt_424
 11378  1355  2B58               	goto	l644
 11379  1356                     l645:	
 11380  1356  0000               	nop	;# 
 11381  1357  0000               	nop	;# 
 11382  1358                     l644:	
 11383  1358  0020               	movlb	0	; select bank0
 11384  1359  0BC8               	decfsz	EOL@_dcnt_424,f
 11385  135A  2B56               	goto	l645
 11386  135B  01C9               	clrf	EOL@_dcnt_425
 11387  135C  2B5F               	goto	l649
 11388  135D                     l650:	
 11389  135D  0000               	nop	;# 
 11390  135E  0000               	nop	;# 
 11391  135F                     l649:	
 11392  135F  0020               	movlb	0	; select bank0
 11393  1360  0BC9               	decfsz	EOL@_dcnt_425,f
 11394  1361  2B5D               	goto	l650
 11395  1362  01CA               	clrf	EOL@_dcnt_426
 11396  1363  2B66               	goto	l654
 11397  1364                     l655:	
 11398  1364  0000               	nop	;# 
 11399  1365  0000               	nop	;# 
 11400  1366                     l654:	
 11401  1366  0020               	movlb	0	; select bank0
 11402  1367  0BCA               	decfsz	EOL@_dcnt_426,f
 11403  1368  2B64               	goto	l655
 11404  1369  01CB               	clrf	EOL@_dcnt_427
 11405  136A  2B6D               	goto	l659
 11406  136B                     l660:	
 11407  136B  0000               	nop	;# 
 11408  136C  0000               	nop	;# 
 11409  136D                     l659:	
 11410  136D  0020               	movlb	0	; select bank0
 11411  136E  0BCB               	decfsz	EOL@_dcnt_427,f
 11412  136F  2B6B               	goto	l660
 11413  1370  01CC               	clrf	EOL@_dcnt_428
 11414  1371  2B74               	goto	l664
 11415  1372                     l665:	
 11416  1372  0000               	nop	;# 
 11417  1373  0000               	nop	;# 
 11418  1374                     l664:	
 11419  1374  0020               	movlb	0	; select bank0
 11420  1375  0BCC               	decfsz	EOL@_dcnt_428,f
 11421  1376  2B72               	goto	l665
 11422  1377  01CD               	clrf	EOL@_dcnt_429
 11423  1378  2B7B               	goto	l669
 11424  1379                     l670:	
 11425  1379  0000               	nop	;# 
 11426  137A  0000               	nop	;# 
 11427  137B                     l669:	
 11428  137B  0020               	movlb	0	; select bank0
 11429  137C  0BCD               	decfsz	EOL@_dcnt_429,f
 11430  137D  2B79               	goto	l670
 11431                           
 11432                           ;diag.c: 1123: ADC_Wait();
 11433  137E  2623               	fcall	_ADC_Wait
 11434                           
 11435                           ;diag.c: 1124: ( GO_nDONE = 1 );
 11436  137F  0021               	movlb	1	; select bank1
 11437  1380  149D               	bsf	29,1	;volatile
 11438                           
 11439                           ;diag.c: 1125: ui16_IPhase3_bldc_cal.w = ADC_Read() - ui8_current_cal[2];
 11440  1381  3184  24CF         	fcall	_ADC_Read
 11441  1383  0825               	movf	?_ADC_Read+1,w
 11442  1384  0022               	movlb	2	; select bank2
 11443  1385  00E3               	movwf	(_ui16_IPhase3_bldc_cal+1)^(0+256)
 11444  1386  0020               	movlb	0	; select bank0
 11445  1387  0824               	movf	?_ADC_Read,w
 11446  1388  0022               	movlb	2	; select bank2
 11447  1389  00E2               	movwf	_ui16_IPhase3_bldc_cal^(0+256)
 11448  138A  0822               	movf	(_ui8_current_cal^(0+256)+2),w
 11449  138B  02E2               	subwf	_ui16_IPhase3_bldc_cal^(0+256),f
 11450  138C  1C03               	skipc
 11451  138D  03E3               	decf	(_ui16_IPhase3_bldc_cal+1)^(0+256),f
 11452                           
 11453                           ;diag.c: 1128: LATC = LATC & 0b11100101;
 11454  138E  30E5               	movlw	229
 11455  138F  058E               	andwf	14,f	;volatile
 11456                           
 11457                           ;diag.c: 1131: CCP1CON = 0x0c;
 11458  1390  300C               	movlw	12
 11459  1391  0025               	movlb	5	; select bank5
 11460  1392  0093               	movwf	19	;volatile
 11461                           
 11462                           ;diag.c: 1132: PEIE = 1;
 11463  1393  170B               	bsf	11,6	;volatile
 11464                           
 11465                           ;diag.c: 1133: GIE = 1;
 11466  1394  178B               	bsf	11,7	;volatile
 11467                           
 11468                           ;diag.c: 1136: phaseCal = 1;
 11469  1395  0021               	movlb	1	; select bank1
 11470  1396  01D3               	clrf	_phaseCal^(0+128)
 11471  1397  0AD3               	incf	_phaseCal^(0+128),f
 11472                           
 11473                           ;diag.c: 1139: break;
 11474  1398  0008               	return
 11475  1399                     l13066:	
 11476                           
 11477                           ;diag.c: 1146: {
 11478                           ;diag.c: 1151: write_eeprom_data( 0x02, ( unsigned char )( ( 0x7800 / ui16_IPhase1_bldc_
      +                          cal.w )>>8 ) );
 11479  1399  26E6  3190         	fcall	PL58	;call to abstracted procedure
 11480  139B  26E0  3190         	fcall	PL56	;call to abstracted procedure
 11481  139D  2710  3190         	fcall	___lwdiv
 11482  139F  0825               	movf	?___lwdiv+1,w
 11483  13A0  00AB               	movwf	write_eeprom_data@ui8_adress_data
 11484  13A1  3002               	movlw	2
 11485  13A2  25C8  3190         	fcall	_write_eeprom_data
 11486                           
 11487                           ;diag.c: 1152: write_eeprom_data( 0x03, ( unsigned char )( 0x7800 / ui16_IPhase1_bldc_ca
      +                          l.w ) );
 11488  13A4  26E6  3190         	fcall	PL58	;call to abstracted procedure
 11489  13A6  26E0  3190         	fcall	PL56	;call to abstracted procedure
 11490  13A8  2710  3190         	fcall	___lwdiv
 11491  13AA  0824               	movf	?___lwdiv,w
 11492  13AB  00AB               	movwf	write_eeprom_data@ui8_adress_data
 11493  13AC  3003               	movlw	3
 11494  13AD  25C8  3190         	fcall	_write_eeprom_data
 11495                           
 11496                           ;diag.c: 1155: ui16_I_cal_Ph1 = ( read_eeprom_data( 0x02 )<<8 ) | read_eeprom_data( 0x03
      +                           );
 11497  13AF  3003               	movlw	3
 11498  13B0  25BD  3190         	fcall	_read_eeprom_data
 11499  13B2  00B9               	movwf	??_EOL
 11500  13B3  3002               	movlw	2
 11501  13B4  25BD  3190         	fcall	_read_eeprom_data
 11502  13B6  0021               	movlb	1	; select bank1
 11503  13B7  00ED               	movwf	(_ui16_I_cal_Ph1+1)^(0+128)
 11504  13B8  0020               	movlb	0	; select bank0
 11505  13B9  0839               	movf	??_EOL,w
 11506  13BA  0021               	movlb	1	; select bank1
 11507  13BB  00EC               	movwf	_ui16_I_cal_Ph1^(0+128)
 11508                           
 11509                           ;diag.c: 1167: ui8_b_DResB0_RD = phaseCal;
 11510                           
 11511                           ;diag.c: 1168: ui8_b_DResB1_RD = ( unsigned char )( ( ( ui16_IPhase1_bldc_cal.w * ui16_I
      +                          _cal_Ph1 )>>8 )>>8 );
 11512                           
 11513                           ;diag.c: 1169: ui8_b_DResB2_RD = ( unsigned char )( ( ui16_IPhase1_bldc_cal.w * ui16_I_c
      +                          al_Ph1 )>>8 );
 11514  13BC  2705  3190         	fcall	PL88	;call to abstracted procedure
 11515  13BE  0867               	movf	(_ui16_IPhase1_bldc_cal+1)^(0+256),w
 11516  13BF  0020               	movlb	0	; select bank0
 11517  13C0  00A5               	movwf	___wmul@multiplier+1
 11518  13C1  0022               	movlb	2	; select bank2
 11519  13C2  0866               	movf	_ui16_IPhase1_bldc_cal^(0+256),w
 11520  13C3  0020               	movlb	0	; select bank0
 11521  13C4  00A4               	movwf	___wmul@multiplier
 11522  13C5  0021               	movlb	1	; select bank1
 11523  13C6  086D               	movf	(_ui16_I_cal_Ph1+1)^(0+128),w
 11524  13C7  0020               	movlb	0	; select bank0
 11525  13C8  00A7               	movwf	___wmul@multiplicand+1
 11526  13C9  0021               	movlb	1	; select bank1
 11527  13CA  086C               	movf	_ui16_I_cal_Ph1^(0+128),w
 11528  13CB  0020               	movlb	0	; select bank0
 11529  13CC  00A6               	movwf	___wmul@multiplicand
 11530  13CD  263C  3190         	fcall	___wmul
 11531  13CF  0825               	movf	?___wmul+1,w
 11532  13D0  00D2               	movwf	EOL@ui8_b_DResB2_RD
 11533                           
 11534                           ;diag.c: 1170: ui8_b_DResB3_RD = ( unsigned char )( ui16_I_cal_Ph1 >> 8);
 11535  13D1  0021               	movlb	1	; select bank1
 11536  13D2  086D               	movf	(_ui16_I_cal_Ph1^(0+128)+1),w
 11537  13D3  0020               	movlb	0	; select bank0
 11538  13D4  00D3               	movwf	EOL@ui8_b_DResB3_RD
 11539                           
 11540                           ;diag.c: 1171: ui8_b_DResB4_RD = ( unsigned char )( ui16_I_cal_Ph1 );
 11541  13D5  0021               	movlb	1	; select bank1
 11542  13D6  086C               	movf	_ui16_I_cal_Ph1^(0+128),w
 11543                           
 11544                           ;diag.c: 1172: ui8_b_DResB5_RD = 0;
 11545  13D7  26AA  3190         	fcall	PL12	;call to abstracted procedure
 11546                           
 11547                           ;diag.c: 1177: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD,
 11548                           ;diag.c: 1178: ui8_b_DResB1_RD, ui8_b_DResB2_RD,
 11549                           ;diag.c: 1179: ui8_b_DResB3_RD, ui8_b_DResB4_RD,
 11550                           ;diag.c: 1180: ui8_b_DResB5_RD );
 11551  13D9  2659  3190         	fcall	PL2	;call to abstracted procedure
 11552  13DB  25E1               	fcall	_Transmit_LIN_8Bytes
 11553                           
 11554                           ;diag.c: 1182: phaseCal = 2;
 11555  13DC  3002               	movlw	2
 11556  13DD  00D3               	movwf	_phaseCal^(0+128)
 11557                           
 11558                           ;diag.c: 1184: break;
 11559  13DE  0008               	return
 11560  13DF                     l13086:	
 11561                           
 11562                           ;diag.c: 1191: {
 11563                           ;diag.c: 1195: write_eeprom_data( 0x04, ( unsigned char )( ( 0x7800 / ui16_IPhase2_bldc_
      +                          cal.w )>>8 ) );
 11564  13DF  26D4  3190         	fcall	PL52	;call to abstracted procedure
 11565  13E1  2710  3190         	fcall	___lwdiv
 11566  13E3  0825               	movf	?___lwdiv+1,w
 11567  13E4  00AB               	movwf	write_eeprom_data@ui8_adress_data
 11568  13E5  3004               	movlw	4
 11569  13E6  25C8  3190         	fcall	_write_eeprom_data
 11570                           
 11571                           ;diag.c: 1196: write_eeprom_data( 0x05, ( unsigned char )( 0x7800 / ui16_IPhase2_bldc_ca
      +                          l.w ) );
 11572  13E8  26D4  3190         	fcall	PL52	;call to abstracted procedure
 11573  13EA  2710  3190         	fcall	___lwdiv
 11574  13EC  0824               	movf	?___lwdiv,w
 11575  13ED  00AB               	movwf	write_eeprom_data@ui8_adress_data
 11576  13EE  3005               	movlw	5
 11577  13EF  25C8  3190         	fcall	_write_eeprom_data
 11578                           
 11579                           ;diag.c: 1199: ui16_I_cal_Ph2 = ( read_eeprom_data( 0x04 )<<8 ) | read_eeprom_data( 0x05
      +                           );
 11580  13F1  3005               	movlw	5
 11581  13F2  25BD  3190         	fcall	_read_eeprom_data
 11582  13F4  00B9               	movwf	??_EOL
 11583  13F5  3004               	movlw	4
 11584  13F6  25BD  3190         	fcall	_read_eeprom_data
 11585  13F8  0021               	movlb	1	; select bank1
 11586  13F9  00EB               	movwf	(_ui16_I_cal_Ph2+1)^(0+128)
 11587  13FA  0020               	movlb	0	; select bank0
 11588  13FB  0839               	movf	??_EOL,w
 11589  13FC  0021               	movlb	1	; select bank1
 11590  13FD  00EA               	movwf	_ui16_I_cal_Ph2^(0+128)
 11591                           
 11592                           ;diag.c: 1211: ui8_b_DResB0_RD = phaseCal;
 11593                           
 11594                           ;diag.c: 1212: ui8_b_DResB1_RD = ( unsigned char )( ( ( ui16_IPhase2_bldc_cal.w * ui16_I
      +                          _cal_Ph2 )>>8 )>>8 );
 11595                           
 11596                           ;diag.c: 1213: ui8_b_DResB2_RD = ( unsigned char )( ( ( ui16_IPhase2_bldc_cal.w * ui16_I
      +                          _cal_Ph2 )>>8 ) );
 11597  13FE  2705  3190         	fcall	PL88	;call to abstracted procedure
 11598  1400  0865               	movf	(_ui16_IPhase2_bldc_cal+1)^(0+256),w
 11599  1401  0020               	movlb	0	; select bank0
 11600  1402  00A5               	movwf	___wmul@multiplier+1
 11601  1403  0022               	movlb	2	; select bank2
 11602  1404  0864               	movf	_ui16_IPhase2_bldc_cal^(0+256),w
 11603  1405  0020               	movlb	0	; select bank0
 11604  1406  00A4               	movwf	___wmul@multiplier
 11605  1407  0021               	movlb	1	; select bank1
 11606  1408  086B               	movf	(_ui16_I_cal_Ph2+1)^(0+128),w
 11607  1409  0020               	movlb	0	; select bank0
 11608  140A  00A7               	movwf	___wmul@multiplicand+1
 11609  140B  0021               	movlb	1	; select bank1
 11610  140C  086A               	movf	_ui16_I_cal_Ph2^(0+128),w
 11611  140D  0020               	movlb	0	; select bank0
 11612  140E  00A6               	movwf	___wmul@multiplicand
 11613  140F  263C  3190         	fcall	___wmul
 11614  1411  0825               	movf	?___wmul+1,w
 11615  1412  00D2               	movwf	EOL@ui8_b_DResB2_RD
 11616                           
 11617                           ;diag.c: 1214: ui8_b_DResB3_RD = ( unsigned char )( ui16_I_cal_Ph2>>8 );
 11618  1413  0021               	movlb	1	; select bank1
 11619  1414  086B               	movf	(_ui16_I_cal_Ph2^(0+128)+1),w
 11620  1415  0020               	movlb	0	; select bank0
 11621  1416  00D3               	movwf	EOL@ui8_b_DResB3_RD
 11622                           
 11623                           ;diag.c: 1215: ui8_b_DResB4_RD = ( unsigned char )( ui16_I_cal_Ph2 );
 11624  1417  0021               	movlb	1	; select bank1
 11625  1418  086A               	movf	_ui16_I_cal_Ph2^(0+128),w
 11626                           
 11627                           ;diag.c: 1216: ui8_b_DResB5_RD = 0;
 11628  1419  26AA  3190         	fcall	PL12	;call to abstracted procedure
 11629                           
 11630                           ;diag.c: 1221: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD,
 11631                           ;diag.c: 1222: ui8_b_DResB1_RD, ui8_b_DResB2_RD,
 11632                           ;diag.c: 1223: ui8_b_DResB3_RD, ui8_b_DResB4_RD,
 11633                           ;diag.c: 1224: ui8_b_DResB5_RD );
 11634  141B  2659  3190         	fcall	PL2	;call to abstracted procedure
 11635  141D  25E1               	fcall	_Transmit_LIN_8Bytes
 11636                           
 11637                           ;diag.c: 1227: phaseCal = 3;
 11638  141E  3003               	movlw	3
 11639  141F  00D3               	movwf	_phaseCal^(0+128)
 11640                           
 11641                           ;diag.c: 1229: break;
 11642  1420  0008               	return
 11643  1421                     l13106:	
 11644                           
 11645                           ;diag.c: 1236: {
 11646                           ;diag.c: 1240: write_eeprom_data( 0x06, ( unsigned char )( ( 0x7800 / ui16_IPhase3_bldc_
      +                          cal.w )>>8 ) );
 11647  1421  26ED  3190         	fcall	PL60	;call to abstracted procedure
 11648  1423  26E0  3190         	fcall	PL56	;call to abstracted procedure
 11649  1425  2710  3190         	fcall	___lwdiv
 11650  1427  0825               	movf	?___lwdiv+1,w
 11651  1428  00AB               	movwf	write_eeprom_data@ui8_adress_data
 11652  1429  3006               	movlw	6
 11653  142A  25C8  3190         	fcall	_write_eeprom_data
 11654                           
 11655                           ;diag.c: 1241: write_eeprom_data( 0x07, ( unsigned char )( 0x7800 / ui16_IPhase3_bldc_ca
      +                          l.w ) );
 11656  142C  26ED  3190         	fcall	PL60	;call to abstracted procedure
 11657  142E  26E0  3190         	fcall	PL56	;call to abstracted procedure
 11658  1430  2710  3190         	fcall	___lwdiv
 11659  1432  0824               	movf	?___lwdiv,w
 11660  1433  00AB               	movwf	write_eeprom_data@ui8_adress_data
 11661  1434  3007               	movlw	7
 11662  1435  25C8  3190         	fcall	_write_eeprom_data
 11663                           
 11664                           ;diag.c: 1245: ui16_I_cal_Ph3 = ( read_eeprom_data( 0x06 )<<8 ) | read_eeprom_data( 0x07
      +                           );
 11665  1437  3007               	movlw	7
 11666  1438  25BD  3190         	fcall	_read_eeprom_data
 11667  143A  00B9               	movwf	??_EOL
 11668  143B  3006               	movlw	6
 11669  143C  25BD  3190         	fcall	_read_eeprom_data
 11670  143E  0021               	movlb	1	; select bank1
 11671  143F  00E9               	movwf	(_ui16_I_cal_Ph3+1)^(0+128)
 11672  1440  0020               	movlb	0	; select bank0
 11673  1441  0839               	movf	??_EOL,w
 11674  1442  0021               	movlb	1	; select bank1
 11675  1443  00E8               	movwf	_ui16_I_cal_Ph3^(0+128)
 11676                           
 11677                           ;diag.c: 1258: ui8_b_DResB0_RD = phaseCal;
 11678                           
 11679                           ;diag.c: 1259: ui8_b_DResB1_RD = ( unsigned char )( ( ( ui16_IPhase3_bldc_cal.w * ui16_I
      +                          _cal_Ph3 )>>8 )>>8 );
 11680                           
 11681                           ;diag.c: 1260: ui8_b_DResB2_RD = ( unsigned char )( ( ( ui16_IPhase3_bldc_cal.w * ui16_I
      +                          _cal_Ph3 )>>8 ) );
 11682  1444  2705  3190         	fcall	PL88	;call to abstracted procedure
 11683  1446  0863               	movf	(_ui16_IPhase3_bldc_cal+1)^(0+256),w
 11684  1447  0020               	movlb	0	; select bank0
 11685  1448  00A5               	movwf	___wmul@multiplier+1
 11686  1449  0022               	movlb	2	; select bank2
 11687  144A  0862               	movf	_ui16_IPhase3_bldc_cal^(0+256),w
 11688  144B  0020               	movlb	0	; select bank0
 11689  144C  00A4               	movwf	___wmul@multiplier
 11690  144D  0021               	movlb	1	; select bank1
 11691  144E  0869               	movf	(_ui16_I_cal_Ph3+1)^(0+128),w
 11692  144F  0020               	movlb	0	; select bank0
 11693  1450  00A7               	movwf	___wmul@multiplicand+1
 11694  1451  0021               	movlb	1	; select bank1
 11695  1452  0868               	movf	_ui16_I_cal_Ph3^(0+128),w
 11696  1453  0020               	movlb	0	; select bank0
 11697  1454  00A6               	movwf	___wmul@multiplicand
 11698  1455  263C  3190         	fcall	___wmul
 11699  1457  0825               	movf	?___wmul+1,w
 11700  1458  00D2               	movwf	EOL@ui8_b_DResB2_RD
 11701                           
 11702                           ;diag.c: 1261: ui8_b_DResB3_RD = ( unsigned char )( ui16_I_cal_Ph3>>8 );
 11703  1459  0021               	movlb	1	; select bank1
 11704  145A  0869               	movf	(_ui16_I_cal_Ph3^(0+128)+1),w
 11705  145B  0020               	movlb	0	; select bank0
 11706  145C  00D3               	movwf	EOL@ui8_b_DResB3_RD
 11707                           
 11708                           ;diag.c: 1262: ui8_b_DResB4_RD = ( unsigned char )( ui16_I_cal_Ph3 );
 11709  145D  0021               	movlb	1	; select bank1
 11710  145E  0868               	movf	_ui16_I_cal_Ph3^(0+128),w
 11711                           
 11712                           ;diag.c: 1263: ui8_b_DResB5_RD = 0;
 11713  145F  26AA  3190         	fcall	PL12	;call to abstracted procedure
 11714                           
 11715                           ;diag.c: 1267: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD,
 11716                           ;diag.c: 1268: ui8_b_DResB1_RD, ui8_b_DResB2_RD,
 11717                           ;diag.c: 1269: ui8_b_DResB3_RD, ui8_b_DResB4_RD,
 11718                           ;diag.c: 1270: ui8_b_DResB5_RD );
 11719  1461  2659  3190         	fcall	PL2	;call to abstracted procedure
 11720  1463  25E1               	fcall	_Transmit_LIN_8Bytes
 11721                           
 11722                           ;diag.c: 1271: ui8_selected_lid = 0x98;
 11723  1464  3098               	movlw	152
 11724  1465  0020               	movlb	0	; select bank0
 11725  1466  00E9               	movwf	_ui8_selected_lid
 11726                           
 11727                           ;diag.c: 1274: break;
 11728  1467  0008               	return
 11729  1468                     l13126:	
 11730                           
 11731                           ;diag.c: 1281: {
 11732                           ;diag.c: 1283: NegativeAnswer(ui8_b_DResLocID_c);
 11733  1468  0020               	movlb	0	; select bank0
 11734  1469  0862               	movf	_ui8_b_DResLocID_c,w
 11735  146A  2F35               	ljmp	_NegativeAnswer
 11736  146B                     l13128:	
 11737                           ;diag.c: 1285: }
 11738                           ;diag.c: 1287: }
 11739                           
 11740  146B  0021               	movlb	1	; select bank1
 11741  146C  0853               	movf	_phaseCal^(0+128),w
 11742                           
 11743                           ; Switch size 1, requested type "space"
 11744                           ; Number of cases is 4, Range of values is 0 to 3
 11745                           ; switch strategies available:
 11746                           ; Name         Instructions Cycles
 11747                           ; simple_byte           13     7 (average)
 11748                           ; direct_byte           14     6 (fixed)
 11749                           ; jumptable            260     6 (fixed)
 11750                           ;	Chosen strategy is simple_byte
 11751  146D  3A00               	xorlw	0	; case 0
 11752  146E  1903               	skipnz
 11753  146F  2ABE               	goto	l12968
 11754  1470  3A01               	xorlw	1	; case 1
 11755  1471  1903               	skipnz
 11756  1472  2B99               	goto	l13066
 11757  1473  3A03               	xorlw	3	; case 2
 11758  1474  1903               	skipnz
 11759  1475  2BDF               	goto	l13086
 11760  1476  3A01               	xorlw	1	; case 3
 11761  1477  1903               	skipnz
 11762  1478  2C21               	goto	l13106
 11763  1479  2C68               	goto	l13126
 11764  147A                     l13130:	
 11765                           
 11766                           ;diag.c: 1293: else
 11767                           ;diag.c: 1294: {
 11768                           ;diag.c: 1296: NegativeAnswer(ui8_b_DResLocID_c);
 11769  147A  0862               	movf	_ui8_b_DResLocID_c,w
 11770  147B  2F35               	ljmp	_NegativeAnswer
 11771  147C                     l13132:	
 11772                           
 11773                           ;diag.c: 1311: {
 11774                           ;diag.c: 1313: if( 0x98 == ui8_selected_lid )
 11775  147C  3098               	movlw	152
 11776  147D  0669               	xorwf	_ui8_selected_lid,w
 11777  147E  1D03               	btfss	3,2
 11778  147F  0008               	return
 11779                           
 11780                           ;diag.c: 1315: {
 11781                           ;diag.c: 1328: wkpoint = ui8_b_DResB0_c;
 11782  1480  0861               	movf	_ui8_b_DResB0_c,w
 11783  1481  0021               	movlb	1	; select bank1
 11784  1482  00EE               	movwf	_wkpoint^(0+128)
 11785                           
 11786                           ;diag.c: 1953: break;
 11787                           
 11788                           ;diag.c: 1334: switch( ui8_b_DResB0_c )
 11789  1483  0020               	movlb	0	; select bank0
 11790  1484  0861               	movf	_ui8_b_DResB0_c,w
 11791                           
 11792                           ; Switch size 1, requested type "space"
 11793                           ; Number of cases is 4, Range of values is 1 to 5
 11794                           ; switch strategies available:
 11795                           ; Name         Instructions Cycles
 11796                           ; simple_byte           13     7 (average)
 11797                           ; direct_byte           19     9 (fixed)
 11798                           ; jumptable            263     9 (fixed)
 11799                           ;	Chosen strategy is simple_byte
 11800  1485  3A01               	xorlw	1	; case 1
 11801  1486  1903               	skipnz
 11802  1487  2C92               	goto	l13136
 11803  1488  3A02               	xorlw	2	; case 3
 11804  1489  1903               	skipnz
 11805  148A  2CAF               	goto	l13158
 11806  148B  3A07               	xorlw	7	; case 4
 11807  148C  1903               	skipnz
 11808  148D  2CCC               	goto	l13180
 11809  148E  3A01               	xorlw	1	; case 5
 11810  148F  1903               	skipnz
 11811  1490  2CE9               	goto	l13202
 11812  1491  2D06               	goto	l13224
 11813  1492                     l13136:	
 11814                           
 11815                           ;diag.c: 1342: {
 11816                           ;diag.c: 1344: if( wkpoint == ui8_b_DResB0_c )
 11817  1492  270B  3190         	fcall	PL110	;call to abstracted procedure
 11818  1494  1D03               	skipz
 11819  1495  0008               	return
 11820                           
 11821                           ;diag.c: 1346: {
 11822                           ;diag.c: 1348: ui8_b_DResB0_RD = ui8_b_DResB0_c;
 11823  1496  0861               	movf	_ui8_b_DResB0_c,w
 11824  1497  00D0               	movwf	EOL@ui8_b_DResB0_RD
 11825                           
 11826                           ;diag.c: 1349: ui8_b_DResB1_RD = PWMReadDC( )>>1;
 11827  1498  3182  2205  3190   	fcall	_PWMReadDC
 11828                           
 11829                           ;diag.c: 1350: ui8_b_DResB2_RD = ui16_speed_fil*5/4;
 11830  149B  26AF  3190         	fcall	PL14	;call to abstracted procedure
 11831  149D  263C  3190         	fcall	___wmul
 11832                           
 11833                           ;diag.c: 1351: ui8_b_DResB3_RD = PWM_trans_table[ ui8_b_DResB1_RD ];
 11834                           
 11835                           ;diag.c: 1352: ui8_b_DResB4_RD = 0;
 11836                           
 11837                           ;diag.c: 1353: ui8_b_DResB5_RD = 0;
 11838                           
 11839                           ;diag.c: 1356: if ((ui8_b_DResB2_RD < ui8_b_DResB3_RD + 3) && (ui8_b_DResB2_RD > ui8_b_D
      +                          ResB3_RD - 3))
 11840  149F  2677  3190         	fcall	PL6	;call to abstracted procedure
 11841  14A1  1803               	skipnc
 11842  14A2  2CAC               	goto	l13156
 11843  14A3  2699  3190         	fcall	PL10	;call to abstracted procedure
 11844  14A5  1803               	skipnc
 11845  14A6  2CAC               	goto	l13156
 11846                           
 11847                           ;diag.c: 1358: {
 11848                           ;diag.c: 1360: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD, ui8_
      +                          b_DResB1_RD, ui8_b_DResB2_RD, ui8_b_DResB3_RD, ui8_b_DResB4_RD, ui8_b_DResB5_RD );
 11849  14A7  303A               	movlw	58
 11850  14A8  0020               	movlb	0	; select bank0
 11851  14A9  2659  3190         	fcall	PL2	;call to abstracted procedure
 11852  14AB  2DE1               	ljmp	_Transmit_LIN_8Bytes
 11853  14AC                     l13156:	
 11854                           ;diag.c: 1363: }
 11855                           
 11856                           
 11857                           ;diag.c: 1366: else
 11858                           ;diag.c: 1367: {
 11859                           ;diag.c: 1369: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, ui8_b_DResB0_c, 0xFF,
      +                           0xFF, 0xFF, 0xFF, 0xFF );
 11860  14AC  26BE  3190         	fcall	PL16	;call to abstracted procedure
 11861  14AE  2DE1               	ljmp	_Transmit_LIN_8Bytes
 11862  14AF                     l13158:	
 11863                           
 11864                           ;diag.c: 1519: {
 11865                           ;diag.c: 1521: if( wkpoint == ui8_b_DResB0_c )
 11866  14AF  270B  3190         	fcall	PL110	;call to abstracted procedure
 11867  14B1  1D03               	skipz
 11868  14B2  0008               	return
 11869                           
 11870                           ;diag.c: 1523: {
 11871                           ;diag.c: 1525: ui8_b_DResB0_RD = ui8_b_DResB0_c;
 11872  14B3  0861               	movf	_ui8_b_DResB0_c,w
 11873  14B4  00D0               	movwf	EOL@ui8_b_DResB0_RD
 11874                           
 11875                           ;diag.c: 1526: ui8_b_DResB1_RD = PWMReadDC( )>>1;
 11876  14B5  3182  2205  3190   	fcall	_PWMReadDC
 11877                           
 11878                           ;diag.c: 1527: ui8_b_DResB2_RD = ui16_speed_fil*5/4;
 11879  14B8  26AF  3190         	fcall	PL14	;call to abstracted procedure
 11880  14BA  263C  3190         	fcall	___wmul
 11881                           
 11882                           ;diag.c: 1528: ui8_b_DResB3_RD = PWM_trans_table[ ui8_b_DResB1_RD ];
 11883                           
 11884                           ;diag.c: 1529: ui8_b_DResB4_RD = 0;
 11885                           
 11886                           ;diag.c: 1530: ui8_b_DResB5_RD = 0;
 11887                           
 11888                           ;diag.c: 1534: if ((ui8_b_DResB2_RD < ui8_b_DResB3_RD + 3) && (ui8_b_DResB2_RD > ui8_b_D
      +                          ResB3_RD - 3))
 11889  14BC  2677  3190         	fcall	PL6	;call to abstracted procedure
 11890  14BE  1803               	skipnc
 11891  14BF  2CC9               	goto	l13178
 11892  14C0  2699  3190         	fcall	PL10	;call to abstracted procedure
 11893  14C2  1803               	skipnc
 11894  14C3  2CC9               	goto	l13178
 11895                           
 11896                           ;diag.c: 1536: {
 11897                           ;diag.c: 1538: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c,
 11898                           ;diag.c: 1539: ui8_b_DResB0_RD, ui8_b_DResB1_RD,
 11899                           ;diag.c: 1540: ui8_b_DResB2_RD, ui8_b_DResB3_RD,
 11900                           ;diag.c: 1541: ui8_b_DResB4_RD,
 11901                           ;diag.c: 1542: ui8_b_DResB5_RD );
 11902  14C4  303A               	movlw	58
 11903  14C5  0020               	movlb	0	; select bank0
 11904  14C6  2659  3190         	fcall	PL2	;call to abstracted procedure
 11905  14C8  2DE1               	ljmp	_Transmit_LIN_8Bytes
 11906  14C9                     l13178:	
 11907                           ;diag.c: 1545: }
 11908                           
 11909                           
 11910                           ;diag.c: 1548: else
 11911                           ;diag.c: 1549: {
 11912                           ;diag.c: 1551: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, ui8_b_DResB0_c, 0xFF,
      +                           0xFF, 0xFF, 0xFF, 0xFF );
 11913  14C9  26BE  3190         	fcall	PL16	;call to abstracted procedure
 11914  14CB  2DE1               	ljmp	_Transmit_LIN_8Bytes
 11915  14CC                     l13180:	
 11916                           
 11917                           ;diag.c: 1607: {
 11918                           ;diag.c: 1609: if( wkpoint == ui8_b_DResB0_c )
 11919  14CC  270B  3190         	fcall	PL110	;call to abstracted procedure
 11920  14CE  1D03               	skipz
 11921  14CF  0008               	return
 11922                           
 11923                           ;diag.c: 1611: {
 11924                           ;diag.c: 1613: ui8_b_DResB0_RD = ui8_b_DResB0_c;
 11925  14D0  0861               	movf	_ui8_b_DResB0_c,w
 11926  14D1  00D0               	movwf	EOL@ui8_b_DResB0_RD
 11927                           
 11928                           ;diag.c: 1614: ui8_b_DResB1_RD = PWMReadDC( )>>1;
 11929  14D2  3182  2205  3190   	fcall	_PWMReadDC
 11930                           
 11931                           ;diag.c: 1615: ui8_b_DResB2_RD = ui16_speed_fil*5/4;
 11932  14D5  26AF  3190         	fcall	PL14	;call to abstracted procedure
 11933  14D7  263C  3190         	fcall	___wmul
 11934                           
 11935                           ;diag.c: 1616: ui8_b_DResB3_RD = PWM_trans_table[ ui8_b_DResB1_RD ];
 11936                           
 11937                           ;diag.c: 1617: ui8_b_DResB4_RD = 0;
 11938                           
 11939                           ;diag.c: 1618: ui8_b_DResB5_RD = 0;
 11940                           
 11941                           ;diag.c: 1622: if ((ui8_b_DResB2_RD < ui8_b_DResB3_RD + 3) && (ui8_b_DResB2_RD > ui8_b_D
      +                          ResB3_RD - 3))
 11942  14D9  2677  3190         	fcall	PL6	;call to abstracted procedure
 11943  14DB  1803               	skipnc
 11944  14DC  2CE6               	goto	l13200
 11945  14DD  2699  3190         	fcall	PL10	;call to abstracted procedure
 11946  14DF  1803               	skipnc
 11947  14E0  2CE6               	goto	l13200
 11948                           
 11949                           ;diag.c: 1624: {
 11950                           ;diag.c: 1626: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c,
 11951                           ;diag.c: 1627: ui8_b_DResB0_RD, ui8_b_DResB1_RD,
 11952                           ;diag.c: 1628: ui8_b_DResB2_RD, ui8_b_DResB3_RD,
 11953                           ;diag.c: 1629: ui8_b_DResB4_RD,
 11954                           ;diag.c: 1630: ui8_b_DResB5_RD );
 11955  14E1  303A               	movlw	58
 11956  14E2  0020               	movlb	0	; select bank0
 11957  14E3  2659  3190         	fcall	PL2	;call to abstracted procedure
 11958  14E5  2DE1               	ljmp	_Transmit_LIN_8Bytes
 11959  14E6                     l13200:	
 11960                           ;diag.c: 1633: }
 11961                           
 11962                           
 11963                           ;diag.c: 1636: else
 11964                           ;diag.c: 1637: {
 11965                           ;diag.c: 1639: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, ui8_b_DResB0_c, 0xFF,
      +                           0xFF, 0xFF, 0xFF, 0xFF );
 11966  14E6  26BE  3190         	fcall	PL16	;call to abstracted procedure
 11967  14E8  2DE1               	ljmp	_Transmit_LIN_8Bytes
 11968  14E9                     l13202:	
 11969                           
 11970                           ;diag.c: 1693: {
 11971                           ;diag.c: 1695: if( wkpoint == ui8_b_DResB0_c )
 11972  14E9  270B  3190         	fcall	PL110	;call to abstracted procedure
 11973  14EB  1D03               	skipz
 11974  14EC  0008               	return
 11975                           
 11976                           ;diag.c: 1697: {
 11977                           ;diag.c: 1699: ui8_b_DResB0_RD = ui8_b_DResB0_c;
 11978  14ED  0861               	movf	_ui8_b_DResB0_c,w
 11979  14EE  00D0               	movwf	EOL@ui8_b_DResB0_RD
 11980                           
 11981                           ;diag.c: 1700: ui8_b_DResB1_RD = PWMReadDC( )>>1;
 11982  14EF  3182  2205  3190   	fcall	_PWMReadDC
 11983                           
 11984                           ;diag.c: 1701: ui8_b_DResB2_RD = ui16_speed_fil*5/4;
 11985  14F2  26AF  3190         	fcall	PL14	;call to abstracted procedure
 11986  14F4  263C  3190         	fcall	___wmul
 11987                           
 11988                           ;diag.c: 1702: ui8_b_DResB3_RD = PWM_trans_table[ ui8_b_DResB1_RD ];
 11989                           
 11990                           ;diag.c: 1703: ui8_b_DResB4_RD = 0;
 11991                           
 11992                           ;diag.c: 1704: ui8_b_DResB5_RD = 0;
 11993                           
 11994                           ;diag.c: 1707: if ((ui8_b_DResB2_RD < ui8_b_DResB3_RD + 3) && (ui8_b_DResB2_RD > ui8_b_D
      +                          ResB3_RD - 3))
 11995  14F6  2677  3190         	fcall	PL6	;call to abstracted procedure
 11996  14F8  1803               	skipnc
 11997  14F9  2D03               	goto	l13222
 11998  14FA  2699  3190         	fcall	PL10	;call to abstracted procedure
 11999  14FC  1803               	skipnc
 12000  14FD  2D03               	goto	l13222
 12001                           
 12002                           ;diag.c: 1709: {
 12003                           ;diag.c: 1711: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c,
 12004                           ;diag.c: 1712: ui8_b_DResB0_RD, ui8_b_DResB1_RD,
 12005                           ;diag.c: 1713: ui8_b_DResB2_RD, ui8_b_DResB3_RD,
 12006                           ;diag.c: 1714: ui8_b_DResB4_RD,
 12007                           ;diag.c: 1715: ui8_b_DResB5_RD );
 12008  14FE  303A               	movlw	58
 12009  14FF  0020               	movlb	0	; select bank0
 12010  1500  2659  3190         	fcall	PL2	;call to abstracted procedure
 12011  1502  2DE1               	ljmp	_Transmit_LIN_8Bytes
 12012  1503                     l13222:	
 12013                           ;diag.c: 1718: }
 12014                           
 12015                           
 12016                           ;diag.c: 1721: else
 12017                           ;diag.c: 1722: {
 12018                           ;diag.c: 1724: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, ui8_b_DResB0_c, 0xFF,
      +                           0xFF, 0xFF, 0xFF, 0xFF );
 12019  1503  26BE  3190         	fcall	PL16	;call to abstracted procedure
 12020  1505  2DE1               	ljmp	_Transmit_LIN_8Bytes
 12021  1506                     l13224:	
 12022                           
 12023                           ;diag.c: 1948: {
 12024                           ;diag.c: 1952: NegativeAnswer(ui8_b_DResLocID_c);
 12025  1506  0862               	movf	_ui8_b_DResLocID_c,w
 12026  1507  2F35               	ljmp	_NegativeAnswer
 12027  1508                     l13230:	
 12028                           
 12029                           ;diag.c: 1992: {
 12030                           ;diag.c: 1994: if( 0x9f == ui8_selected_lid )
 12031  1508  309F               	movlw	159
 12032  1509  0669               	xorwf	_ui8_selected_lid,w
 12033  150A  1D03               	btfss	3,2
 12034  150B  0008               	return
 12035                           
 12036                           ;diag.c: 1996: {
 12037                           ;diag.c: 2000: ui8_failure = ui8_b_DResB0_c;
 12038  150C  0861               	movf	_ui8_b_DResB0_c,w
 12039  150D  0022               	movlb	2	; select bank2
 12040  150E  00EE               	movwf	_ui8_failure^(0+256)
 12041                           
 12042                           ;diag.c: 2005: switch (ui8_failure)
 12043  150F  2D3B               	goto	l13302
 12044  1510                     l13234:	
 12045                           
 12046                           ;diag.c: 2098: {
 12047                           ;diag.c: 2102: PWM_Write_Out( 55 );
 12048  1510  3037               	movlw	55
 12049  1511  2651  3190         	fcall	_PWM_Write_Out
 12050                           
 12051                           ;diag.c: 2103: ui8_error_Flags.bits.B0 = 0;
 12052  1513  0020               	movlb	0	; select bank0
 12053  1514  3037               	movlw	55
 12054  1515  1065               	bcf	_ui8_error_Flags,0
 12055                           
 12056                           ;diag.c: 2104: ui8_error_Flags.bits.B1 = 0;
 12057  1516  10E5               	bcf	_ui8_error_Flags,1
 12058                           
 12059                           ;diag.c: 2105: ui8_error_Flags.bits.B7 = 0;
 12060  1517  13E5               	bcf	_ui8_error_Flags,7
 12061                           
 12062                           ;diag.c: 2106: ui8_error_Flags.bits.B2 = 0;
 12063  1518  1165               	bcf	_ui8_error_Flags,2
 12064                           
 12065                           ;diag.c: 2107: ui8_error_Flags.bits.B3 = 1;
 12066  1519  15E5               	bsf	_ui8_error_Flags,3
 12067                           
 12068                           ;diag.c: 2108: ui8_error_Flags.bits.B4 = 0;
 12069  151A  1265               	bcf	_ui8_error_Flags,4
 12070                           
 12071                           ;diag.c: 2109: ui8_error_Flags.bits.B6 = 0;
 12072  151B  1365               	bcf	_ui8_error_Flags,6
 12073                           
 12074                           ;diag.c: 2110: ui8_error_Flags.bits.B5 = 0;
 12075  151C  12E5               	bcf	_ui8_error_Flags,5
 12076                           
 12077                           ;diag.c: 2111: ui8_b_DResB1_RD = 55;
 12078  151D  00D1               	movwf	EOL@ui8_b_DResB1_RD
 12079                           
 12080                           ;diag.c: 2112: ui8_b_DResB0_RD = 8;
 12081  151E  3008               	movlw	8
 12082  151F  00D0               	movwf	EOL@ui8_b_DResB0_RD
 12083                           
 12084                           ;diag.c: 2113: ui8_failure = 3;
 12085  1520  3003               	movlw	3
 12086  1521  0022               	movlb	2	; select bank2
 12087  1522  00EE               	movwf	_ui8_failure^(0+256)
 12088                           
 12089                           ;diag.c: 2114: break;
 12090  1523  2D43               	goto	l13304
 12091  1524                     l13258:	
 12092                           
 12093                           ;diag.c: 2151: {
 12094                           ;diag.c: 2155: PWM_Write_Out( 77 );
 12095  1524  304D               	movlw	77
 12096  1525  2651  3190         	fcall	_PWM_Write_Out
 12097                           
 12098                           ;diag.c: 2156: ui8_error_Flags.bits.B0 = 0;
 12099  1527  0020               	movlb	0	; select bank0
 12100  1528  304D               	movlw	77
 12101                           
 12102                           ;diag.c: 2157: ui8_error_Flags.bits.B1 = 0;
 12103                           
 12104                           ;diag.c: 2158: ui8_error_Flags.bits.B7 = 0;
 12105                           
 12106                           ;diag.c: 2159: ui8_error_Flags.bits.B2 = 0;
 12107                           
 12108                           ;diag.c: 2160: ui8_error_Flags.bits.B3 = 0;
 12109                           
 12110                           ;diag.c: 2161: ui8_error_Flags.bits.B4 = 0;
 12111                           
 12112                           ;diag.c: 2162: ui8_error_Flags.bits.B6 = 0;
 12113  1529  26FD  3190         	fcall	PL82	;call to abstracted procedure
 12114                           
 12115                           ;diag.c: 2163: ui8_error_Flags.bits.B5 = 1;
 12116  152B  16E5               	bsf	_ui8_error_Flags,5
 12117                           
 12118                           ;diag.c: 2165: ui8_b_DResB1_RD = 77;
 12119  152C  00D1               	movwf	EOL@ui8_b_DResB1_RD
 12120                           
 12121                           ;diag.c: 2166: ui8_b_DResB0_RD= 1;
 12122  152D  01D0               	clrf	EOL@ui8_b_DResB0_RD
 12123  152E  0AD0               	incf	EOL@ui8_b_DResB0_RD,f
 12124                           
 12125                           ;diag.c: 2167: ui8_failure = 1;
 12126  152F  0022               	movlb	2	; select bank2
 12127  1530  01EE               	clrf	_ui8_failure^(0+256)
 12128  1531  0AEE               	incf	_ui8_failure^(0+256),f
 12129                           
 12130                           ;diag.c: 2168: break;
 12131  1532  2D43               	goto	l13304
 12132  1533                     l13282:	
 12133                           
 12134                           ;diag.c: 2205: {
 12135                           ;diag.c: 2209: PWM_Write_Out( 11 );
 12136  1533  300B               	movlw	11
 12137  1534  2651  3190         	fcall	_PWM_Write_Out
 12138                           
 12139                           ;diag.c: 2210: ui8_error_Flags.bits.B0 = 0;
 12140  1536  0020               	movlb	0	; select bank0
 12141                           
 12142                           ;diag.c: 2211: ui8_error_Flags.bits.B1 = 0;
 12143                           
 12144                           ;diag.c: 2212: ui8_error_Flags.bits.B7 = 0;
 12145                           
 12146                           ;diag.c: 2213: ui8_error_Flags.bits.B2 = 0;
 12147                           
 12148                           ;diag.c: 2214: ui8_error_Flags.bits.B3 = 0;
 12149                           
 12150                           ;diag.c: 2215: ui8_error_Flags.bits.B4 = 0;
 12151                           
 12152                           ;diag.c: 2216: ui8_error_Flags.bits.B6 = 0;
 12153  1537  26FD  3190         	fcall	PL82	;call to abstracted procedure
 12154                           
 12155                           ;diag.c: 2217: ui8_error_Flags.bits.B5 = 0;
 12156  1539  12E5               	bcf	_ui8_error_Flags,5
 12157                           
 12158                           ;diag.c: 2218: break;
 12159  153A  2D43               	goto	l13304
 12160  153B                     l13302:	
 12161  153B  086E               	movf	_ui8_failure^(0+256),w
 12162                           
 12163                           ; Switch size 1, requested type "space"
 12164                           ; Number of cases is 2, Range of values is 2 to 4
 12165                           ; switch strategies available:
 12166                           ; Name         Instructions Cycles
 12167                           ; simple_byte            7     4 (average)
 12168                           ; direct_byte           15     9 (fixed)
 12169                           ; jumptable            263     9 (fixed)
 12170                           ;	Chosen strategy is simple_byte
 12171  153C  3A02               	xorlw	2	; case 2
 12172  153D  1903               	skipnz
 12173  153E  2D24               	goto	l13258
 12174  153F  3A06               	xorlw	6	; case 4
 12175  1540  1903               	skipnz
 12176  1541  2D10               	goto	l13234
 12177  1542  2D33               	goto	l13282
 12178  1543                     l13304:	
 12179                           
 12180                           ;diag.c: 2231: ui8_b_DResB2_RD = 0;
 12181  1543  0020               	movlb	0	; select bank0
 12182  1544  303A               	movlw	58
 12183  1545  01D2               	clrf	EOL@ui8_b_DResB2_RD
 12184                           
 12185                           ;diag.c: 2232: ui8_b_DResB3_RD = 0;
 12186  1546  01D3               	clrf	EOL@ui8_b_DResB3_RD
 12187                           
 12188                           ;diag.c: 2233: ui8_b_DResB4_RD = 0;
 12189  1547  01CF               	clrf	EOL@ui8_b_DResB4_RD
 12190                           
 12191                           ;diag.c: 2234: ui8_b_DResB5_RD = 0;
 12192  1548  01CE               	clrf	EOL@ui8_b_DResB5_RD
 12193                           
 12194                           ;diag.c: 2237: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD,
 12195                           ;diag.c: 2238: ui8_b_DResB1_RD, ui8_b_DResB2_RD,
 12196                           ;diag.c: 2239: ui8_b_DResB3_RD, ui8_b_DResB4_RD,
 12197                           ;diag.c: 2240: ui8_b_DResB5_RD );
 12198  1549  2659  3190         	fcall	PL2	;call to abstracted procedure
 12199  154B  2DE1               	ljmp	_Transmit_LIN_8Bytes
 12200  154C                     l13308:	
 12201                           ;diag.c: 2243: }
 12202                           
 12203                           
 12204                           ;diag.c: 2271: {
 12205                           ;diag.c: 2273: if( 0xa0 == ui8_selected_lid )
 12206  154C  30A0               	movlw	160
 12207  154D  0669               	xorwf	_ui8_selected_lid,w
 12208  154E  1D03               	btfss	3,2
 12209  154F  0008               	return
 12210                           
 12211                           ;diag.c: 2275: {
 12212                           ;diag.c: 2285: write_eeprom_data( 0xf4, ui8_b_DResB0_c );
 12213  1550  0861               	movf	_ui8_b_DResB0_c,w
 12214  1551  00AB               	movwf	write_eeprom_data@ui8_adress_data
 12215  1552  30F4               	movlw	244
 12216  1553  25C8  3190         	fcall	_write_eeprom_data
 12217                           
 12218                           ;diag.c: 2286: write_eeprom_data( 0xf5, ui8_b_DResB1_c );
 12219  1555  0021               	movlb	1	; select bank1
 12220  1556  0857               	movf	_ui8_b_DResB1_c^(0+128),w
 12221  1557  0020               	movlb	0	; select bank0
 12222  1558  00AB               	movwf	write_eeprom_data@ui8_adress_data
 12223  1559  30F5               	movlw	245
 12224  155A  25C8  3190         	fcall	_write_eeprom_data
 12225                           
 12226                           ;diag.c: 2287: write_eeprom_data( 0xf6, ui8_b_DResB2_c );
 12227  155C  0021               	movlb	1	; select bank1
 12228  155D  0856               	movf	_ui8_b_DResB2_c^(0+128),w
 12229  155E  0020               	movlb	0	; select bank0
 12230  155F  00AB               	movwf	write_eeprom_data@ui8_adress_data
 12231  1560  30F6               	movlw	246
 12232  1561  25C8  3190         	fcall	_write_eeprom_data
 12233                           
 12234                           ;diag.c: 2288: write_eeprom_data( 0xf7, ui8_b_DResB3_c );
 12235  1563  0021               	movlb	1	; select bank1
 12236  1564  0855               	movf	_ui8_b_DResB3_c^(0+128),w
 12237  1565  0020               	movlb	0	; select bank0
 12238  1566  00AB               	movwf	write_eeprom_data@ui8_adress_data
 12239  1567  30F7               	movlw	247
 12240  1568  25C8  3190         	fcall	_write_eeprom_data
 12241                           
 12242                           ;diag.c: 2289: write_eeprom_data( 0xf8, ui8_b_DResB4_c );
 12243  156A  0021               	movlb	1	; select bank1
 12244  156B  0854               	movf	_ui8_b_DResB4_c^(0+128),w
 12245  156C  0020               	movlb	0	; select bank0
 12246  156D  00AB               	movwf	write_eeprom_data@ui8_adress_data
 12247  156E  30F8               	movlw	248
 12248  156F  25C8  3190         	fcall	_write_eeprom_data
 12249                           
 12250                           ;diag.c: 2301: ui8_b_DResB0_RD = read_eeprom_data( 0xf4 );
 12251  1571  30F4               	movlw	244
 12252  1572  25BD  3190         	fcall	_read_eeprom_data
 12253  1574  00D0               	movwf	EOL@ui8_b_DResB0_RD
 12254                           
 12255                           ;diag.c: 2302: ui8_b_DResB1_RD = read_eeprom_data( 0xf5 );
 12256  1575  30F5               	movlw	245
 12257  1576  25BD  3190         	fcall	_read_eeprom_data
 12258  1578  00D1               	movwf	EOL@ui8_b_DResB1_RD
 12259                           
 12260                           ;diag.c: 2303: ui8_b_DResB2_RD = read_eeprom_data( 0xf6 );
 12261  1579  30F6               	movlw	246
 12262  157A  25BD  3190         	fcall	_read_eeprom_data
 12263  157C  00D2               	movwf	EOL@ui8_b_DResB2_RD
 12264                           
 12265                           ;diag.c: 2304: ui8_b_DResB3_RD = read_eeprom_data( 0xf7 );
 12266  157D  30F7               	movlw	247
 12267  157E  25BD  3190         	fcall	_read_eeprom_data
 12268  1580  00D3               	movwf	EOL@ui8_b_DResB3_RD
 12269                           
 12270                           ;diag.c: 2305: ui8_b_DResB4_RD = read_eeprom_data( 0xf8 );
 12271  1581  30F8               	movlw	248
 12272  1582  25BD  3190         	fcall	_read_eeprom_data
 12273  1584  00CF               	movwf	EOL@ui8_b_DResB4_RD
 12274                           
 12275                           ;diag.c: 2306: ui8_b_DResB5_RD = 0;
 12276  1585  01CE               	clrf	EOL@ui8_b_DResB5_RD
 12277                           
 12278                           ;diag.c: 2309: if ((ui8_b_DResB0_RD != 0xFF) && (ui8_b_DResB1_RD != 0xFF) && (ui8_b_DRes
      +                          B2_RD != 0xFF) && (ui8_b_DResB3_RD != 0xFF) && (ui8_b_DResB4_RD != 0xFF))
 12279  1586  0A50               	incf	EOL@ui8_b_DResB0_RD,w
 12280  1587  1903               	btfsc	3,2
 12281  1588  2D9A               	goto	l13336
 12282  1589  0A51               	incf	EOL@ui8_b_DResB1_RD,w
 12283  158A  1903               	btfsc	3,2
 12284  158B  2D9A               	goto	l13336
 12285  158C  0A52               	incf	EOL@ui8_b_DResB2_RD,w
 12286  158D  1903               	btfsc	3,2
 12287  158E  2D9A               	goto	l13336
 12288  158F  0A53               	incf	EOL@ui8_b_DResB3_RD,w
 12289  1590  1903               	btfsc	3,2
 12290  1591  2D9A               	goto	l13336
 12291  1592  0A4F               	incf	EOL@ui8_b_DResB4_RD,w
 12292  1593  1903               	btfsc	3,2
 12293  1594  2D9A               	goto	l13336
 12294                           
 12295                           ;diag.c: 2311: {
 12296                           ;diag.c: 2313: Transmit_LIN_8Bytes( 0x10, 0x3A, ui8_b_DResLocID_c, ui8_b_DResB0_RD, ui8_
      +                          b_DResB1_RD, ui8_b_DResB2_RD, ui8_b_DResB3_RD, ui8_b_DResB4_RD, ui8_b_DResB5_RD );
 12297  1595  303A               	movlw	58
 12298  1596  00AF               	movwf	Transmit_LIN_8Bytes@B0
 12299  1597  2669  3190         	fcall	PL4	;call to abstracted procedure
 12300  1599  2D9F               	goto	L15
 12301  159A                     l13336:	
 12302                           ;diag.c: 2316: }
 12303                           
 12304                           
 12305                           ;diag.c: 2319: else
 12306                           ;diag.c: 2320: {
 12307                           ;diag.c: 2322: Transmit_LIN_8Bytes( 0x10, 0x7F, ui8_b_DResLocID_c, 0xFF, 0xFF, 0xFF,0xFF
      +                          , 0xFF, 0xFF );
 12308  159A  307F               	movlw	127
 12309  159B  00AF               	movwf	Transmit_LIN_8Bytes@B0
 12310  159C  0862               	movf	_ui8_b_DResLocID_c,w
 12311  159D  26CC  3190         	fcall	PL22	;call to abstracted procedure
 12312  159F                     L15:	
 12313  159F  00B6               	movwf	Transmit_LIN_8Bytes@B7
 12314  15A0  3010               	movlw	16
 12315  15A1  25E1               	fcall	_Transmit_LIN_8Bytes
 12316                           
 12317                           ;diag.c: 2332: }
 12318                           ;diag.c: 2336: ui8_selected_lid = 0xfa;
 12319  15A2  30FA               	movlw	250
 12320  15A3  0020               	movlb	0	; select bank0
 12321  15A4  00E9               	movwf	_ui8_selected_lid
 12322                           
 12323                           ;diag.c: 2339: }
 12324  15A5  0008               	return
 12325  15A6                     l13340:	
 12326                           
 12327                           ;diag.c: 2365: {
 12328                           ;diag.c: 2367: if( 0xfa == ui8_selected_lid )
 12329  15A6  30FA               	movlw	250
 12330  15A7  0669               	xorwf	_ui8_selected_lid,w
 12331  15A8  1D03               	btfss	3,2
 12332  15A9  0008               	return
 12333                           
 12334                           ;diag.c: 2369: {
 12335                           ;diag.c: 2371: Transmit_LIN_8Bytes( 0x10, 0x3a, ui8_b_DResLocID_c, 0x00, 0x00, 0x00, 0x0
      +                          0, 0x00, 0x00 );
 12336  15AA  303A               	movlw	58
 12337  15AB  00AF               	movwf	Transmit_LIN_8Bytes@B0
 12338  15AC  0862               	movf	_ui8_b_DResLocID_c,w
 12339  15AD  26F4  3190         	fcall	PL76	;call to abstracted procedure
 12340  15AF  25E1  3190         	fcall	_Transmit_LIN_8Bytes
 12341                           
 12342                           ;diag.c: 2372: write_eeprom_data(0x55,0x55);
 12343  15B1  3055               	movlw	85
 12344  15B2  0020               	movlb	0	; select bank0
 12345  15B3  00AB               	movwf	write_eeprom_data@ui8_adress_data
 12346  15B4  25C8               	fcall	_write_eeprom_data
 12347                           
 12348                           ;diag.c: 2373: RC5 = 0;
 12349  15B5  0020               	movlb	0	; select bank0
 12350  15B6  128E               	bcf	14,5	;volatile
 12351                           
 12352                           ;diag.c: 2375: }
 12353  15B7  0008               	return
 12354  15B8                     l13348:	
 12355                           
 12356                           ;diag.c: 2399: {
 12357                           ;diag.c: 2405: NegativeAnswer(ui8_selected_lid);
 12358  15B8  0869               	movf	_ui8_selected_lid,w
 12359  15B9  2F35               	ljmp	_NegativeAnswer
 12360  15BA                     l13354:	
 12361                           
 12362                           ;diag.c: 2417: else
 12363                           ;diag.c: 2418: {
 12364                           ;diag.c: 2424: NegativeAnswer(ui8_selected_lid);
 12365  15BA  0020               	movlb	0	; select bank0
 12366  15BB  0869               	movf	_ui8_selected_lid,w
 12367  15BC  2F35               	ljmp	_NegativeAnswer
 12368  15BD                     __end_of_EOL:	
 12369  15BD                     __ptext26:	
 12370 ;; *************** function _read_eeprom_data *****************
 12371 ;; Defined at:
 12372 ;;		line 52 in file "../eeprom.c"
 12373 ;; Parameters:    Size  Location     Type
 12374 ;;  ui8_adress      1    wreg     unsigned char 
 12375 ;; Auto vars:     Size  Location     Type
 12376 ;;  ui8_adress      1    4[BANK0 ] unsigned char 
 12377 ;;  ui8_adress_d    1    5[BANK0 ] unsigned char 
 12378 ;; Return value:  Size  Location     Type
 12379 ;;                  1    wreg      unsigned char 
 12380 ;; Registers used:
 12381 ;;		wreg
 12382 ;; Tracked objects:
 12383 ;;		On entry : 1C/2
 12384 ;;		On exit  : 1F/0
 12385 ;;		Unchanged: 0/0
 12386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12387 ;;      Params:         0       0       0       0       0       0       0       0
 12388 ;;      Locals:         0       2       0       0       0       0       0       0
 12389 ;;      Temps:          0       0       0       0       0       0       0       0
 12390 ;;      Totals:         0       2       0       0       0       0       0       0
 12391 ;;Total ram usage:        2 bytes
 12392 ;; Hardware stack levels used:    1
 12393 ;; Hardware stack levels required when called:    3
 12394 ;; This function calls:
 12395 ;;		Nothing
 12396 ;; This function is called by:
 12397 ;;		_EOL
 12398 ;;		_I_calibrationInit
 12399 ;;		_init_ports
 12400 ;;		_main
 12401 ;; This function uses a non-reentrant model
 12402 ;;
 12403                           
 12404                           
 12405                           ;psect for function _read_eeprom_data
 12406  15BD                     _read_eeprom_data:	
 12407                           
 12408                           ;incstack = 0
 12409                           ; Regs used in _read_eeprom_data: [wreg]
 12410                           ;read_eeprom_data@ui8_adress stored from wreg
 12411  15BD  0020               	movlb	0	; select bank0
 12412  15BE  00A4               	movwf	read_eeprom_data@ui8_adress
 12413                           
 12414                           ;eeprom.c: 56: unsigned char ui8_adress_data;
 12415                           ;eeprom.c: 58: EEADRL = ui8_adress;
 12416  15BF  0023               	movlb	3	; select bank3
 12417  15C0  0091               	movwf	17	;volatile
 12418                           
 12419                           ;eeprom.c: 59: EEPGD = 0;
 12420  15C1  1395               	bcf	21,7	;volsfr
 12421                           
 12422                           ;eeprom.c: 60: CFGS = 0;
 12423  15C2  1315               	bcf	21,6	;volsfr
 12424                           
 12425                           ;eeprom.c: 61: RD = 1;
 12426  15C3  1415               	bsf	21,0	;volsfr
 12427                           
 12428                           ;eeprom.c: 62: ui8_adress_data = EEDATL;
 12429  15C4  0813               	movf	19,w	;volatile
 12430  15C5  0020               	movlb	0	; select bank0
 12431  15C6  00A5               	movwf	read_eeprom_data@ui8_adress_data
 12432                           
 12433                           ;eeprom.c: 64: return ui8_adress_data;
 12434  15C7  0008               	return
 12435  15C8                     __end_of_read_eeprom_data:	
 12436  15C8                     __ptext25:	
 12437 ;; *************** function _write_eeprom_data *****************
 12438 ;; Defined at:
 12439 ;;		line 83 in file "../eeprom.c"
 12440 ;; Parameters:    Size  Location     Type
 12441 ;;  ui8_adress      1    wreg     unsigned char 
 12442 ;;  ui8_adress_d    1   11[BANK0 ] unsigned char 
 12443 ;; Auto vars:     Size  Location     Type
 12444 ;;  ui8_adress      1   12[BANK0 ] unsigned char 
 12445 ;; Return value:  Size  Location     Type
 12446 ;;                  1    wreg      void 
 12447 ;; Registers used:
 12448 ;;		wreg
 12449 ;; Tracked objects:
 12450 ;;		On entry : 1F/0
 12451 ;;		On exit  : 1F/3
 12452 ;;		Unchanged: 0/0
 12453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12454 ;;      Params:         0       1       0       0       0       0       0       0
 12455 ;;      Locals:         0       1       0       0       0       0       0       0
 12456 ;;      Temps:          0       0       0       0       0       0       0       0
 12457 ;;      Totals:         0       2       0       0       0       0       0       0
 12458 ;;Total ram usage:        2 bytes
 12459 ;; Hardware stack levels used:    1
 12460 ;; Hardware stack levels required when called:    3
 12461 ;; This function calls:
 12462 ;;		Nothing
 12463 ;; This function is called by:
 12464 ;;		_EOL
 12465 ;; This function uses a non-reentrant model
 12466 ;;
 12467                           
 12468                           
 12469                           ;psect for function _write_eeprom_data
 12470  15C8                     _write_eeprom_data:	
 12471                           
 12472                           ;incstack = 0
 12473                           ; Regs used in _write_eeprom_data: [wreg]
 12474                           ;write_eeprom_data@ui8_adress stored from wreg
 12475  15C8  00AC               	movwf	write_eeprom_data@ui8_adress
 12476                           
 12477                           ;eeprom.c: 89: EEADRL = ui8_adress;
 12478  15C9  0023               	movlb	3	; select bank3
 12479  15CA  0091               	movwf	17	;volatile
 12480                           
 12481                           ;eeprom.c: 90: EEDATL = ui8_adress_data;
 12482  15CB  0020               	movlb	0	; select bank0
 12483  15CC  082B               	movf	write_eeprom_data@ui8_adress_data,w
 12484  15CD  0023               	movlb	3	; select bank3
 12485  15CE  0093               	movwf	19	;volatile
 12486                           
 12487                           ;eeprom.c: 91: CFGS = 0;
 12488  15CF  1315               	bcf	21,6	;volsfr
 12489                           
 12490                           ;eeprom.c: 92: EEPGD = 0;
 12491  15D0  1395               	bcf	21,7	;volsfr
 12492                           
 12493                           ;eeprom.c: 93: WREN = 1;
 12494  15D1  1515               	bsf	21,2	;volsfr
 12495                           
 12496                           ;eeprom.c: 95: GIE = 0;
 12497  15D2  138B               	bcf	11,7	;volatile
 12498                           
 12499                           ;eeprom.c: 96: EECON2 = 0x55;
 12500  15D3  3055               	movlw	85
 12501  15D4  0096               	movwf	22	;volsfr
 12502                           
 12503                           ;eeprom.c: 97: EECON2 = 0xAA;
 12504  15D5  30AA               	movlw	170
 12505  15D6  0096               	movwf	22	;volsfr
 12506                           
 12507                           ;eeprom.c: 98: WR = 1;
 12508  15D7  1495               	bsf	21,1	;volsfr
 12509                           
 12510                           ;eeprom.c: 99: GIE = 1;
 12511  15D8  178B               	bsf	11,7	;volatile
 12512                           
 12513                           ;eeprom.c: 100: WREN = 0;
 12514  15D9  1115               	bcf	21,2	;volsfr
 12515  15DA                     l751:	
 12516                           ;eeprom.c: 103: while( WR )
 12517                           
 12518  15DA  0023               	movlb	3	; select bank3
 12519  15DB  1895               	btfsc	21,1	;volsfr
 12520  15DC  2DDE               	goto	l752
 12521  15DD  0008               	return
 12522  15DE                     l752:	
 12523  15DE  0000               	nop	;# 
 12524  15DF  0000               	nop	;# 
 12525  15E0  2DDA               	goto	l751
 12526  15E1                     __end_of_write_eeprom_data:	
 12527  15E1                     __ptext34:	
 12528 ;; *************** function _Transmit_LIN_8Bytes *****************
 12529 ;; Defined at:
 12530 ;;		line 167 in file "../lin.c"
 12531 ;; Parameters:    Size  Location     Type
 12532 ;;  ID              1    wreg     unsigned char 
 12533 ;;  B0              1   15[BANK0 ] unsigned char 
 12534 ;;  B1              1   16[BANK0 ] unsigned char 
 12535 ;;  B2              1   17[BANK0 ] unsigned char 
 12536 ;;  B3              1   18[BANK0 ] unsigned char 
 12537 ;;  B4              1   19[BANK0 ] unsigned char 
 12538 ;;  B5              1   20[BANK0 ] unsigned char 
 12539 ;;  B6              1   21[BANK0 ] unsigned char 
 12540 ;;  B7              1   22[BANK0 ] unsigned char 
 12541 ;; Auto vars:     Size  Location     Type
 12542 ;;  ID              1   23[BANK0 ] unsigned char 
 12543 ;; Return value:  Size  Location     Type
 12544 ;;                  1    wreg      void 
 12545 ;; Registers used:
 12546 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12547 ;; Tracked objects:
 12548 ;;		On entry : 1F/0
 12549 ;;		On exit  : 1F/1
 12550 ;;		Unchanged: 0/0
 12551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12552 ;;      Params:         0       8       0       0       0       0       0       0
 12553 ;;      Locals:         0       1       0       0       0       0       0       0
 12554 ;;      Temps:          0       0       0       0       0       0       0       0
 12555 ;;      Totals:         0       9       0       0       0       0       0       0
 12556 ;;Total ram usage:        9 bytes
 12557 ;; Hardware stack levels used:    1
 12558 ;; Hardware stack levels required when called:    5
 12559 ;; This function calls:
 12560 ;;		__ELINMIntGetPointer
 12561 ;;		__ELINMIntSendMessage
 12562 ;; This function is called by:
 12563 ;;		_EOL
 12564 ;;		_NegativeAnswer
 12565 ;; This function uses a non-reentrant model
 12566 ;;
 12567                           
 12568                           
 12569                           ;psect for function _Transmit_LIN_8Bytes
 12570  15E1                     _Transmit_LIN_8Bytes:	
 12571                           
 12572                           ;incstack = 0
 12573                           ; Regs used in _Transmit_LIN_8Bytes: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12574                           ;Transmit_LIN_8Bytes@ID stored from wreg
 12575  15E1  00B7               	movwf	Transmit_LIN_8Bytes@ID
 12576  15E2                     l895:	
 12577                           ;lin.c: 179: {
 12578                           ;lin.c: 180: ;
 12579                           
 12580  15E2  1DE0               	btfss	__ELINMIntStatus,3
 12581  15E3  2DE2               	goto	l895
 12582                           
 12583                           ;lin.c: 181: }
 12584                           ;lin.c: 182: pt = _ELINMIntGetPointer ( 5, 2 );
 12585  15E4  3002               	movlw	2
 12586  15E5  00A4               	movwf	__ELINMIntGetPointer@_ELINMInt_position
 12587  15E6  3005               	movlw	5
 12588  15E7  2656  3190         	fcall	__ELINMIntGetPointer
 12589  15E9  00DF               	movwf	_pt
 12590                           
 12591                           ;lin.c: 183: *pt++ = B0;
 12592  15EA  0086               	movwf	6
 12593  15EB  3002               	movlw	2	; select bank4/5
 12594  15EC  0087               	movwf	7
 12595  15ED  082F               	movf	Transmit_LIN_8Bytes@B0,w
 12596  15EE  0081               	movwf	1
 12597  15EF  0ADF               	incf	_pt,f
 12598                           
 12599                           ;lin.c: 184: *pt++ = B1;
 12600  15F0  085F               	movf	_pt,w
 12601  15F1  0086               	movwf	6
 12602  15F2  0830               	movf	Transmit_LIN_8Bytes@B1,w
 12603  15F3  0081               	movwf	1
 12604  15F4  0ADF               	incf	_pt,f
 12605                           
 12606                           ;lin.c: 185: *pt++ = B2;
 12607  15F5  085F               	movf	_pt,w
 12608  15F6  0086               	movwf	6
 12609  15F7  0831               	movf	Transmit_LIN_8Bytes@B2,w
 12610  15F8  0081               	movwf	1
 12611  15F9  0ADF               	incf	_pt,f
 12612                           
 12613                           ;lin.c: 186: *pt++ = B3;
 12614  15FA  085F               	movf	_pt,w
 12615  15FB  0086               	movwf	6
 12616  15FC  0832               	movf	Transmit_LIN_8Bytes@B3,w
 12617  15FD  0081               	movwf	1
 12618  15FE  0ADF               	incf	_pt,f
 12619                           
 12620                           ;lin.c: 187: *pt++ = B4;
 12621  15FF  085F               	movf	_pt,w
 12622  1600  0086               	movwf	6
 12623  1601  0833               	movf	Transmit_LIN_8Bytes@B4,w
 12624  1602  0081               	movwf	1
 12625  1603  0ADF               	incf	_pt,f
 12626                           
 12627                           ;lin.c: 188: *pt++ = B5;
 12628  1604  085F               	movf	_pt,w
 12629  1605  0086               	movwf	6
 12630  1606  0834               	movf	Transmit_LIN_8Bytes@B5,w
 12631  1607  0081               	movwf	1
 12632  1608  0ADF               	incf	_pt,f
 12633                           
 12634                           ;lin.c: 189: *pt++ = B6;
 12635  1609  085F               	movf	_pt,w
 12636  160A  0086               	movwf	6
 12637  160B  0835               	movf	Transmit_LIN_8Bytes@B6,w
 12638  160C  0081               	movwf	1
 12639  160D  0ADF               	incf	_pt,f
 12640                           
 12641                           ;lin.c: 190: *pt++ = B7;
 12642  160E  085F               	movf	_pt,w
 12643  160F  0086               	movwf	6
 12644  1610  0836               	movf	Transmit_LIN_8Bytes@B7,w
 12645  1611  0081               	movwf	1
 12646  1612  3008               	movlw	8
 12647  1613  0ADF               	incf	_pt,f
 12648                           
 12649                           ;lin.c: 192: _ELINMIntSendMessage ( ID, 8, ( ( ( ( ( 8 + 3 ) * 15L ) + 44L ) * ( 100L * 
      +                          1000000L / 19200L ) / 128L ) / 100L ), ( ( ( ( ( ( ( ( 8 + 3 ) * 15L ) + 44L ) + 1L ) * 
      +                          14L ) / 10L ) * ( 100L * 1000000L / 19200L ) / 128L ) / 100L ) );
 12650  1614  00A5               	movwf	__ELINMIntSendMessage@_ELINM_size
 12651  1615  3055               	movlw	85
 12652  1616  00A6               	movwf	__ELINMIntSendMessage@_ELINM_fmin
 12653  1617  3077               	movlw	119
 12654  1618  01A7               	clrf	__ELINMIntSendMessage@_ELINM_fmin+1
 12655  1619  00A8               	movwf	__ELINMIntSendMessage@_ELINM_fmax
 12656  161A  01A9               	clrf	__ELINMIntSendMessage@_ELINM_fmax+1
 12657  161B  0837               	movf	Transmit_LIN_8Bytes@ID,w
 12658  161C  2775               	fcall	__ELINMIntSendMessage
 12659                           
 12660                           ;lin.c: 193: if( ( ErrorCode = ( _ELINMIntStatus.ELINMIntStatusByte & 0xF0 ) ))
 12661  161D  0860               	movf	__ELINMIntStatus,w
 12662  161E  0021               	movlb	1	; select bank1
 12663  161F  00CC               	movwf	_ErrorCode^(0+128)
 12664  1620  30F0               	movlw	240
 12665  1621  05CC               	andwf	_ErrorCode^(0+128),f
 12666  1622  0008               	return
 12667  1623                     __end_of_Transmit_LIN_8Bytes:	
 12668  1623                     __ptext39:	
 12669 ;; *************** function _ADC_Wait *****************
 12670 ;; Defined at:
 12671 ;;		line 128 in file "../adc.c"
 12672 ;; Parameters:    Size  Location     Type
 12673 ;;		None
 12674 ;; Auto vars:     Size  Location     Type
 12675 ;;		None
 12676 ;; Return value:  Size  Location     Type
 12677 ;;                  1    wreg      void 
 12678 ;; Registers used:
 12679 ;;		None
 12680 ;; Tracked objects:
 12681 ;;		On entry : 0/2
 12682 ;;		On exit  : 0/0
 12683 ;;		Unchanged: 0/0
 12684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12685 ;;      Params:         0       0       0       0       0       0       0       0
 12686 ;;      Locals:         0       0       0       0       0       0       0       0
 12687 ;;      Temps:          0       0       0       0       0       0       0       0
 12688 ;;      Totals:         0       0       0       0       0       0       0       0
 12689 ;;Total ram usage:        0 bytes
 12690 ;; Hardware stack levels used:    1
 12691 ;; Hardware stack levels required when called:    3
 12692 ;; This function calls:
 12693 ;;		Nothing
 12694 ;; This function is called by:
 12695 ;;		_FILTER_Init
 12696 ;;		_EOL
 12697 ;;		_I_calibrationInit
 12698 ;; This function uses a non-reentrant model
 12699 ;;
 12700                           
 12701                           
 12702                           ;psect for function _ADC_Wait
 12703  1623                     _ADC_Wait:	
 12704                           
 12705                           ;adc.c: 133: __nop();
 12706                           
 12707                           ;incstack = 0
 12708                           ; Regs used in _ADC_Wait: []
 12709  1623  0000               	nop
 12710                           
 12711                           ;adc.c: 134: __nop();
 12712  1624  0000               	nop
 12713                           
 12714                           ;adc.c: 135: __nop();
 12715  1625  0000               	nop
 12716                           
 12717                           ;adc.c: 136: __nop();
 12718  1626  0000               	nop
 12719                           
 12720                           ;adc.c: 137: __nop();
 12721  1627  0000               	nop
 12722                           
 12723                           ;adc.c: 138: __nop();
 12724  1628  0000               	nop
 12725                           
 12726                           ;adc.c: 139: __nop();
 12727  1629  0000               	nop
 12728                           
 12729                           ;adc.c: 140: __nop();
 12730  162A  0000               	nop
 12731                           
 12732                           ;adc.c: 142: __nop();
 12733  162B  0000               	nop
 12734                           
 12735                           ;adc.c: 143: __nop();
 12736  162C  0000               	nop
 12737                           
 12738                           ;adc.c: 144: __nop();
 12739  162D  0000               	nop
 12740                           
 12741                           ;adc.c: 145: __nop();
 12742  162E  0000               	nop
 12743                           
 12744                           ;adc.c: 146: __nop();
 12745  162F  0000               	nop
 12746                           
 12747                           ;adc.c: 147: __nop();
 12748  1630  0000               	nop
 12749                           
 12750                           ;adc.c: 148: __nop();
 12751  1631  0000               	nop
 12752                           
 12753                           ;adc.c: 149: __nop();
 12754  1632  0000               	nop
 12755                           
 12756                           ;adc.c: 151: __nop();
 12757  1633  0000               	nop
 12758                           
 12759                           ;adc.c: 152: __nop();
 12760  1634  0000               	nop
 12761                           
 12762                           ;adc.c: 153: __nop();
 12763  1635  0000               	nop
 12764                           
 12765                           ;adc.c: 154: __nop();
 12766  1636  0000               	nop
 12767                           
 12768                           ;adc.c: 155: __nop();
 12769  1637  0000               	nop
 12770                           
 12771                           ;adc.c: 156: __nop();
 12772  1638  0000               	nop
 12773                           
 12774                           ;adc.c: 157: __nop();
 12775  1639  0000               	nop
 12776                           
 12777                           ;adc.c: 158: __nop();
 12778  163A  0000               	nop
 12779  163B  0008               	return
 12780  163C                     __end_of_ADC_Wait:	
 12781  163C                     __ptext42:	
 12782 ;; *************** function ___wmul *****************
 12783 ;; Defined at:
 12784 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
 12785 ;; Parameters:    Size  Location     Type
 12786 ;;  multiplier      2    4[BANK0 ] unsigned int 
 12787 ;;  multiplicand    2    6[BANK0 ] unsigned int 
 12788 ;; Auto vars:     Size  Location     Type
 12789 ;;  product         2    8[BANK0 ] unsigned int 
 12790 ;; Return value:  Size  Location     Type
 12791 ;;                  2    4[BANK0 ] unsigned int 
 12792 ;; Registers used:
 12793 ;;		wreg, status,2, status,0
 12794 ;; Tracked objects:
 12795 ;;		On entry : 1F/0
 12796 ;;		On exit  : 1F/0
 12797 ;;		Unchanged: 0/0
 12798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12799 ;;      Params:         0       4       0       0       0       0       0       0
 12800 ;;      Locals:         0       2       0       0       0       0       0       0
 12801 ;;      Temps:          0       0       0       0       0       0       0       0
 12802 ;;      Totals:         0       6       0       0       0       0       0       0
 12803 ;;Total ram usage:        6 bytes
 12804 ;; Hardware stack levels used:    1
 12805 ;; Hardware stack levels required when called:    3
 12806 ;; This function calls:
 12807 ;;		Nothing
 12808 ;; This function is called by:
 12809 ;;		_EOL
 12810 ;;		_interrrupt_bldc
 12811 ;;		_main
 12812 ;;		_BVH2_Appl_Layer
 12813 ;; This function uses a non-reentrant model
 12814 ;;
 12815                           
 12816                           
 12817                           ;psect for function ___wmul
 12818  163C                     ___wmul:	
 12819                           
 12820                           ;incstack = 0
 12821                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 12822  163C  01A8               	clrf	___wmul@product
 12823  163D  01A9               	clrf	___wmul@product+1
 12824  163E                     l12446:	
 12825  163E  1C24               	btfss	___wmul@multiplier,0
 12826  163F  2E44               	goto	l12450
 12827  1640  0826               	movf	___wmul@multiplicand,w
 12828  1641  07A8               	addwf	___wmul@product,f
 12829  1642  0827               	movf	___wmul@multiplicand+1,w
 12830  1643  3DA9               	addwfc	___wmul@product+1,f
 12831  1644                     l12450:	
 12832  1644  35A6               	lslf	___wmul@multiplicand,f
 12833  1645  0DA7               	rlf	___wmul@multiplicand+1,f
 12834  1646  36A5               	lsrf	___wmul@multiplier+1,f
 12835  1647  0CA4               	rrf	___wmul@multiplier,f
 12836  1648  0824               	movf	___wmul@multiplier,w
 12837  1649  0425               	iorwf	___wmul@multiplier+1,w
 12838  164A  1D03               	btfss	3,2
 12839  164B  2E3E               	goto	l12446
 12840  164C  0829               	movf	___wmul@product+1,w
 12841  164D  00A5               	movwf	?___wmul+1
 12842  164E  0828               	movf	___wmul@product,w
 12843  164F  00A4               	movwf	?___wmul
 12844  1650  0008               	return
 12845  1651                     __end_of___wmul:	
 12846  1651                     __ptext29:	
 12847 ;; *************** function _PWM_Write_Out *****************
 12848 ;; Defined at:
 12849 ;;		line 340 in file "../pwm.c"
 12850 ;; Parameters:    Size  Location     Type
 12851 ;;  ui8_DutyCycl    1    wreg     unsigned char 
 12852 ;; Auto vars:     Size  Location     Type
 12853 ;;  ui8_DutyCycl    1    4[BANK0 ] unsigned char 
 12854 ;; Return value:  Size  Location     Type
 12855 ;;                  1    wreg      void 
 12856 ;; Registers used:
 12857 ;;		wreg
 12858 ;; Tracked objects:
 12859 ;;		On entry : 1C/0
 12860 ;;		On exit  : 1F/2
 12861 ;;		Unchanged: 0/0
 12862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12863 ;;      Params:         0       0       0       0       0       0       0       0
 12864 ;;      Locals:         0       1       0       0       0       0       0       0
 12865 ;;      Temps:          0       0       0       0       0       0       0       0
 12866 ;;      Totals:         0       1       0       0       0       0       0       0
 12867 ;;Total ram usage:        1 bytes
 12868 ;; Hardware stack levels used:    1
 12869 ;; Hardware stack levels required when called:    3
 12870 ;; This function calls:
 12871 ;;		Nothing
 12872 ;; This function is called by:
 12873 ;;		_DiagInit
 12874 ;;		_SetDiagAlarm
 12875 ;;		_EOL
 12876 ;; This function uses a non-reentrant model
 12877 ;;
 12878                           
 12879                           
 12880                           ;psect for function _PWM_Write_Out
 12881  1651                     _PWM_Write_Out:	
 12882                           
 12883                           ;incstack = 0
 12884                           ; Regs used in _PWM_Write_Out: [wreg]
 12885                           ;PWM_Write_Out@ui8_DutyCycle_Out stored from wreg
 12886  1651  0020               	movlb	0	; select bank0
 12887  1652  00A4               	movwf	PWM_Write_Out@ui8_DutyCycle_Out
 12888                           
 12889                           ;pwm.c: 344: ui8_PWMoutvalue = ui8_DutyCycle_Out;
 12890  1653  0022               	movlb	2	; select bank2
 12891  1654  00D5               	movwf	_ui8_PWMoutvalue^(0+256)
 12892  1655  0008               	return
 12893  1656                     __end_of_PWM_Write_Out:	
 12894  1656                     __ptext37:	
 12895 ;; *************** function __ELINMIntGetPointer *****************
 12896 ;; Defined at:
 12897 ;;		line 1375 in file "../lin.c"
 12898 ;; Parameters:    Size  Location     Type
 12899 ;;  _ELINMInt_ta    1    wreg     unsigned char 
 12900 ;;  _ELINMInt_po    1    4[BANK0 ] unsigned char 
 12901 ;; Auto vars:     Size  Location     Type
 12902 ;;  _ELINMInt_ta    1    5[BANK0 ] unsigned char 
 12903 ;; Return value:  Size  Location     Type
 12904 ;;                  1    wreg      PTR unsigned char 
 12905 ;; Registers used:
 12906 ;;		wreg, status,2, status,0
 12907 ;; Tracked objects:
 12908 ;;		On entry : 1F/0
 12909 ;;		On exit  : 1F/0
 12910 ;;		Unchanged: 0/0
 12911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12912 ;;      Params:         0       1       0       0       0       0       0       0
 12913 ;;      Locals:         0       1       0       0       0       0       0       0
 12914 ;;      Temps:          0       0       0       0       0       0       0       0
 12915 ;;      Totals:         0       2       0       0       0       0       0       0
 12916 ;;Total ram usage:        2 bytes
 12917 ;; Hardware stack levels used:    1
 12918 ;; Hardware stack levels required when called:    3
 12919 ;; This function calls:
 12920 ;;		Nothing
 12921 ;; This function is called by:
 12922 ;;		_Transmit_LIN_8Bytes
 12923 ;;		_Receive_Diag
 12924 ;; This function uses a non-reentrant model
 12925 ;;
 12926                           
 12927                           
 12928                           ;psect for function __ELINMIntGetPointer
 12929  1656                     __ELINMIntGetPointer:	
 12930                           
 12931                           ;lin.c: 1382: return ( ( BYTE * )& _ELINMIntMessageBuffer[ _ELINMInt_position ] );
 12932                           
 12933                           ;incstack = 0
 12934                           ; Regs used in __ELINMIntGetPointer: [wreg+status,2+status,0]
 12935  1656  0824               	movf	__ELINMIntGetPointer@_ELINMInt_position,w
 12936  1657  3E50               	addlw	(low (__ELINMIntMessageBuffer| (0+512)))& (0+255)
 12937  1658  0008               	return
 12938  1659                     __end_of__ELINMIntGetPointer:	
 12939  1659                     PL2:	
 12940  1659  00AF               	movwf	Transmit_LIN_8Bytes@B0
 12941  165A  0862               	movf	_ui8_b_DResLocID_c,w
 12942  165B  00B0               	movwf	Transmit_LIN_8Bytes@B1
 12943  165C  0850               	movf	EOL@ui8_b_DResB0_RD,w
 12944  165D  00B1               	movwf	Transmit_LIN_8Bytes@B2
 12945  165E  0851               	movf	EOL@ui8_b_DResB1_RD,w
 12946  165F  00B2               	movwf	Transmit_LIN_8Bytes@B3
 12947  1660  0852               	movf	EOL@ui8_b_DResB2_RD,w
 12948  1661  00B3               	movwf	Transmit_LIN_8Bytes@B4
 12949  1662  0853               	movf	EOL@ui8_b_DResB3_RD,w
 12950  1663  00B4               	movwf	Transmit_LIN_8Bytes@B5
 12951  1664  084F               	movf	EOL@ui8_b_DResB4_RD,w
 12952  1665  00B5               	movwf	Transmit_LIN_8Bytes@B6
 12953  1666  084E               	movf	EOL@ui8_b_DResB5_RD,w
 12954  1667  00B6               	movwf	Transmit_LIN_8Bytes@B7
 12955  1668  3410               	retlw	16
 12956  1669                     __end_ofPL2:	
 12957  1669                     PL4:	
 12958  1669  0862               	movf	_ui8_b_DResLocID_c,w
 12959  166A  00B0               	movwf	Transmit_LIN_8Bytes@B1
 12960  166B  0850               	movf	EOL@ui8_b_DResB0_RD,w
 12961  166C  00B1               	movwf	Transmit_LIN_8Bytes@B2
 12962  166D  0851               	movf	EOL@ui8_b_DResB1_RD,w
 12963  166E  00B2               	movwf	Transmit_LIN_8Bytes@B3
 12964  166F  0852               	movf	EOL@ui8_b_DResB2_RD,w
 12965  1670  00B3               	movwf	Transmit_LIN_8Bytes@B4
 12966  1671  0853               	movf	EOL@ui8_b_DResB3_RD,w
 12967  1672  00B4               	movwf	Transmit_LIN_8Bytes@B5
 12968  1673  084F               	movf	EOL@ui8_b_DResB4_RD,w
 12969  1674  00B5               	movwf	Transmit_LIN_8Bytes@B6
 12970  1675  084E               	movf	EOL@ui8_b_DResB5_RD,w
 12971  1676  0008               	return
 12972  1677                     __end_ofPL4:	
 12973  1677                     PL6:	
 12974  1677  0824               	movf	?___wmul,w
 12975  1678  00B9               	movwf	??_EOL
 12976  1679  0825               	movf	?___wmul+1,w
 12977  167A  00BA               	movwf	??_EOL+1
 12978  167B  36BA               	lsrf	??_EOL+1,f
 12979  167C  0CB9               	rrf	??_EOL,f
 12980  167D  36BA               	lsrf	??_EOL+1,f
 12981  167E  0CB9               	rrf	??_EOL,f
 12982  167F  0839               	movf	??_EOL,w
 12983  1680  00D2               	movwf	EOL@ui8_b_DResB2_RD
 12984  1681  0851               	movf	EOL@ui8_b_DResB1_RD,w
 12985  1682  3E00               	addlw	low (_PWM_trans_table| (0+32768))
 12986  1683  0084               	movwf	4
 12987  1684  3098               	movlw	high (_PWM_trans_table| (0+32768))
 12988  1685  1803               	skipnc
 12989  1686  3E01               	addlw	1
 12990  1687  0085               	movwf	5
 12991  1688  0800               	movf	0,w	;code access
 12992  1689  00D3               	movwf	EOL@ui8_b_DResB3_RD
 12993  168A  01CF               	clrf	EOL@ui8_b_DResB4_RD
 12994  168B  01CE               	clrf	EOL@ui8_b_DResB5_RD
 12995  168C  3E03               	addlw	3
 12996  168D  00B9               	movwf	??_EOL
 12997  168E  3000               	movlw	0
 12998  168F  1803               	skipnc
 12999  1690  3001               	movlw	1
 13000  1691  00BA               	movwf	??_EOL+1
 13001  1692  3A80               	xorlw	128
 13002  1693  3C80               	sublw	128
 13003  1694  1D03               	skipz
 13004  1695  0008               	return
 13005  1696  0839               	movf	??_EOL,w
 13006  1697  0252               	subwf	EOL@ui8_b_DResB2_RD,w
 13007  1698  0008               	return
 13008  1699                     __end_ofPL6:	
 13009  1699                     PL10:	
 13010  1699  0020               	movlb	0	; select bank0
 13011  169A  0853               	movf	EOL@ui8_b_DResB3_RD,w
 13012  169B  3EFD               	addlw	253
 13013  169C  00B9               	movwf	??_EOL
 13014  169D  30FF               	movlw	255
 13015  169E  1803               	skipnc
 13016  169F  3000               	movlw	0
 13017  16A0  00BA               	movwf	??_EOL+1
 13018  16A1  3A80               	xorlw	128
 13019  16A2  00BB               	movwf	??_EOL+2
 13020  16A3  3080               	movlw	128
 13021  16A4  023B               	subwf	??_EOL+2,w
 13022  16A5  1D03               	skipz
 13023  16A6  0008               	return
 13024  16A7  0852               	movf	EOL@ui8_b_DResB2_RD,w
 13025  16A8  0239               	subwf	??_EOL,w
 13026  16A9  0008               	return
 13027  16AA                     __end_ofPL10:	
 13028  16AA                     PL12:	
 13029  16AA  0020               	movlb	0	; select bank0
 13030  16AB  00CF               	movwf	EOL@ui8_b_DResB4_RD
 13031  16AC  303A               	movlw	58
 13032  16AD  01CE               	clrf	EOL@ui8_b_DResB5_RD
 13033  16AE  0008               	return
 13034  16AF                     __end_ofPL12:	
 13035  16AF                     PL14:	
 13036  16AF  3689               	lsrf	9,f
 13037  16B0  0020               	movlb	0	; select bank0
 13038  16B1  00D1               	movwf	EOL@ui8_b_DResB1_RD
 13039  16B2  0021               	movlb	1	; select bank1
 13040  16B3  0833               	movf	(_ui16_speed_fil+1)^(0+128),w
 13041  16B4  0020               	movlb	0	; select bank0
 13042  16B5  00A5               	movwf	___wmul@multiplier+1
 13043  16B6  0021               	movlb	1	; select bank1
 13044  16B7  0832               	movf	_ui16_speed_fil^(0+128),w
 13045  16B8  0020               	movlb	0	; select bank0
 13046  16B9  00A4               	movwf	___wmul@multiplier
 13047  16BA  3005               	movlw	5
 13048  16BB  00A6               	movwf	___wmul@multiplicand
 13049  16BC  01A7               	clrf	___wmul@multiplicand+1
 13050  16BD  0008               	return
 13051  16BE                     __end_ofPL14:	
 13052  16BE                     PL16:	
 13053  16BE  307F               	movlw	127
 13054  16BF  0020               	movlb	0	; select bank0
 13055  16C0  00AF               	movwf	Transmit_LIN_8Bytes@B0
 13056  16C1  0862               	movf	_ui8_b_DResLocID_c,w
 13057  16C2  00B0               	movwf	Transmit_LIN_8Bytes@B1
 13058  16C3  0861               	movf	_ui8_b_DResB0_c,w
 13059  16C4  00B1               	movwf	Transmit_LIN_8Bytes@B2
 13060  16C5  30FF               	movlw	255
 13061  16C6  00B2               	movwf	Transmit_LIN_8Bytes@B3
 13062  16C7  00B3               	movwf	Transmit_LIN_8Bytes@B4
 13063  16C8  00B4               	movwf	Transmit_LIN_8Bytes@B5
 13064  16C9  00B5               	movwf	Transmit_LIN_8Bytes@B6
 13065  16CA  00B6               	movwf	Transmit_LIN_8Bytes@B7
 13066  16CB  3410               	retlw	16
 13067  16CC                     __end_ofPL16:	
 13068  16CC                     PL22:	
 13069  16CC  00B0               	movwf	Transmit_LIN_8Bytes@B1
 13070  16CD  30FF               	movlw	255
 13071  16CE  00B1               	movwf	Transmit_LIN_8Bytes@B2
 13072  16CF  00B2               	movwf	Transmit_LIN_8Bytes@B3
 13073  16D0  00B3               	movwf	Transmit_LIN_8Bytes@B4
 13074  16D1  00B4               	movwf	Transmit_LIN_8Bytes@B5
 13075  16D2  00B5               	movwf	Transmit_LIN_8Bytes@B6
 13076  16D3  0008               	return
 13077  16D4                     __end_ofPL22:	
 13078  16D4                     PL52:	
 13079  16D4  0022               	movlb	2	; select bank2
 13080  16D5  0865               	movf	(_ui16_IPhase2_bldc_cal+1)^(0+256),w
 13081  16D6  0020               	movlb	0	; select bank0
 13082  16D7  00A5               	movwf	___lwdiv@divisor+1
 13083  16D8  0022               	movlb	2	; select bank2
 13084  16D9  0864               	movf	_ui16_IPhase2_bldc_cal^(0+256),w
 13085  16DA  0020               	movlb	0	; select bank0
 13086  16DB  00A4               	movwf	___lwdiv@divisor
 13087  16DC  3078               	movlw	120
 13088  16DD  01A6               	clrf	___lwdiv@dividend
 13089  16DE  00A7               	movwf	___lwdiv@dividend+1
 13090  16DF  0008               	return
 13091  16E0                     __end_ofPL52:	
 13092  16E0                     PL56:	
 13093  16E0  0020               	movlb	0	; select bank0
 13094  16E1  00A4               	movwf	___lwdiv@divisor
 13095  16E2  3078               	movlw	120
 13096  16E3  01A6               	clrf	___lwdiv@dividend
 13097  16E4  00A7               	movwf	___lwdiv@dividend+1
 13098  16E5  0008               	return
 13099  16E6                     __end_ofPL56:	
 13100  16E6                     PL58:	
 13101  16E6  0022               	movlb	2	; select bank2
 13102  16E7  0867               	movf	(_ui16_IPhase1_bldc_cal+1)^(0+256),w
 13103  16E8  0020               	movlb	0	; select bank0
 13104  16E9  00A5               	movwf	___lwdiv@divisor+1
 13105  16EA  0022               	movlb	2	; select bank2
 13106  16EB  0866               	movf	_ui16_IPhase1_bldc_cal^(0+256),w
 13107  16EC  0008               	return
 13108  16ED                     __end_ofPL58:	
 13109  16ED                     PL60:	
 13110  16ED  0022               	movlb	2	; select bank2
 13111  16EE  0863               	movf	(_ui16_IPhase3_bldc_cal+1)^(0+256),w
 13112  16EF  0020               	movlb	0	; select bank0
 13113  16F0  00A5               	movwf	___lwdiv@divisor+1
 13114  16F1  0022               	movlb	2	; select bank2
 13115  16F2  0862               	movf	_ui16_IPhase3_bldc_cal^(0+256),w
 13116  16F3  0008               	return
 13117  16F4                     __end_ofPL60:	
 13118  16F4                     PL76:	
 13119  16F4  00B0               	movwf	Transmit_LIN_8Bytes@B1
 13120  16F5  3010               	movlw	16
 13121  16F6  01B1               	clrf	Transmit_LIN_8Bytes@B2
 13122  16F7  01B2               	clrf	Transmit_LIN_8Bytes@B3
 13123  16F8  01B3               	clrf	Transmit_LIN_8Bytes@B4
 13124  16F9  01B4               	clrf	Transmit_LIN_8Bytes@B5
 13125  16FA  01B5               	clrf	Transmit_LIN_8Bytes@B6
 13126  16FB  01B6               	clrf	Transmit_LIN_8Bytes@B7
 13127  16FC  0008               	return
 13128  16FD                     __end_ofPL76:	
 13129  16FD                     PL82:	
 13130  16FD  1065               	bcf	_ui8_error_Flags,0
 13131  16FE  10E5               	bcf	_ui8_error_Flags,1
 13132  16FF  13E5               	bcf	_ui8_error_Flags,7
 13133  1700  1165               	bcf	_ui8_error_Flags,2
 13134  1701  11E5               	bcf	_ui8_error_Flags,3
 13135  1702  1265               	bcf	_ui8_error_Flags,4
 13136  1703  1365               	bcf	_ui8_error_Flags,6
 13137  1704  0008               	return
 13138  1705                     __end_ofPL82:	
 13139  1705                     PL88:	
 13140  1705  0853               	movf	_phaseCal^(0+128),w
 13141  1706  0020               	movlb	0	; select bank0
 13142  1707  00D0               	movwf	EOL@ui8_b_DResB0_RD
 13143  1708  01D1               	clrf	EOL@ui8_b_DResB1_RD
 13144  1709  0022               	movlb	2	; select bank2
 13145  170A  0008               	return
 13146  170B                     __end_ofPL88:	
 13147  170B                     PL110:	
 13148  170B  0021               	movlb	1	; select bank1
 13149  170C  086E               	movf	_wkpoint^(0+128),w
 13150  170D  0020               	movlb	0	; select bank0
 13151  170E  0661               	xorwf	_ui8_b_DResB0_c,w
 13152  170F  0008               	return
 13153  1710                     __end_ofPL110:	
 13154  1710                     __ptext28:	
 13155 ;; *************** function ___lwdiv *****************
 13156 ;; Defined at:
 13157 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
 13158 ;; Parameters:    Size  Location     Type
 13159 ;;  divisor         2    4[BANK0 ] unsigned int 
 13160 ;;  dividend        2    6[BANK0 ] unsigned int 
 13161 ;; Auto vars:     Size  Location     Type
 13162 ;;  quotient        2    9[BANK0 ] unsigned int 
 13163 ;;  counter         1    8[BANK0 ] unsigned char 
 13164 ;; Return value:  Size  Location     Type
 13165 ;;                  2    4[BANK0 ] unsigned int 
 13166 ;; Registers used:
 13167 ;;		wreg, status,2, status,0
 13168 ;; Tracked objects:
 13169 ;;		On entry : 1F/0
 13170 ;;		On exit  : 1F/0
 13171 ;;		Unchanged: 0/0
 13172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13173 ;;      Params:         0       4       0       0       0       0       0       0
 13174 ;;      Locals:         0       3       0       0       0       0       0       0
 13175 ;;      Temps:          0       0       0       0       0       0       0       0
 13176 ;;      Totals:         0       7       0       0       0       0       0       0
 13177 ;;Total ram usage:        7 bytes
 13178 ;; Hardware stack levels used:    1
 13179 ;; Hardware stack levels required when called:    3
 13180 ;; This function calls:
 13181 ;;		Nothing
 13182 ;; This function is called by:
 13183 ;;		_EOL
 13184 ;;		_interrrupt_bldc
 13185 ;; This function uses a non-reentrant model
 13186 ;;
 13187                           
 13188                           
 13189                           ;psect for function ___lwdiv
 13190  1710                     ___lwdiv:	
 13191                           
 13192                           ;incstack = 0
 13193                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 13194  1710  01A9               	clrf	___lwdiv@quotient
 13195  1711  01AA               	clrf	___lwdiv@quotient+1
 13196  1712  0824               	movf	___lwdiv@divisor,w
 13197  1713  0425               	iorwf	___lwdiv@divisor+1,w
 13198  1714  1903               	btfsc	3,2
 13199  1715  2F30               	goto	l12482
 13200  1716  01A8               	clrf	___lwdiv@counter
 13201  1717                     L16:	
 13202  1717  0AA8               	incf	___lwdiv@counter,f
 13203  1718  1BA5               	btfsc	___lwdiv@divisor+1,7
 13204  1719  2F1D               	goto	l12470
 13205  171A  35A4               	lslf	___lwdiv@divisor,f
 13206  171B  0DA5               	rlf	___lwdiv@divisor+1,f
 13207  171C  2F17               	goto	L16
 13208  171D                     l12470:	
 13209  171D  35A9               	lslf	___lwdiv@quotient,f
 13210  171E  0DAA               	rlf	___lwdiv@quotient+1,f
 13211  171F  0825               	movf	___lwdiv@divisor+1,w
 13212  1720  0227               	subwf	___lwdiv@dividend+1,w
 13213  1721  1D03               	skipz
 13214  1722  2F25               	goto	u10685
 13215  1723  0824               	movf	___lwdiv@divisor,w
 13216  1724  0226               	subwf	___lwdiv@dividend,w
 13217  1725                     u10685:	
 13218  1725  1C03               	skipc
 13219  1726  2F2C               	goto	l12478
 13220  1727  0824               	movf	___lwdiv@divisor,w
 13221  1728  02A6               	subwf	___lwdiv@dividend,f
 13222  1729  0825               	movf	___lwdiv@divisor+1,w
 13223  172A  3BA7               	subwfb	___lwdiv@dividend+1,f
 13224  172B  1429               	bsf	___lwdiv@quotient,0
 13225  172C                     l12478:	
 13226  172C  36A5               	lsrf	___lwdiv@divisor+1,f
 13227  172D  0CA4               	rrf	___lwdiv@divisor,f
 13228  172E  0BA8               	decfsz	___lwdiv@counter,f
 13229  172F  2F1D               	goto	l12470
 13230  1730                     l12482:	
 13231  1730  082A               	movf	___lwdiv@quotient+1,w
 13232  1731  00A5               	movwf	?___lwdiv+1
 13233  1732  0829               	movf	___lwdiv@quotient,w
 13234  1733  00A4               	movwf	?___lwdiv
 13235  1734  0008               	return
 13236  1735                     __end_of___lwdiv:	
 13237  1735                     __ptext33:	
 13238 ;; *************** function _NegativeAnswer *****************
 13239 ;; Defined at:
 13240 ;;		line 2436 in file "../diag.c"
 13241 ;; Parameters:    Size  Location     Type
 13242 ;;  LID             1    wreg     unsigned char 
 13243 ;; Auto vars:     Size  Location     Type
 13244 ;;  LID             1   24[BANK0 ] unsigned char 
 13245 ;; Return value:  Size  Location     Type
 13246 ;;                  1    wreg      void 
 13247 ;; Registers used:
 13248 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13249 ;; Tracked objects:
 13250 ;;		On entry : 1D/2
 13251 ;;		On exit  : 1F/1
 13252 ;;		Unchanged: 0/0
 13253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13254 ;;      Params:         0       0       0       0       0       0       0       0
 13255 ;;      Locals:         0       1       0       0       0       0       0       0
 13256 ;;      Temps:          0       0       0       0       0       0       0       0
 13257 ;;      Totals:         0       1       0       0       0       0       0       0
 13258 ;;Total ram usage:        1 bytes
 13259 ;; Hardware stack levels used:    1
 13260 ;; Hardware stack levels required when called:    6
 13261 ;; This function calls:
 13262 ;;		_Transmit_LIN_8Bytes
 13263 ;; This function is called by:
 13264 ;;		_EOL
 13265 ;; This function uses a non-reentrant model
 13266 ;;
 13267                           
 13268                           
 13269                           ;psect for function _NegativeAnswer
 13270  1735                     _NegativeAnswer:	
 13271                           
 13272                           ;incstack = 0
 13273                           ; Regs used in _NegativeAnswer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13274                           ;NegativeAnswer@LID stored from wreg
 13275  1735  0020               	movlb	0	; select bank0
 13276  1736  00B8               	movwf	NegativeAnswer@LID
 13277                           
 13278                           ;diag.c: 2440: ui8_b_DResB0_c = 0xFF;
 13279  1737  30FF               	movlw	255
 13280  1738  00E1               	movwf	_ui8_b_DResB0_c
 13281                           
 13282                           ;diag.c: 2441: ui8_b_DResB1_c = 0xFF;
 13283  1739  0021               	movlb	1	; select bank1
 13284  173A  00D7               	movwf	_ui8_b_DResB1_c^(0+128)
 13285                           
 13286                           ;diag.c: 2442: ui8_b_DResB2_c = 0xFF;
 13287  173B  00D6               	movwf	_ui8_b_DResB2_c^(0+128)
 13288                           
 13289                           ;diag.c: 2443: ui8_b_DResB3_c = 0xFF;
 13290  173C  00D5               	movwf	_ui8_b_DResB3_c^(0+128)
 13291                           
 13292                           ;diag.c: 2445: ui8_b_DResB5_c = 0xFF;
 13293  173D  00D4               	movwf	_ui8_b_DResB4_c^(0+128)
 13294                           
 13295                           ;diag.c: 2447: Transmit_LIN_8Bytes( 0x10, 0x7F, LID, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
      +                          );
 13296  173E  307F               	movlw	127
 13297  173F  0020               	movlb	0	; select bank0
 13298  1740  00AF               	movwf	Transmit_LIN_8Bytes@B0
 13299  1741  0838               	movf	NegativeAnswer@LID,w
 13300  1742  26CC  3190         	fcall	PL22	;call to abstracted procedure
 13301  1744  00B6               	movwf	Transmit_LIN_8Bytes@B7
 13302  1745  3010               	movlw	16
 13303  1746  2DE1               	ljmp	_Transmit_LIN_8Bytes
 13304  1747                     __end_of_NegativeAnswer:	
 13305  1747                     __ptext27:	
 13306 ;; *************** function _cksum *****************
 13307 ;; Defined at:
 13308 ;;		line 6 in file "../cksum.c"
 13309 ;; Parameters:    Size  Location     Type
 13310 ;;		None
 13311 ;; Auto vars:     Size  Location     Type
 13312 ;;  addr            2   10[BANK0 ] unsigned short 
 13313 ;;  sum             2    8[BANK0 ] unsigned int 
 13314 ;;  counter         2    6[BANK0 ] unsigned int 
 13315 ;; Return value:  Size  Location     Type
 13316 ;;                  2    4[BANK0 ] unsigned int 
 13317 ;; Registers used:
 13318 ;;		wreg, status,2, status,0
 13319 ;; Tracked objects:
 13320 ;;		On entry : 1F/0
 13321 ;;		On exit  : 1F/0
 13322 ;;		Unchanged: 0/0
 13323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13324 ;;      Params:         0       2       0       0       0       0       0       0
 13325 ;;      Locals:         0       6       0       0       0       0       0       0
 13326 ;;      Temps:          0       0       0       0       0       0       0       0
 13327 ;;      Totals:         0       8       0       0       0       0       0       0
 13328 ;;Total ram usage:        8 bytes
 13329 ;; Hardware stack levels used:    1
 13330 ;; Hardware stack levels required when called:    3
 13331 ;; This function calls:
 13332 ;;		Nothing
 13333 ;; This function is called by:
 13334 ;;		_EOL
 13335 ;; This function uses a non-reentrant model
 13336 ;;
 13337                           
 13338                           
 13339                           ;psect for function _cksum
 13340  1747                     _cksum:	
 13341  1747  30FE               	movlw	254
 13342                           
 13343                           ;cksum.c: 7: unsigned int sum;
 13344                           ;cksum.c: 8: unsigned short addr;
 13345                           ;cksum.c: 9: unsigned int counter;
 13346                           ;cksum.c: 11: addr = 0L;
 13347                           
 13348                           ;incstack = 0
 13349                           ; Regs used in _cksum: [wreg+status,2+status,0]
 13350  1748  01AA               	clrf	cksum@addr
 13351  1749  01AB               	clrf	cksum@addr+1
 13352                           
 13353                           ;cksum.c: 12: sum = 0;
 13354  174A  01A8               	clrf	cksum@sum
 13355  174B  01A9               	clrf	cksum@sum+1
 13356                           
 13357                           ;cksum.c: 13: counter = ( (8192 - 2 - 1) - 0L + 1 );
 13358  174C  00A6               	movwf	cksum@counter
 13359  174D  301F               	movlw	31
 13360  174E  00A7               	movwf	cksum@counter+1
 13361  174F                     l1975:	
 13362                           ;cksum.c: 15: while(counter--){
 13363                           
 13364  174F  3001               	movlw	1
 13365  1750  02A6               	subwf	cksum@counter,f
 13366  1751  3000               	movlw	0
 13367  1752  3BA7               	subwfb	cksum@counter+1,f
 13368  1753  0F26               	incfsz	cksum@counter,w
 13369  1754  2F58               	goto	l12302
 13370  1755  0A27               	incf	cksum@counter+1,w
 13371  1756  1903               	btfsc	3,2
 13372  1757  2F70               	goto	l12316
 13373  1758                     l12302:	
 13374                           
 13375                           ;cksum.c: 22: sum += (EEADRL=(addr)&0xff, EEADRH=(addr)>>8, WREN=0, EECON1 |= 0x80, RD=1
      +                          , __nop(), __nop(), (EEDATH << 8) | EEDATA);
 13376  1758  082A               	movf	cksum@addr,w
 13377  1759  0023               	movlb	3	; select bank3
 13378  175A  0091               	movwf	17	;volatile
 13379  175B  0020               	movlb	0	; select bank0
 13380  175C  082B               	movf	cksum@addr+1,w
 13381  175D  0023               	movlb	3	; select bank3
 13382  175E  0092               	movwf	18	;volatile
 13383  175F  1115               	bcf	21,2	;volsfr
 13384  1760  1795               	bsf	21,7	;volsfr
 13385  1761  1415               	bsf	21,0	;volsfr
 13386  1762  0000               	nop
 13387  1763  0000               	nop
 13388  1764  0023               	movlb	3	; select bank3
 13389  1765  0813               	movf	19,w	;volatile
 13390  1766  0020               	movlb	0	; select bank0
 13391  1767  07A8               	addwf	cksum@sum,f
 13392  1768  0023               	movlb	3	; select bank3
 13393  1769  0814               	movf	20,w	;volatile
 13394  176A  0020               	movlb	0	; select bank0
 13395  176B  3DA9               	addwfc	cksum@sum+1,f
 13396                           
 13397                           ;cksum.c: 31: addr++;
 13398  176C  0AAA               	incf	cksum@addr,f
 13399  176D  1903               	skipnz
 13400  176E  0AAB               	incf	cksum@addr+1,f
 13401  176F  2F4F               	goto	l1975
 13402  1770                     l12316:	
 13403                           
 13404                           ;cksum.c: 32: }
 13405                           ;cksum.c: 33: return sum;
 13406  1770  0829               	movf	cksum@sum+1,w
 13407  1771  00A5               	movwf	?_cksum+1
 13408  1772  0828               	movf	cksum@sum,w
 13409  1773  00A4               	movwf	?_cksum
 13410  1774  0008               	return
 13411  1775                     __end_of_cksum:	
 13412  1775                     __ptext35:	
 13413 ;; *************** function __ELINMIntSendMessage *****************
 13414 ;; Defined at:
 13415 ;;		line 1178 in file "../lin.c"
 13416 ;; Parameters:    Size  Location     Type
 13417 ;;  _ELINM_idr      1    wreg     unsigned char 
 13418 ;;  _ELINM_size     1    5[BANK0 ] unsigned char 
 13419 ;;  _ELINM_fmin     2    6[BANK0 ] unsigned int 
 13420 ;;  _ELINM_fmax     2    8[BANK0 ] unsigned int 
 13421 ;; Auto vars:     Size  Location     Type
 13422 ;;  _ELINM_idr      1   10[BANK0 ] unsigned char 
 13423 ;;  _ELINM_chk      2   13[BANK0 ] unsigned int 
 13424 ;;  _ELINM_i        1   12[BANK0 ] unsigned char 
 13425 ;;  _ELINM_tid      1   11[BANK0 ] struct ELINMINT_ID
 13426 ;; Return value:  Size  Location     Type
 13427 ;;                  1    wreg      void 
 13428 ;; Registers used:
 13429 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13430 ;; Tracked objects:
 13431 ;;		On entry : 1F/0
 13432 ;;		On exit  : 1F/0
 13433 ;;		Unchanged: 0/0
 13434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13435 ;;      Params:         0       5       0       0       0       0       0       0
 13436 ;;      Locals:         0       5       0       0       0       0       0       0
 13437 ;;      Temps:          0       0       0       0       0       0       0       0
 13438 ;;      Totals:         0      10       0       0       0       0       0       0
 13439 ;;Total ram usage:       10 bytes
 13440 ;; Hardware stack levels used:    1
 13441 ;; Hardware stack levels required when called:    4
 13442 ;; This function calls:
 13443 ;;		__ELINMIntCalcIDParity
 13444 ;; This function is called by:
 13445 ;;		_Transmit_LIN_8Bytes
 13446 ;;		__ELINMIntReceiveMessage
 13447 ;; This function uses a non-reentrant model
 13448 ;;
 13449                           
 13450                           
 13451                           ;psect for function __ELINMIntSendMessage
 13452  1775                     __ELINMIntSendMessage:	
 13453                           
 13454                           ;incstack = 0
 13455                           ; Regs used in __ELINMIntSendMessage: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13456                           ;__ELINMIntSendMessage@_ELINM_idr stored from wreg
 13457  1775  00AA               	movwf	__ELINMIntSendMessage@_ELINM_idr
 13458                           
 13459                           ;lin.c: 1186: char _ELINM_i;
 13460                           ;lin.c: 1187: ELINMINT_ID _ELINM_tid;
 13461                           ;lin.c: 1188: unsigned int _ELINM_chk;
 13462                           ;lin.c: 1191: _ELINM_tid.ID = _ELINM_idr;
 13463  1776  00AB               	movwf	__ELINMIntSendMessage@_ELINM_tid
 13464                           
 13465                           ;lin.c: 1192: _ELINMIntStatus.ELINMIntStatusByte &= 0x0F;
 13466  1777  300F               	movlw	15
 13467  1778  05E0               	andwf	__ELINMIntStatus,f
 13468                           
 13469                           ;lin.c: 1194: _ELINMIntTHeaderMin = ( 34L * ( 100L * 1000000L / 19200L ) / 128L ) / 100;
 13470  1779  300D               	movlw	13
 13471  177A  0022               	movlb	2	; select bank2
 13472  177B  00AB               	movwf	__ELINMIntTHeaderMin^(0+256)
 13473  177C  3013               	movlw	19
 13474  177D  01AC               	clrf	(__ELINMIntTHeaderMin+1)^(0+256)
 13475                           
 13476                           ;lin.c: 1195: _ELINMIntTHeaderMax = ( ( ( ( 34L + 1 ) * 14L ) / 10L ) * ( 100L * 1000000
      +                          L / 19200L ) / 128L ) / 100;
 13477  177E  0023               	movlb	3	; select bank3
 13478  177F  00CC               	movwf	__ELINMIntTHeaderMax^(0+384)
 13479  1780  01CD               	clrf	(__ELINMIntTHeaderMax+1)^(0+384)
 13480                           
 13481                           ;lin.c: 1196: _ELINMIntTFrameMin = _ELINM_fmin;
 13482  1781  0020               	movlb	0	; select bank0
 13483  1782  0827               	movf	__ELINMIntSendMessage@_ELINM_fmin+1,w
 13484  1783  0022               	movlb	2	; select bank2
 13485  1784  00AE               	movwf	(__ELINMIntTFrameMin+1)^(0+256)
 13486  1785  0020               	movlb	0	; select bank0
 13487  1786  0826               	movf	__ELINMIntSendMessage@_ELINM_fmin,w
 13488  1787  0022               	movlb	2	; select bank2
 13489  1788  00AD               	movwf	__ELINMIntTFrameMin^(0+256)
 13490                           
 13491                           ;lin.c: 1197: _ELINMIntTFrameMax = _ELINM_fmax;
 13492  1789  0020               	movlb	0	; select bank0
 13493  178A  0829               	movf	__ELINMIntSendMessage@_ELINM_fmax+1,w
 13494  178B  0023               	movlb	3	; select bank3
 13495  178C  00CF               	movwf	(__ELINMIntTFrameMax+1)^(0+384)
 13496  178D  0020               	movlb	0	; select bank0
 13497  178E  0828               	movf	__ELINMIntSendMessage@_ELINM_fmax,w
 13498  178F  0023               	movlb	3	; select bank3
 13499  1790  00CE               	movwf	__ELINMIntTFrameMax^(0+384)
 13500                           
 13501                           ;lin.c: 1207: if( _ELINMIntStatus.ELINMINTSTS.IDLE)
 13502  1791  0020               	movlb	0	; select bank0
 13503  1792  1DE0               	btfss	__ELINMIntStatus,3
 13504  1793  0008               	return
 13505                           
 13506                           ;lin.c: 1210: {
 13507                           ;lin.c: 1229: _ELINMIntMessageBuffer[ 0 ] = 0x55;
 13508  1794  3055               	movlw	85
 13509  1795  0024               	movlb	4	; select bank4
 13510  1796  00D0               	movwf	__ELINMIntMessageBuffer^(0+512)
 13511                           
 13512                           ;lin.c: 1230: _ELINMIntMessageBuffer[ 1 ] = _ELINMIntCalcIDParity( _ELINM_tid );
 13513  1797  0020               	movlb	0	; select bank0
 13514  1798  082B               	movf	__ELINMIntSendMessage@_ELINM_tid,w
 13515  1799  27DA  3190         	fcall	__ELINMIntCalcIDParity
 13516  179B  0024               	movlb	4	; select bank4
 13517  179C  00D1               	movwf	(__ELINMIntMessageBuffer^(0+512)+1)
 13518                           
 13519                           ;lin.c: 1231: _ELINMIntMessageBufferPointer = 0;
 13520  179D  0021               	movlb	1	; select bank1
 13521  179E  01CD               	clrf	__ELINMIntMessageBufferPointer^(0+128)
 13522                           
 13523                           ;lin.c: 1238: if( _ELINMIntStatus.ELINMINTSTS.RX )
 13524  179F  0020               	movlb	0	; select bank0
 13525  17A0  1CE0               	btfss	__ELINMIntStatus,1
 13526  17A1  2FA6               	goto	l12120
 13527                           
 13528                           ;lin.c: 1241: {
 13529                           ;lin.c: 1243: _ELINMIntMessageSize.SIZE = 2;
 13530  17A2  3002               	movlw	2
 13531  17A3  0021               	movlb	1	; select bank1
 13532  17A4  00CF               	movwf	__ELINMIntMessageSize^(0+128)
 13533                           
 13534                           ;lin.c: 1246: }
 13535  17A5  2FCB               	goto	l12136
 13536  17A6                     l12120:	
 13537                           
 13538                           ;lin.c: 1249: else
 13539                           ;lin.c: 1250: {
 13540                           ;lin.c: 1252: _ELINMIntMessageSize.SIZE = _ELINM_size + 2;
 13541  17A6  0825               	movf	__ELINMIntSendMessage@_ELINM_size,w
 13542  17A7  3E02               	addlw	2
 13543  17A8  0021               	movlb	1	; select bank1
 13544  17A9  00CF               	movwf	__ELINMIntMessageSize^(0+128)
 13545                           
 13546                           ;lin.c: 1253: _ELINM_chk = 0;
 13547  17AA  0020               	movlb	0	; select bank0
 13548  17AB  3002               	movlw	2
 13549  17AC  01AD               	clrf	__ELINMIntSendMessage@_ELINM_chk
 13550  17AD  01AE               	clrf	__ELINMIntSendMessage@_ELINM_chk+1
 13551                           
 13552                           ;lin.c: 1256: for( _ELINM_i = 2;
 13553  17AE  00AC               	movwf	__ELINMIntSendMessage@_ELINM_i
 13554  17AF                     l12130:	
 13555                           ;lin.c: 1257: _ELINM_i < _ELINMIntMessageSize.SIZE;
 13556                           ;lin.c: 1258: _ELINM_i++ )
 13557                           
 13558  17AF  0021               	movlb	1	; select bank1
 13559  17B0  084F               	movf	__ELINMIntMessageSize^(0+128),w
 13560  17B1  0020               	movlb	0	; select bank0
 13561  17B2  022C               	subwf	__ELINMIntSendMessage@_ELINM_i,w
 13562  17B3  1803               	btfsc	3,0
 13563  17B4  2FBE               	goto	l12132
 13564                           
 13565                           ;lin.c: 1261: {
 13566                           ;lin.c: 1263: _ELINM_chk += _ELINMIntMessageBuffer[ _ELINM_i ];
 13567  17B5  082C               	movf	__ELINMIntSendMessage@_ELINM_i,w
 13568  17B6  3186  268B  3190   	fcall	PL106	;call to abstracted procedure
 13569  17B9  07AD               	addwf	__ELINMIntSendMessage@_ELINM_chk,f
 13570  17BA  1803               	skipnc
 13571  17BB  0AAE               	incf	__ELINMIntSendMessage@_ELINM_chk+1,f
 13572  17BC  0AAC               	incf	__ELINMIntSendMessage@_ELINM_i,f
 13573  17BD  2FAF               	goto	l12130
 13574  17BE                     l12132:	
 13575                           
 13576                           ;lin.c: 1266: }
 13577                           ;lin.c: 1269: _ELINMIntMessageBuffer[ _ELINMIntMessageSize.SIZE ]
 13578                           ;lin.c: 1270: = ( ~( _ELINM_chk + ( _ELINM_chk>>8 ) ) );
 13579  17BE  0021               	movlb	1	; select bank1
 13580  17BF  084F               	movf	__ELINMIntMessageSize^(0+128),w
 13581  17C0  3E50               	addlw	(low (__ELINMIntMessageBuffer| (0+512)))& (0+255)
 13582  17C1  0086               	movwf	6
 13583  17C2  3002               	movlw	2	; select bank4/5
 13584  17C3  0087               	movwf	7
 13585  17C4  0020               	movlb	0	; select bank0
 13586  17C5  082E               	movf	__ELINMIntSendMessage@_ELINM_chk+1,w
 13587  17C6  072D               	addwf	__ELINMIntSendMessage@_ELINM_chk,w
 13588  17C7  3AFF               	xorlw	255
 13589  17C8  0081               	movwf	1
 13590                           
 13591                           ;lin.c: 1271: _ELINMIntMessageSize.SIZE++;
 13592  17C9  0021               	movlb	1	; select bank1
 13593  17CA  0ACF               	incf	__ELINMIntMessageSize^(0+128),f
 13594  17CB                     l12136:	
 13595                           
 13596                           ;lin.c: 1274: }
 13597                           ;lin.c: 1277: SENDB = 1;
 13598  17CB  0023               	movlb	3	; select bank3
 13599  17CC  159E               	bsf	30,3	;volatile
 13600                           
 13601                           ;lin.c: 1278: TXREG = 0xFF;
 13602  17CD  30FF               	movlw	255
 13603  17CE  009A               	movwf	26	;volatile
 13604                           
 13605                           ;lin.c: 1279: _ELINMIntStatus.ELINMIntStatusByte &= 0x0F;
 13606  17CF  300F               	movlw	15
 13607  17D0  0020               	movlb	0	; select bank0
 13608  17D1  05E0               	andwf	__ELINMIntStatus,f
 13609                           
 13610                           ;lin.c: 1280: _ELINMIntStatus.ELINMINTSTS.TX = 1;
 13611  17D2  1460               	bsf	__ELINMIntStatus,0
 13612                           
 13613                           ;lin.c: 1281: _ELINMIntStatus1.ELINMINTSTS.HEADER = 1;
 13614  17D3  0021               	movlb	1	; select bank1
 13615  17D4  14D0               	bsf	__ELINMIntStatus1^(0+128),1
 13616                           
 13617                           ;lin.c: 1282: _ELINMIntStatus1.ELINMINTSTS.FRAME = 1;
 13618  17D5  1550               	bsf	__ELINMIntStatus1^(0+128),2
 13619                           
 13620                           ;lin.c: 1283: _ELINMIntReadBack = 0x00;
 13621  17D6  01CE               	clrf	__ELINMIntReadBack^(0+128)
 13622                           
 13623                           ;lin.c: 1284: _ELINMIntStatus.ELINMINTSTS.IDLE = 0;
 13624  17D7  0020               	movlb	0	; select bank0
 13625  17D8  11E0               	bcf	__ELINMIntStatus,3
 13626  17D9  0008               	return
 13627  17DA                     __end_of__ELINMIntSendMessage:	
 13628  17DA                     __ptext36:	
 13629 ;; *************** function __ELINMIntCalcIDParity *****************
 13630 ;; Defined at:
 13631 ;;		line 1048 in file "../lin.c"
 13632 ;; Parameters:    Size  Location     Type
 13633 ;;  ELINM_idtr      1    wreg     struct ELINMINT_ID
 13634 ;; Auto vars:     Size  Location     Type
 13635 ;;  ELINM_idtr      1    4[BANK0 ] struct ELINMINT_ID
 13636 ;; Return value:  Size  Location     Type
 13637 ;;                  1    wreg      unsigned char 
 13638 ;; Registers used:
 13639 ;;		wreg, status,2, status,0
 13640 ;; Tracked objects:
 13641 ;;		On entry : 1F/0
 13642 ;;		On exit  : 1F/0
 13643 ;;		Unchanged: 0/0
 13644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13645 ;;      Params:         0       0       0       0       0       0       0       0
 13646 ;;      Locals:         0       1       0       0       0       0       0       0
 13647 ;;      Temps:          0       0       0       0       0       0       0       0
 13648 ;;      Totals:         0       1       0       0       0       0       0       0
 13649 ;;Total ram usage:        1 bytes
 13650 ;; Hardware stack levels used:    1
 13651 ;; Hardware stack levels required when called:    3
 13652 ;; This function calls:
 13653 ;;		Nothing
 13654 ;; This function is called by:
 13655 ;;		__ELINMIntSendMessage
 13656 ;; This function uses a non-reentrant model
 13657 ;;
 13658                           
 13659                           
 13660                           ;psect for function __ELINMIntCalcIDParity
 13661  17DA                     __ELINMIntCalcIDParity:	
 13662                           
 13663                           ;incstack = 0
 13664                           ; Regs used in __ELINMIntCalcIDParity: [wreg+status,2+status,0]
 13665                           ;__ELINMIntCalcIDParity@ELINM_idtr stored from wreg
 13666  17DA  00A4               	movwf	__ELINMIntCalcIDParity@ELINM_idtr
 13667                           
 13668                           ;lin.c: 1053: ELINM_idtr.ID &= 0x3F;
 13669  17DB  303F               	movlw	63
 13670  17DC  05A4               	andwf	__ELINMIntCalcIDParity@ELINM_idtr,f
 13671                           
 13672                           ;lin.c: 1056: if( ELINM_idtr.IDbits.ID0)
 13673  17DD  1C24               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,0
 13674  17DE  2FE1               	goto	l1011
 13675                           
 13676                           ;lin.c: 1059: {
 13677                           ;lin.c: 1061: ELINM_idtr.ID ^= 0x40;
 13678  17DF  3040               	movlw	64
 13679  17E0  06A4               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
 13680  17E1                     l1011:	
 13681                           
 13682                           ;lin.c: 1064: }
 13683                           ;lin.c: 1067: if( ELINM_idtr.IDbits.ID1 )
 13684  17E1  1CA4               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,1
 13685  17E2  2FE5               	goto	l1012
 13686                           
 13687                           ;lin.c: 1070: {
 13688                           ;lin.c: 1072: ELINM_idtr.ID ^= 0x40;
 13689  17E3  3040               	movlw	64
 13690  17E4  06A4               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
 13691  17E5                     l1012:	
 13692                           
 13693                           ;lin.c: 1075: }
 13694                           ;lin.c: 1078: if( ELINM_idtr.IDbits.ID2 )
 13695  17E5  1D24               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,2
 13696  17E6  2FE9               	goto	l1013
 13697                           
 13698                           ;lin.c: 1081: {
 13699                           ;lin.c: 1083: ELINM_idtr.ID ^= 0x40;
 13700  17E7  3040               	movlw	64
 13701  17E8  06A4               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
 13702  17E9                     l1013:	
 13703                           
 13704                           ;lin.c: 1086: }
 13705                           ;lin.c: 1089: if( ELINM_idtr.IDbits.ID4 )
 13706  17E9  1E24               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,4
 13707  17EA  2FED               	goto	l1014
 13708                           
 13709                           ;lin.c: 1092: {
 13710                           ;lin.c: 1094: ELINM_idtr.ID ^= 0x40;
 13711  17EB  3040               	movlw	64
 13712  17EC  06A4               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
 13713  17ED                     l1014:	
 13714                           
 13715                           ;lin.c: 1097: }
 13716                           ;lin.c: 1100: ELINM_idtr.IDbits.ID7 = 1;
 13717  17ED  17A4               	bsf	__ELINMIntCalcIDParity@ELINM_idtr,7
 13718                           
 13719                           ;lin.c: 1103: if( ELINM_idtr.IDbits.ID1 )
 13720  17EE  1CA4               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,1
 13721  17EF  2FF2               	goto	l1015
 13722                           
 13723                           ;lin.c: 1106: {
 13724                           ;lin.c: 1108: ELINM_idtr.ID ^= 0x80;
 13725  17F0  3080               	movlw	128
 13726  17F1  06A4               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
 13727  17F2                     l1015:	
 13728                           
 13729                           ;lin.c: 1111: }
 13730                           ;lin.c: 1114: if( ELINM_idtr.IDbits.ID3 )
 13731  17F2  1DA4               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,3
 13732  17F3  2FF6               	goto	l1016
 13733                           
 13734                           ;lin.c: 1117: {
 13735                           ;lin.c: 1119: ELINM_idtr.ID ^= 0x80;
 13736  17F4  3080               	movlw	128
 13737  17F5  06A4               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
 13738  17F6                     l1016:	
 13739                           
 13740                           ;lin.c: 1122: }
 13741                           ;lin.c: 1125: if( ELINM_idtr.IDbits.ID4 )
 13742  17F6  1E24               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,4
 13743  17F7  2FFA               	goto	l1017
 13744                           
 13745                           ;lin.c: 1128: {
 13746                           ;lin.c: 1130: ELINM_idtr.ID ^= 0x80;
 13747  17F8  3080               	movlw	128
 13748  17F9  06A4               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
 13749  17FA                     l1017:	
 13750                           
 13751                           ;lin.c: 1133: }
 13752                           ;lin.c: 1136: if( ELINM_idtr.IDbits.ID5 )
 13753  17FA  1EA4               	btfss	__ELINMIntCalcIDParity@ELINM_idtr,5
 13754  17FB  2FFE               	goto	l1018
 13755                           
 13756                           ;lin.c: 1139: {
 13757                           ;lin.c: 1141: ELINM_idtr.ID ^= 0x80;
 13758  17FC  3080               	movlw	128
 13759  17FD  06A4               	xorwf	__ELINMIntCalcIDParity@ELINM_idtr,f
 13760  17FE                     l1018:	
 13761                           
 13762                           ;lin.c: 1144: }
 13763                           ;lin.c: 1147: return ( ( BYTE )ELINM_idtr.ID );
 13764  17FE  0824               	movf	__ELINMIntCalcIDParity@ELINM_idtr,w
 13765  17FF  0008               	return
 13766  1800                     __end_of__ELINMIntCalcIDParity:	
 13767                           
 13768                           	psect	text41
 13769  089B                     __ptext41:	
 13770 ;; *************** function _BVH2_Appl_Layer *****************
 13771 ;; Defined at:
 13772 ;;		line 331 in file "../T_Link/BVH2_Appl_Layer.c"
 13773 ;; Parameters:    Size  Location     Type
 13774 ;;		None
 13775 ;; Auto vars:     Size  Location     Type
 13776 ;;  Sb3_Sum1        2   28[BANK4 ] short 
 13777 ;;  Sb3_Product1    2   15[BANK4 ] unsigned short 
 13778 ;;  Sb4_PI_sum      2   30[BANK4 ] short 
 13779 ;;  Sb2_Switch2     2   25[BANK4 ] unsigned short 
 13780 ;;  Sb2_Error       2   23[BANK4 ] short 
 13781 ;;  Sb2_Switch5     2   17[BANK4 ] unsigned short 
 13782 ;;  Sb1_Logical_    1   27[BANK4 ] unsigned char 
 13783 ;;  Sb2_Logical_    1   22[BANK4 ] unsigned char 
 13784 ;;  Sb1_Logical_    1   21[BANK4 ] unsigned char 
 13785 ;;  Sb1_Logical_    1   20[BANK4 ] unsigned char 
 13786 ;;  Cb24_Reset      1   19[BANK4 ] unsigned char 
 13787 ;;  Sb1_Logical_    1    8[BANK4 ] unsigned char 
 13788 ;; Return value:  Size  Location     Type
 13789 ;;                  1    wreg      void 
 13790 ;; Registers used:
 13791 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13792 ;; Tracked objects:
 13793 ;;		On entry : 1F/1
 13794 ;;		On exit  : 1F/2
 13795 ;;		Unchanged: 0/0
 13796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13797 ;;      Params:         0       0       0       0       0       0       0       0
 13798 ;;      Locals:         0       0       0       0       0      32       0       0
 13799 ;;      Temps:          0       6       0       0       0       0       0       0
 13800 ;;      Totals:         0       6       0       0       0      32       0       0
 13801 ;;Total ram usage:       38 bytes
 13802 ;; Hardware stack levels used:    1
 13803 ;; Hardware stack levels required when called:    4
 13804 ;; This function calls:
 13805 ;;		_Cb1_Current_An___High_node_fcn1
 13806 ;;		_Cb34_PWM_Detection_node_fcn1
 13807 ;;		_Cb44_Pic_etat_monitor_node_fcn1
 13808 ;;		_Cb56_UbatHandling_node_fcn2
 13809 ;;		___aldiv
 13810 ;;		___lmul
 13811 ;;		___wmul
 13812 ;; This function is called by:
 13813 ;;		_main
 13814 ;; This function uses a non-reentrant model
 13815 ;;
 13816                           
 13817                           
 13818                           ;psect for function _BVH2_Appl_Layer
 13819  089B                     _BVH2_Appl_Layer:	
 13820                           
 13821                           ;BVH2_Appl_Layer.c: 334: static UInt16 Cb14_StateCnt = 0;
 13822                           ;BVH2_Appl_Layer.c: 335: static UInt16 Cb19_Counter = 0;
 13823                           ;BVH2_Appl_Layer.c: 336: static UInt16 Cb24_BadCnt = 0;
 13824                           ;BVH2_Appl_Layer.c: 337: static UInt16 Cb24_StateCnt = 0;
 13825                           ;BVH2_Appl_Layer.c: 338: static UInt8 Cb24_RestartCounter = 0;
 13826                           ;BVH2_Appl_Layer.c: 339: static UInt8 Cb51_Counter = 0;
 13827                           ;BVH2_Appl_Layer.c: 340: static UInt8 Cb9_StateCnt = 0;
 13828                           ;BVH2_Appl_Layer.c: 342: static struct tag_SIBFS_Current_Analysis_low_ SIBFS_Current_Ana
      +                          lysis_low_b = {
 13829                           ;BVH2_Appl_Layer.c: 343: 0 ,
 13830                           
 13831                           ;incstack = 0
 13832                           ; Regs used in _BVH2_Appl_Layer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13833  089B  28DA               	goto	l13528
 13834  089C                     l13468:	
 13835                           
 13836                           ;BVH2_Appl_Layer.c: 415: if (Cb44_StateCnt > 50) {
 13837  089C  3000               	movlw	0
 13838  089D  0225               	subwf	(_Cb44_StateCnt+1)^(0+128),w
 13839  089E  3033               	movlw	51
 13840  089F                     L19:	
 13841  089F  1903               	skipnz
 13842  08A0  0224               	subwf	_Cb44_StateCnt^(0+128),w
 13843  08A1  1C03               	skipc
 13844  08A2  28AD               	goto	l13476
 13845                           
 13846                           ;BVH2_Appl_Layer.c: 418: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)5;
 13847  08A3  0843               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 13848  08A4  39F8               	andlw	-8
 13849  08A5  3805               	iorlw	5
 13850  08A6  00C3               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
 13851                           
 13852                           ;BVH2_Appl_Layer.c: 420: Cb44_oAlarm = 0;
 13853  08A7  0022               	movlb	2	; select bank2
 13854  08A8  01C9               	clrf	_Cb44_oShutoff^(0+256)
 13855  08A9                     l13474:	
 13856                           
 13857                           ;BVH2_Appl_Layer.c: 421: Cb44_StateCnt = 0 ;
 13858  08A9  0021               	movlb	1	; select bank1
 13859  08AA  01A4               	clrf	_Cb44_StateCnt^(0+128)
 13860  08AB  01A5               	clrf	(_Cb44_StateCnt+1)^(0+128)
 13861                           
 13862                           ;BVH2_Appl_Layer.c: 422: }
 13863  08AC  28EF               	goto	l13530
 13864  08AD                     l13476:	
 13865                           
 13866                           ;BVH2_Appl_Layer.c: 423: else {
 13867                           ;BVH2_Appl_Layer.c: 424: Cb44_StateCnt = Cb44_StateCnt + 1 ;
 13868  08AD  0021               	movlb	1	; select bank1
 13869  08AE  0824               	movf	_Cb44_StateCnt^(0+128),w
 13870  08AF  3E01               	addlw	1
 13871  08B0  00A4               	movwf	_Cb44_StateCnt^(0+128)
 13872  08B1  3000               	movlw	0
 13873  08B2  3D25               	addwfc	(_Cb44_StateCnt+1)^(0+128),w
 13874  08B3  00A5               	movwf	(_Cb44_StateCnt+1)^(0+128)
 13875  08B4  28EF               	goto	l13530
 13876  08B5                     l13478:	
 13877                           
 13878                           ;BVH2_Appl_Layer.c: 432: Cb44_Pic_etat_monitor_node_fcn1();
 13879  08B5  2637  3188         	fcall	_Cb44_Pic_etat_monitor_node_fcn1
 13880                           
 13881                           ;BVH2_Appl_Layer.c: 433: if (SIBFS_Pic_etat_monitor_b.Cb44_glflag <= 2) {
 13882  08B7  0C43               	rrf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 13883  08B8  27EB  3188         	fcall	PL98	;call to abstracted procedure
 13884  08BA  1D03               	btfss	3,2
 13885  08BB  28AD               	goto	l13476
 13886  08BC  28EF               	goto	l13530
 13887  08BD                     l13484:	
 13888                           
 13889                           ;BVH2_Appl_Layer.c: 442: Cb44_Pic_etat_monitor_node_fcn1();
 13890  08BD  2637  3188         	fcall	_Cb44_Pic_etat_monitor_node_fcn1
 13891                           
 13892                           ;BVH2_Appl_Layer.c: 445: break;
 13893  08BF  28EF               	goto	l13530
 13894  08C0                     l13486:	
 13895                           
 13896                           ;BVH2_Appl_Layer.c: 449: if (Cb44_StateCnt > 15) {
 13897  08C0  3000               	movlw	0
 13898  08C1  0225               	subwf	(_Cb44_StateCnt+1)^(0+128),w
 13899  08C2  3010               	movlw	16
 13900  08C3  289F               	goto	L19
 13901  08C4                     l13502:	
 13902                           
 13903                           ;BVH2_Appl_Layer.c: 481: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)3;
 13904  08C4  0843               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 13905  08C5  39F8               	andlw	-8
 13906  08C6  3803               	iorlw	3
 13907  08C7  00C3               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
 13908                           
 13909                           ;BVH2_Appl_Layer.c: 483: Cb44_oAlarm = 0;
 13910  08C8  0022               	movlb	2	; select bank2
 13911  08C9  01C9               	clrf	_Cb44_oShutoff^(0+256)
 13912                           
 13913                           ;BVH2_Appl_Layer.c: 484: }
 13914  08CA  28EF               	goto	l13530
 13915  08CB                     l13516:	
 13916                           
 13917                           ;BVH2_Appl_Layer.c: 509: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)6;
 13918  08CB  0843               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 13919  08CC  39F8               	andlw	-8
 13920  08CD  3806               	iorlw	6
 13921  08CE  28D8               	goto	L20
 13922  08CF                     l1579:	
 13923                           ;BVH2_Appl_Layer.c: 515: }
 13924                           ;BVH2_Appl_Layer.c: 516: default: {
 13925                           
 13926                           
 13927                           ;BVH2_Appl_Layer.c: 518: if (!(SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor)) {
 13928  08CF  1AC3               	btfsc	_SIBFS_Pic_etat_monitor_b^(0+128),5
 13929  08D0  28EF               	goto	l13530
 13930                           
 13931                           ;BVH2_Appl_Layer.c: 519: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor = 1;
 13932  08D1  16C3               	bsf	_SIBFS_Pic_etat_monitor_b^(0+128),5
 13933                           
 13934                           ;BVH2_Appl_Layer.c: 523: if (ui8_ResetMatlab != 0) {
 13935  08D2  086F               	movf	_ui8_ResetMatlab^(0+128),w
 13936  08D3  1903               	btfsc	3,2
 13937  08D4  28EF               	goto	l13530
 13938                           
 13939                           ;BVH2_Appl_Layer.c: 525: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned i
      +                          nt) (UInt8)4;
 13940  08D5  0843               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 13941  08D6  39F8               	andlw	-8
 13942  08D7  3804               	iorlw	4
 13943  08D8                     L20:	
 13944  08D8  00C3               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
 13945  08D9  28A9               	goto	l13474
 13946  08DA                     l13528:	
 13947  08DA  0843               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 13948  08DB  3907               	andlw	7
 13949                           
 13950                           ; Switch size 1, requested type "space"
 13951                           ; Number of cases is 6, Range of values is 1 to 6
 13952                           ; switch strategies available:
 13953                           ; Name         Instructions Cycles
 13954                           ; simple_byte           19    10 (average)
 13955                           ; direct_byte           21     9 (fixed)
 13956                           ; jumptable            263     9 (fixed)
 13957                           ;	Chosen strategy is simple_byte
 13958  08DC  3A01               	xorlw	1	; case 1
 13959  08DD  1903               	skipnz
 13960  08DE  28CB               	goto	l13516
 13961  08DF  3A03               	xorlw	3	; case 2
 13962  08E0  1903               	skipnz
 13963  08E1  28C4               	goto	l13502
 13964  08E2  3A01               	xorlw	1	; case 3
 13965  08E3  1903               	skipnz
 13966  08E4  28BD               	goto	l13484
 13967  08E5  3A07               	xorlw	7	; case 4
 13968  08E6  1903               	skipnz
 13969  08E7  289C               	goto	l13468
 13970  08E8  3A01               	xorlw	1	; case 5
 13971  08E9  1903               	skipnz
 13972  08EA  28B5               	goto	l13478
 13973  08EB  3A03               	xorlw	3	; case 6
 13974  08EC  1903               	skipnz
 13975  08ED  28C0               	goto	l13486
 13976  08EE  28CF               	goto	l1579
 13977  08EF                     l13530:	
 13978                           
 13979                           ;BVH2_Appl_Layer.c: 538: Cb34_idPWM = ui8_PWM_dc_mat;
 13980  08EF  0020               	movlb	0	; select bank0
 13981  08F0  085E               	movf	_ui8_PWM_dc_mat,w
 13982  08F1  00DD               	movwf	_Cb34_idPWM
 13983                           
 13984                           ;BVH2_Appl_Layer.c: 543: if (SIBFS_PWM_Detection_b.Cb35_PWMinput_handling) {
 13985  08F2  0021               	movlb	1	; select bank1
 13986  08F3  1A44               	btfsc	_SIBFS_PWM_Detection_b^(0+128),4
 13987  08F4  28F9               	goto	l13554
 13988  08F5  2907               	goto	l1582
 13989  08F6                     l13536:	
 13990                           
 13991                           ;BVH2_Appl_Layer.c: 549: Cb34_PWM_Detection_node_fcn1();
 13992  08F6  2671  3188         	fcall	_Cb34_PWM_Detection_node_fcn1
 13993                           
 13994                           ;BVH2_Appl_Layer.c: 552: break;
 13995  08F8  2910               	goto	l13570
 13996  08F9                     l13554:	
 13997  08F9  0844               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 13998  08FA  390F               	andlw	15
 13999                           
 14000                           ; Switch size 1, requested type "space"
 14001                           ; Number of cases is 8, Range of values is 1 to 8
 14002                           ; switch strategies available:
 14003                           ; Name         Instructions Cycles
 14004                           ; direct_byte           25     9 (fixed)
 14005                           ; simple_byte           25    13 (average)
 14006                           ; jumptable            263     9 (fixed)
 14007                           ;	Chosen strategy is direct_byte
 14008  08FB  3EFF               	addlw	-1
 14009  08FC  1C03               	skipc
 14010  08FD  2910               	goto	l13570
 14011  08FE  0084               	movwf	4
 14012  08FF  3008               	movlw	8
 14013  0900  0204               	subwf	4,w
 14014  0901  1803               	skipnc
 14015  0902  2910               	goto	l13570
 14016  0903  3187               	movlp	high S14500
 14017  0904  3504               	lslf	4,w
 14018  0905  3E66               	addlw	low S14500
 14019  0906  0082               	movwf	2
 14020  0907                     l1582:	
 14021                           
 14022                           ;BVH2_Appl_Layer.c: 615: else {
 14023                           ;BVH2_Appl_Layer.c: 616: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling = 1;
 14024  0907  1644               	bsf	_SIBFS_PWM_Detection_b^(0+128),4
 14025                           
 14026                           ;BVH2_Appl_Layer.c: 619: if (ui8_ResetMatlab == 1) {
 14027  0908  0B6F               	decfsz	_ui8_ResetMatlab^(0+128),w
 14028  0909  290B               	goto	u11821
 14029  090A  290C               	goto	l13558
 14030  090B                     u11821:	
 14031  090B  2910               	goto	l13570
 14032  090C                     l13558:	
 14033                           
 14034                           ;BVH2_Appl_Layer.c: 621: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned int
      +                          ) (UInt8)1;
 14035                           
 14036                           ;BVH2_Appl_Layer.c: 622: Cb34_odPumpOff = 1;
 14037                           
 14038                           ;BVH2_Appl_Layer.c: 623: Cb34_odFixedValueSel = 0;
 14039                           
 14040                           ;BVH2_Appl_Layer.c: 624: Cb34_odFixedLowValueSel = 0;
 14041  090C  27BA  3188         	fcall	PL62	;call to abstracted procedure
 14042                           
 14043                           ;BVH2_Appl_Layer.c: 625: Cb34_oPWM_SC_Alarm = 0;
 14044  090E  01CD               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 14045                           
 14046                           ;BVH2_Appl_Layer.c: 626: Cb34_oPWM_Alarm = 0;
 14047  090F  01CE               	clrf	_Cb34_oPWM_Alarm^(0+256)
 14048  0910                     l13570:	
 14049                           
 14050                           ;BVH2_Appl_Layer.c: 627: }
 14051                           ;BVH2_Appl_Layer.c: 628: }
 14052                           ;BVH2_Appl_Layer.c: 633: bool_PWMin_Freq_err_Alarm = Cb34_oPWM_SC_Alarm;
 14053  0910  0022               	movlb	2	; select bank2
 14054  0911  084D               	movf	_Cb34_oPWM_SC_Alarm^(0+256),w
 14055  0912  00D9               	movwf	_bool_PWMin_Freq_err_Alarm^(0+256)
 14056                           
 14057                           ;BVH2_Appl_Layer.c: 638: if (SIBFS_UbatHandling_b.Cb57_Ubat_Handling) {
 14058  0913  0021               	movlb	1	; select bank1
 14059  0914  1DC2               	btfss	_SIBFS_UbatHandling_b^(0+128),3
 14060  0915  2935               	goto	l1595
 14061                           
 14062                           ;BVH2_Appl_Layer.c: 642: if (SIBFS_UbatHandling_b.Cb58_SaturationHigh) {
 14063  0916  1E42               	btfss	_SIBFS_UbatHandling_b^(0+128),4
 14064  0917  2923               	goto	l1596
 14065                           
 14066                           ;BVH2_Appl_Layer.c: 644: SIBFS_UbatHandling_b.Aux_sflag3 = 2 ;
 14067  0918  0842               	movf	_SIBFS_UbatHandling_b^(0+128),w
 14068  0919  39F8               	andlw	-8
 14069  091A  3802               	iorlw	2
 14070  091B  00C2               	movwf	_SIBFS_UbatHandling_b^(0+128)
 14071                           
 14072                           ;BVH2_Appl_Layer.c: 647: if (((UInt8)ui8_BattVolt_mat) < 139) {
 14073  091C  308B               	movlw	139
 14074  091D  0230               	subwf	_ui8_BattVolt_mat^(0+128),w
 14075  091E  1803               	skipnc
 14076  091F  293A               	goto	l1603
 14077  0920                     l13580:	
 14078                           
 14079                           ;BVH2_Appl_Layer.c: 648: Cb56_UbatHandling_node_fcn2();
 14080  0920  26E4  3188         	fcall	_Cb56_UbatHandling_node_fcn2
 14081  0922  293A               	goto	l1603
 14082  0923                     l1596:	
 14083                           
 14084                           ;BVH2_Appl_Layer.c: 653: else {
 14085                           ;BVH2_Appl_Layer.c: 655: if (SIBFS_UbatHandling_b.Cb59_SaturationLow) {
 14086  0923  1EC2               	btfss	_SIBFS_UbatHandling_b^(0+128),5
 14087  0924  292E               	goto	l1599
 14088                           
 14089                           ;BVH2_Appl_Layer.c: 657: SIBFS_UbatHandling_b.Aux_sflag3 = 3 ;
 14090  0925  0842               	movf	_SIBFS_UbatHandling_b^(0+128),w
 14091  0926  39F8               	andlw	-8
 14092  0927  3803               	iorlw	3
 14093  0928  00C2               	movwf	_SIBFS_UbatHandling_b^(0+128)
 14094                           
 14095                           ;BVH2_Appl_Layer.c: 660: if (((UInt8)ui8_BattVolt_mat) > 49) {
 14096  0929  3032               	movlw	50
 14097  092A  0230               	subwf	_ui8_BattVolt_mat^(0+128),w
 14098  092B  1803               	btfsc	3,0
 14099  092C  2920               	goto	l13580
 14100  092D  293A               	goto	l1603
 14101  092E                     l1599:	
 14102                           
 14103                           ;BVH2_Appl_Layer.c: 666: else {
 14104                           ;BVH2_Appl_Layer.c: 668: if (SIBFS_UbatHandling_b.Cb60_NormalUbat) {
 14105  092E  1F42               	btfss	_SIBFS_UbatHandling_b^(0+128),6
 14106  092F  293A               	goto	l1603
 14107                           
 14108                           ;BVH2_Appl_Layer.c: 670: SIBFS_UbatHandling_b.Aux_sflag3 = 1 ;
 14109  0930  0842               	movf	_SIBFS_UbatHandling_b^(0+128),w
 14110  0931  39F8               	andlw	-8
 14111  0932  3801               	iorlw	1
 14112  0933  00C2               	movwf	_SIBFS_UbatHandling_b^(0+128)
 14113  0934  2920               	goto	l13580
 14114  0935                     l1595:	
 14115                           
 14116                           ;BVH2_Appl_Layer.c: 680: else {
 14117                           ;BVH2_Appl_Layer.c: 681: SIBFS_UbatHandling_b.Cb57_Ubat_Handling = 1;
 14118  0935  15C2               	bsf	_SIBFS_UbatHandling_b^(0+128),3
 14119                           
 14120                           ;BVH2_Appl_Layer.c: 684: if (ui8_ResetMatlab == 1) {
 14121  0936  0B6F               	decfsz	_ui8_ResetMatlab^(0+128),w
 14122  0937  293A               	goto	l1603
 14123                           
 14124                           ;BVH2_Appl_Layer.c: 686: SIBFS_UbatHandling_b.Cb60_NormalUbat = 1;
 14125                           
 14126                           ;BVH2_Appl_Layer.c: 687: Cb56_odPumpOff = 0;
 14127                           
 14128                           ;BVH2_Appl_Layer.c: 688: Cb56_odFixedValueSel = 0;
 14129                           
 14130                           ;BVH2_Appl_Layer.c: 689: Cb56_oUbat_Alarm_High = 0;
 14131  0938  27D6  3188         	fcall	PL80	;call to abstracted procedure
 14132  093A                     l1603:	
 14133                           
 14134                           ;BVH2_Appl_Layer.c: 690: }
 14135                           ;BVH2_Appl_Layer.c: 691: }
 14136                           ;BVH2_Appl_Layer.c: 694: Sb1_Logical_Operator2 = Cb34_odPumpOff && (!(Cb56_odFixedValueS
      +                          el));
 14137  093A  0024               	movlb	4	; select bank4
 14138  093B  01A9               	clrf	_BVH2_Appl_Layer$1208^(0+512)
 14139  093C  0022               	movlb	2	; select bank2
 14140  093D  084A               	movf	_Cb34_odPumpOff^(0+256),w
 14141  093E  1903               	btfsc	3,2
 14142  093F  2947               	goto	l13604
 14143  0940  0021               	movlb	1	; select bank1
 14144  0941  0841               	movf	_Cb56_odFixedValueSel^(0+128),w
 14145  0942  1D03               	btfss	3,2
 14146  0943  2947               	goto	l13604
 14147  0944  0024               	movlb	4	; select bank4
 14148  0945  01A9               	clrf	_BVH2_Appl_Layer$1208^(0+512)
 14149  0946  0AA9               	incf	_BVH2_Appl_Layer$1208^(0+512),f
 14150  0947                     l13604:	
 14151  0947  0024               	movlb	4	; select bank4
 14152  0948  0829               	movf	_BVH2_Appl_Layer$1208^(0+512),w
 14153  0949  00A8               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator2^(0+512)
 14154                           
 14155                           ;BVH2_Appl_Layer.c: 699: if (SIBFS_Temperature_Alarm_b.Cb52_CntOverTemp) {
 14156  094A  0021               	movlb	1	; select bank1
 14157  094B  1CBD               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),1
 14158  094C  295C               	goto	l1607
 14159                           
 14160                           ;BVH2_Appl_Layer.c: 701: if (Cb51_Counter > 80) {
 14161  094D  3051               	movlw	81
 14162  094E  0022               	movlb	2	; select bank2
 14163  094F  0245               	subwf	BVH2_Appl_Layer@Cb51_Counter^(0+256),w
 14164  0950  1C03               	skipc
 14165  0951  295A               	goto	l13614
 14166                           
 14167                           ;BVH2_Appl_Layer.c: 704: SIBFS_Temperature_Alarm_b.Cb52_CntOverTemp = 0;
 14168  0952  0021               	movlb	1	; select bank1
 14169  0953  10BD               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),1
 14170  0954                     L22:	
 14171                           
 14172                           ;BVH2_Appl_Layer.c: 705: SIBFS_Temperature_Alarm_b.Cb54_greenTemp = 1;
 14173  0954  15BD               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),3
 14174                           
 14175                           ;BVH2_Appl_Layer.c: 706: Cb51_oTempRedAlarm = 0;
 14176  0955  0022               	movlb	2	; select bank2
 14177  0956  01BF               	clrf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256)
 14178                           
 14179                           ;BVH2_Appl_Layer.c: 707: Cb51_oTempAlarm = 0;
 14180  0957  01C0               	clrf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256)
 14181                           
 14182                           ;BVH2_Appl_Layer.c: 708: Cb51_odPumpOff = 0;
 14183  0958  01BE               	clrf	BVH2_Appl_Layer@Cb51_odPumpOff^(0+256)
 14184  0959  298A               	goto	L21
 14185  095A                     l13614:	
 14186                           ;BVH2_Appl_Layer.c: 710: }
 14187                           
 14188                           ;BVH2_Appl_Layer.c: 709: Cb51_Counter = 0 ;
 14189                           
 14190                           
 14191                           ;BVH2_Appl_Layer.c: 711: else {
 14192                           ;BVH2_Appl_Layer.c: 712: Cb51_Counter = Cb51_Counter + 1 ;
 14193  095A  0AC5               	incf	BVH2_Appl_Layer@Cb51_Counter^(0+256),f
 14194                           
 14195                           ;BVH2_Appl_Layer.c: 713: }
 14196                           ;BVH2_Appl_Layer.c: 716: }
 14197  095B  29F7               	goto	l13726
 14198  095C                     l1607:	
 14199                           
 14200                           ;BVH2_Appl_Layer.c: 717: else {
 14201                           ;BVH2_Appl_Layer.c: 719: if (SIBFS_Temperature_Alarm_b.Cb53_reset) {
 14202  095C  1D3D               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),2
 14203  095D  2961               	goto	l1611
 14204                           
 14205                           ;BVH2_Appl_Layer.c: 724: SIBFS_Temperature_Alarm_b.Cb53_reset = 0;
 14206  095E  113D               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),2
 14207                           
 14208                           ;BVH2_Appl_Layer.c: 725: SIBFS_Temperature_Alarm_b.Cb52_CntOverTemp = 1;
 14209  095F  14BD               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),1
 14210                           
 14211                           ;BVH2_Appl_Layer.c: 728: }
 14212  0960  29F7               	goto	l13726
 14213  0961                     l1611:	
 14214                           
 14215                           ;BVH2_Appl_Layer.c: 729: else {
 14216                           ;BVH2_Appl_Layer.c: 731: if (SIBFS_Temperature_Alarm_b.Cb54_greenTemp) {
 14217  0961  1DBD               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),3
 14218  0962  2975               	goto	l1613
 14219                           
 14220                           ;BVH2_Appl_Layer.c: 735: if (ui16_mat_inpTemp < 72) {
 14221  0963  3000               	movlw	0
 14222  0964  0022               	movlb	2	; select bank2
 14223  0965  0226               	subwf	(_ui16_mat_inpTemp+1)^(0+256),w
 14224  0966  3048               	movlw	72
 14225  0967  1903               	skipnz
 14226  0968  0225               	subwf	_ui16_mat_inpTemp^(0+256),w
 14227  0969  1803               	skipnc
 14228  096A  29F7               	goto	l13726
 14229                           
 14230                           ;BVH2_Appl_Layer.c: 738: SIBFS_Temperature_Alarm_b.Cb54_greenTemp = 0;
 14231  096B  0021               	movlb	1	; select bank1
 14232  096C  11BD               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),3
 14233                           
 14234                           ;BVH2_Appl_Layer.c: 739: SIBFS_Temperature_Alarm_b.Cb55_redTemp = 1;
 14235  096D  163D               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),4
 14236                           
 14237                           ;BVH2_Appl_Layer.c: 740: Cb51_oTempRedAlarm = 1;
 14238  096E  0022               	movlb	2	; select bank2
 14239  096F  01BF               	clrf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256)
 14240  0970  0ABF               	incf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256),f
 14241                           
 14242                           ;BVH2_Appl_Layer.c: 741: Cb51_oTempAlarm = 1;
 14243  0971  01C0               	clrf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256)
 14244  0972  0AC0               	incf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256),f
 14245                           
 14246                           ;BVH2_Appl_Layer.c: 744: Cb51_odPumpOff = 0;
 14247  0973  01BE               	clrf	BVH2_Appl_Layer@Cb51_odPumpOff^(0+256)
 14248  0974  29F7               	goto	l13726
 14249  0975                     l1613:	
 14250                           
 14251                           ;BVH2_Appl_Layer.c: 749: else {
 14252                           ;BVH2_Appl_Layer.c: 751: if (SIBFS_Temperature_Alarm_b.Cb55_redTemp) {
 14253  0975  1E3D               	btfss	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),4
 14254  0976  2982               	goto	l1616
 14255                           
 14256                           ;BVH2_Appl_Layer.c: 755: if (ui16_mat_inpTemp > 185) {
 14257  0977  3000               	movlw	0
 14258  0978  0022               	movlb	2	; select bank2
 14259  0979  0226               	subwf	(_ui16_mat_inpTemp+1)^(0+256),w
 14260  097A  30BA               	movlw	186
 14261  097B  1903               	skipnz
 14262  097C  0225               	subwf	_ui16_mat_inpTemp^(0+256),w
 14263  097D  1C03               	skipc
 14264  097E  29F7               	goto	l13726
 14265                           
 14266                           ;BVH2_Appl_Layer.c: 758: SIBFS_Temperature_Alarm_b.Cb55_redTemp = 0;
 14267  097F  0021               	movlb	1	; select bank1
 14268  0980  123D               	bcf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),4
 14269  0981  2954               	goto	L22
 14270  0982                     l1616:	
 14271                           ;BVH2_Appl_Layer.c: 759: SIBFS_Temperature_Alarm_b.Cb54_greenTemp = 1;
 14272                           
 14273                           
 14274                           ;BVH2_Appl_Layer.c: 768: else {
 14275                           ;BVH2_Appl_Layer.c: 770: if (!(SIBFS_Temperature_Alarm_b.Cb51_Temperature_Alarm)) {
 14276  0982  183D               	btfsc	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),0
 14277  0983  29F7               	goto	l13726
 14278                           
 14279                           ;BVH2_Appl_Layer.c: 771: SIBFS_Temperature_Alarm_b.Cb51_Temperature_Alarm = 1;
 14280  0984  143D               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),0
 14281                           
 14282                           ;BVH2_Appl_Layer.c: 775: if (ui8_ResetMatlab != 0) {
 14283  0985  086F               	movf	_ui8_ResetMatlab^(0+128),w
 14284  0986  1903               	btfsc	3,2
 14285  0987  29F7               	goto	l13726
 14286                           
 14287                           ;BVH2_Appl_Layer.c: 777: SIBFS_Temperature_Alarm_b.Cb53_reset = 1;
 14288  0988  153D               	bsf	BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b^(0+128),2
 14289                           
 14290                           ;BVH2_Appl_Layer.c: 778: Cb51_Counter = 0 ;
 14291  0989  0022               	movlb	2	; select bank2
 14292  098A                     L21:	
 14293  098A  01C5               	clrf	BVH2_Appl_Layer@Cb51_Counter^(0+256)
 14294  098B  29F7               	goto	l13726
 14295  098C                     l13638:	
 14296                           
 14297                           ;BVH2_Appl_Layer.c: 792: if (Cb1_StateCnt > 50) {
 14298  098C  3000               	movlw	0
 14299  098D  0227               	subwf	(_Cb1_StateCnt+1)^(0+128),w
 14300  098E  3033               	movlw	51
 14301  098F  1903               	skipnz
 14302  0990  0226               	subwf	_Cb1_StateCnt^(0+128),w
 14303  0991  1C03               	skipc
 14304  0992  2999               	goto	l13648
 14305                           
 14306                           ;BVH2_Appl_Layer.c: 795: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int)
 14307                           ;BVH2_Appl_Layer.c: 796: (UInt8)5;
 14308  0993  0845               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 14309                           
 14310                           ;BVH2_Appl_Layer.c: 797: Cb1_oShutoff = 0;
 14311                           
 14312                           ;BVH2_Appl_Layer.c: 798: Cb1_oCurrentAlarm = 0;
 14313  0994  27E4  3188         	fcall	PL94	;call to abstracted procedure
 14314  0996                     l13646:	
 14315                           
 14316                           ;BVH2_Appl_Layer.c: 799: Cb1_RestartCounter = 0 ;
 14317  0996  0022               	movlb	2	; select bank2
 14318  0997  01D1               	clrf	_Cb1_RestartCounter^(0+256)
 14319                           
 14320                           ;BVH2_Appl_Layer.c: 800: }
 14321  0998  2A10               	goto	l1625
 14322  0999                     l13648:	
 14323                           
 14324                           ;BVH2_Appl_Layer.c: 801: else {
 14325                           ;BVH2_Appl_Layer.c: 802: Cb1_StateCnt = Cb1_StateCnt + 1 ;
 14326  0999  0826               	movf	_Cb1_StateCnt^(0+128),w
 14327  099A  3E01               	addlw	1
 14328  099B  00A6               	movwf	_Cb1_StateCnt^(0+128)
 14329  099C  3000               	movlw	0
 14330  099D  3D27               	addwfc	(_Cb1_StateCnt+1)^(0+128),w
 14331  099E  00A7               	movwf	(_Cb1_StateCnt+1)^(0+128)
 14332  099F  2A10               	goto	l1625
 14333  09A0                     l13650:	
 14334                           
 14335                           ;BVH2_Appl_Layer.c: 810: Cb1_Current_An___High_node_fcn1();
 14336  09A0  261B  3188         	fcall	_Cb1_Current_An___High_node_fcn1
 14337                           
 14338                           ;BVH2_Appl_Layer.c: 811: if (SIBFS_Current_Analysis_High_b.Cb1_glflag <= 2) {
 14339  09A2  0E45               	swapf	_SIBFS_Current_Analysis_High_b^(0+128),w
 14340  09A3  3903               	andlw	3
 14341  09A4  3A03               	xorlw	3
 14342  09A5  1D03               	btfss	3,2
 14343  09A6  2999               	goto	l13648
 14344  09A7  2A10               	goto	l1625
 14345  09A8                     l13656:	
 14346                           
 14347                           ;BVH2_Appl_Layer.c: 820: if (Cb1_RestartCounter < 10) {
 14348  09A8  300A               	movlw	10
 14349  09A9  0022               	movlb	2	; select bank2
 14350  09AA  0251               	subwf	_Cb1_RestartCounter^(0+256),w
 14351  09AB  1803               	skipnc
 14352  09AC  2A10               	goto	l1625
 14353  09AD                     l13658:	
 14354                           
 14355                           ;BVH2_Appl_Layer.c: 823: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int)
 14356                           ;BVH2_Appl_Layer.c: 824: (UInt8)3;
 14357  09AD  0021               	movlb	1	; select bank1
 14358  09AE  0845               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 14359  09AF  39F0               	andlw	-16
 14360  09B0  3803               	iorlw	3
 14361  09B1  00C5               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 14362                           
 14363                           ;BVH2_Appl_Layer.c: 825: Cb1_oShutoff = 0;
 14364  09B2  0022               	movlb	2	; select bank2
 14365  09B3  01CF               	clrf	_Cb1_oShutoff^(0+256)
 14366                           
 14367                           ;BVH2_Appl_Layer.c: 826: Cb1_oCurrentAlarm = 0;
 14368  09B4  01D0               	clrf	_Cb1_oCurrentAlarm^(0+256)
 14369  09B5                     l13664:	
 14370                           
 14371                           ;BVH2_Appl_Layer.c: 827: Cb1_StateCnt = 0 ;
 14372  09B5  0021               	movlb	1	; select bank1
 14373  09B6  01A6               	clrf	_Cb1_StateCnt^(0+128)
 14374  09B7  01A7               	clrf	(_Cb1_StateCnt+1)^(0+128)
 14375  09B8  2A10               	goto	l1625
 14376  09B9                     l13666:	
 14377                           
 14378                           ;BVH2_Appl_Layer.c: 835: Cb1_Current_An___High_node_fcn1();
 14379  09B9  261B  3188         	fcall	_Cb1_Current_An___High_node_fcn1
 14380                           
 14381                           ;BVH2_Appl_Layer.c: 838: break;
 14382  09BB  2A10               	goto	l1625
 14383  09BC                     l13668:	
 14384                           
 14385                           ;BVH2_Appl_Layer.c: 842: if (Cb1_StateCnt > 200) {
 14386  09BC  3000               	movlw	0
 14387  09BD  0227               	subwf	(_Cb1_StateCnt+1)^(0+128),w
 14388  09BE  30C9               	movlw	201
 14389  09BF  1903               	skipnz
 14390  09C0  0226               	subwf	_Cb1_StateCnt^(0+128),w
 14391  09C1  1C03               	skipc
 14392  09C2  29CA               	goto	l13674
 14393                           
 14394                           ;BVH2_Appl_Layer.c: 844: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int)
 14395                           ;BVH2_Appl_Layer.c: 845: (UInt8)7;
 14396  09C3  0845               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 14397  09C4  39F0               	andlw	-16
 14398  09C5  3807               	iorlw	7
 14399  09C6  00C5               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 14400                           
 14401                           ;BVH2_Appl_Layer.c: 846: Cb1_RestartCounter = Cb1_RestartCounter + 1 ;
 14402  09C7  0022               	movlb	2	; select bank2
 14403  09C8  0AD1               	incf	_Cb1_RestartCounter^(0+256),f
 14404                           
 14405                           ;BVH2_Appl_Layer.c: 847: }
 14406  09C9  2A10               	goto	l1625
 14407  09CA                     l13674:	
 14408                           
 14409                           ;BVH2_Appl_Layer.c: 848: else {
 14410                           ;BVH2_Appl_Layer.c: 851: if (bool_mat_currAlarm_bldc) {
 14411  09CA  084A               	movf	_bool_mat_currAlarm_bldc^(0+128),w
 14412  09CB  1903               	btfsc	3,2
 14413  09CC  2999               	goto	l13648
 14414  09CD                     l13676:	
 14415                           
 14416                           ;BVH2_Appl_Layer.c: 853: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int)
 14417                           ;BVH2_Appl_Layer.c: 854: (UInt8)1;
 14418  09CD  0845               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 14419  09CE  39F0               	andlw	-16
 14420  09CF  3801               	iorlw	1
 14421  09D0  00C5               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 14422                           
 14423                           ;BVH2_Appl_Layer.c: 855: Cb1_StateCnt = 0 ;
 14424  09D1  01A6               	clrf	_Cb1_StateCnt^(0+128)
 14425  09D2  01A7               	clrf	(_Cb1_StateCnt+1)^(0+128)
 14426                           
 14427                           ;BVH2_Appl_Layer.c: 856: Cb1_oShutoff = 0;
 14428  09D3  0022               	movlb	2	; select bank2
 14429  09D4  01CF               	clrf	_Cb1_oShutoff^(0+256)
 14430                           
 14431                           ;BVH2_Appl_Layer.c: 857: Cb1_oCurrentAlarm = 0;
 14432  09D5  01D0               	clrf	_Cb1_oCurrentAlarm^(0+256)
 14433                           
 14434                           ;BVH2_Appl_Layer.c: 858: }
 14435  09D6  2A10               	goto	l1625
 14436  09D7                     l13686:	
 14437                           
 14438                           ;BVH2_Appl_Layer.c: 872: if (!(bool_mat_currAlarm_bldc)) {
 14439  09D7  084A               	movf	_bool_mat_currAlarm_bldc^(0+128),w
 14440  09D8  1903               	btfsc	3,2
 14441  09D9  29AD               	goto	l13658
 14442                           
 14443                           ;BVH2_Appl_Layer.c: 880: else {
 14444                           ;BVH2_Appl_Layer.c: 881: if (Cb1_StateCnt > 1) {
 14445  09DA  3000               	movlw	0
 14446  09DB  0227               	subwf	(_Cb1_StateCnt+1)^(0+128),w
 14447  09DC  3002               	movlw	2
 14448  09DD  1903               	skipnz
 14449  09DE  0226               	subwf	_Cb1_StateCnt^(0+128),w
 14450  09DF  1803               	btfsc	3,0
 14451  09E0  29CD               	goto	l13676
 14452  09E1  2999               	goto	l13648
 14453  09E2                     l13708:	
 14454                           
 14455                           ;BVH2_Appl_Layer.c: 902: if (!(bool_mat_currAlarm_bldc)) {
 14456  09E2  084A               	movf	_bool_mat_currAlarm_bldc^(0+128),w
 14457  09E3  1D03               	btfss	3,2
 14458  09E4  2999               	goto	l13648
 14459                           
 14460                           ;BVH2_Appl_Layer.c: 905: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int) (UInt8)4;
 14461  09E5  0845               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 14462  09E6  39F0               	andlw	-16
 14463  09E7  3804               	iorlw	4
 14464  09E8  00C5               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 14465  09E9  29B5               	goto	l13664
 14466  09EA                     l1644:	
 14467                           ;BVH2_Appl_Layer.c: 914: }
 14468                           ;BVH2_Appl_Layer.c: 915: default: {
 14469                           
 14470                           
 14471                           ;BVH2_Appl_Layer.c: 917: if (!(SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High))
      +                           {
 14472  09EA  1B45               	btfsc	_SIBFS_Current_Analysis_High_b^(0+128),6
 14473  09EB  2A10               	goto	l1625
 14474                           
 14475                           ;BVH2_Appl_Layer.c: 918: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High = 1;
 14476  09EC  1745               	bsf	_SIBFS_Current_Analysis_High_b^(0+128),6
 14477                           
 14478                           ;BVH2_Appl_Layer.c: 922: if (ui8_ResetMatlab != 0) {
 14479  09ED  086F               	movf	_ui8_ResetMatlab^(0+128),w
 14480  09EE  1903               	btfsc	3,2
 14481  09EF  2A10               	goto	l1625
 14482                           
 14483                           ;BVH2_Appl_Layer.c: 924: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (u
      +                          nsigned int)
 14484                           ;BVH2_Appl_Layer.c: 925: (UInt8)6;
 14485  09F0  0845               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 14486  09F1  39F0               	andlw	-16
 14487  09F2  3806               	iorlw	6
 14488  09F3  00C5               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 14489                           
 14490                           ;BVH2_Appl_Layer.c: 926: Cb1_StateCnt = 0 ;
 14491  09F4  01A6               	clrf	_Cb1_StateCnt^(0+128)
 14492  09F5  01A7               	clrf	(_Cb1_StateCnt+1)^(0+128)
 14493  09F6  2996               	goto	l13646
 14494  09F7                     l13726:	
 14495  09F7  0021               	movlb	1	; select bank1
 14496  09F8  0845               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 14497  09F9  390F               	andlw	15
 14498                           
 14499                           ; Switch size 1, requested type "space"
 14500                           ; Number of cases is 7, Range of values is 1 to 7
 14501                           ; switch strategies available:
 14502                           ; Name         Instructions Cycles
 14503                           ; simple_byte           22    12 (average)
 14504                           ; direct_byte           23     9 (fixed)
 14505                           ; jumptable            263     9 (fixed)
 14506                           ;	Chosen strategy is simple_byte
 14507  09FA  3A01               	xorlw	1	; case 1
 14508  09FB  1903               	skipnz
 14509  09FC  29E2               	goto	l13708
 14510  09FD  3A03               	xorlw	3	; case 2
 14511  09FE  1903               	skipnz
 14512  09FF  29D7               	goto	l13686
 14513  0A00  3A01               	xorlw	1	; case 3
 14514  0A01  1903               	skipnz
 14515  0A02  29A0               	goto	l13650
 14516  0A03  3A07               	xorlw	7	; case 4
 14517  0A04  1903               	skipnz
 14518  0A05  29BC               	goto	l13668
 14519  0A06  3A01               	xorlw	1	; case 5
 14520  0A07  1903               	skipnz
 14521  0A08  29B9               	goto	l13666
 14522  0A09  3A03               	xorlw	3	; case 6
 14523  0A0A  1903               	skipnz
 14524  0A0B  298C               	goto	l13638
 14525  0A0C  3A01               	xorlw	1	; case 7
 14526  0A0D  1903               	skipnz
 14527  0A0E  29A8               	goto	l13656
 14528  0A0F  29EA               	goto	l1644
 14529  0A10                     l1625:	
 14530                           
 14531                           ;BVH2_Appl_Layer.c: 934: Sb1_Logical_Operator1 = Sb1_Logical_Operator2 || Cb56_odPumpOff
      +                           || Cb51_odPumpOff ||
 14532                           ;BVH2_Appl_Layer.c: 935: Cb1_oShutoff || Cb44_oShutoff;
 14533  0A10  0024               	movlb	4	; select bank4
 14534  0A11  01AA               	clrf	_BVH2_Appl_Layer$1209^(0+512)
 14535  0A12  0AAA               	incf	_BVH2_Appl_Layer$1209^(0+512),f
 14536  0A13  0828               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator2^(0+512),w
 14537  0A14  1D03               	btfss	3,2
 14538  0A15  2A25               	goto	l13740
 14539  0A16  0022               	movlb	2	; select bank2
 14540  0A17  0847               	movf	_Cb56_odPumpOff^(0+256),w
 14541  0A18  1D03               	btfss	3,2
 14542  0A19  2A25               	goto	l13740
 14543  0A1A  083E               	movf	BVH2_Appl_Layer@Cb51_odPumpOff^(0+256),w
 14544  0A1B  1D03               	btfss	3,2
 14545  0A1C  2A25               	goto	l13740
 14546  0A1D  084F               	movf	_Cb1_oShutoff^(0+256),w
 14547  0A1E  1D03               	btfss	3,2
 14548  0A1F  2A25               	goto	l13740
 14549  0A20  0849               	movf	_Cb44_oShutoff^(0+256),w
 14550  0A21  1D03               	btfss	3,2
 14551  0A22  2A25               	goto	l13740
 14552  0A23  0024               	movlb	4	; select bank4
 14553  0A24  01AA               	clrf	_BVH2_Appl_Layer$1209^(0+512)
 14554  0A25                     l13740:	
 14555  0A25  0024               	movlb	4	; select bank4
 14556  0A26  082A               	movf	_BVH2_Appl_Layer$1209^(0+512),w
 14557  0A27  00BB               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+512)
 14558                           
 14559                           ;BVH2_Appl_Layer.c: 938: Cb24_Reset = ui8_ResetMatlab != 0 ;
 14560  0A28  0021               	movlb	1	; select bank1
 14561  0A29  086F               	movf	_ui8_ResetMatlab^(0+128),w
 14562  0A2A  1903               	btfsc	3,2
 14563  0A2B  2A2E               	goto	u12160
 14564  0A2C  3001               	movlw	1
 14565  0A2D  2A2F               	goto	u12170
 14566  0A2E                     u12160:	
 14567  0A2E  3000               	movlw	0
 14568  0A2F                     u12170:	
 14569  0A2F  0024               	movlb	4	; select bank4
 14570  0A30  00B3               	movwf	BVH2_Appl_Layer@Cb24_Reset^(0+512)
 14571                           
 14572                           ;BVH2_Appl_Layer.c: 943: if (SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine) {
 14573  0A31  0021               	movlb	1	; select bank1
 14574  0A32  1F20               	btfss	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
 14575  0A33  2B28               	goto	l1649
 14576                           
 14577                           ;BVH2_Appl_Layer.c: 949: if (Sb1_Logical_Operator1 || Cb24_Reset) {
 14578  0A34  0024               	movlb	4	; select bank4
 14579  0A35  083B               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+512),w
 14580  0A36  1D03               	btfss	3,2
 14581  0A37  2A43               	goto	l13766
 14582  0A38  0833               	movf	BVH2_Appl_Layer@Cb24_Reset^(0+512),w
 14583  0A39  1D03               	btfss	3,2
 14584  0A3A  2A43               	goto	l13766
 14585  0A3B  2B11               	goto	l13884
 14586  0A3C                     l13750:	
 14587                           
 14588                           ;BVH2_Appl_Layer.c: 954: Cb24_StateCnt = 0 ;
 14589  0A3C  0020               	movlb	0	; select bank0
 14590  0A3D  01D4               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
 14591  0A3E  01D5               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
 14592  0A3F                     l13752:	
 14593                           
 14594                           ;BVH2_Appl_Layer.c: 955: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = 0 ;
 14595  0A3F  30F8               	movlw	-8
 14596  0A40  0021               	movlb	1	; select bank1
 14597  0A41  05A0               	andwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
 14598                           
 14599                           ;BVH2_Appl_Layer.c: 956: break;
 14600  0A42  2A59               	goto	l1655
 14601  0A43                     l13766:	
 14602  0A43  0021               	movlb	1	; select bank1
 14603  0A44  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 14604  0A45  3907               	andlw	7
 14605                           
 14606                           ; Switch size 1, requested type "space"
 14607                           ; Number of cases is 6, Range of values is 1 to 6
 14608                           ; switch strategies available:
 14609                           ; Name         Instructions Cycles
 14610                           ; simple_byte           19    10 (average)
 14611                           ; direct_byte           21     9 (fixed)
 14612                           ; jumptable            263     9 (fixed)
 14613                           ;	Chosen strategy is simple_byte
 14614  0A46  3A01               	xorlw	1	; case 1
 14615  0A47  1903               	skipnz
 14616  0A48  2A3F               	goto	l13752
 14617  0A49  3A03               	xorlw	3	; case 2
 14618  0A4A  1903               	skipnz
 14619  0A4B  2A3F               	goto	l13752
 14620  0A4C  3A01               	xorlw	1	; case 3
 14621  0A4D  1903               	skipnz
 14622  0A4E  2A3C               	goto	l13750
 14623  0A4F  3A07               	xorlw	7	; case 4
 14624  0A50  1903               	skipnz
 14625  0A51  2A3F               	goto	l13752
 14626  0A52  3A01               	xorlw	1	; case 5
 14627  0A53  1903               	skipnz
 14628  0A54  2A3F               	goto	l13752
 14629  0A55  3A03               	xorlw	3	; case 6
 14630  0A56  1903               	skipnz
 14631  0A57  2A3F               	goto	l13752
 14632  0A58  2A59               	goto	l1655
 14633  0A59                     l1655:	
 14634                           
 14635                           ;BVH2_Appl_Layer.c: 979: SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine = 0;
 14636  0A59  1320               	bcf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
 14637  0A5A  2B45               	goto	L34
 14638  0A5B                     l13770:	
 14639                           ;BVH2_Appl_Layer.c: 984: }
 14640                           
 14641                           ;BVH2_Appl_Layer.c: 980: SIBFS_Motor_Stalled_b.Cb32_default = 1;
 14642                           
 14643                           
 14644                           ;BVH2_Appl_Layer.c: 990: if (Cb24_StateCnt) {
 14645  0A5B  0020               	movlb	0	; select bank0
 14646  0A5C  0854               	movf	BVH2_Appl_Layer@Cb24_StateCnt,w
 14647  0A5D  0455               	iorwf	BVH2_Appl_Layer@Cb24_StateCnt+1,w
 14648  0A5E  1903               	btfsc	3,2
 14649  0A5F  2AAF               	goto	L24
 14650                           
 14651                           ;BVH2_Appl_Layer.c: 994: Cb24_StateCnt = 0 ;
 14652  0A60  01D4               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
 14653  0A61  01D5               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
 14654  0A62                     l13774:	
 14655                           
 14656                           ;BVH2_Appl_Layer.c: 995: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsign
      +                          ed int)
 14657                           ;BVH2_Appl_Layer.c: 996: (UInt8)2;
 14658  0A62  0021               	movlb	1	; select bank1
 14659  0A63  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 14660  0A64  39F8               	andlw	-8
 14661  0A65  3802               	iorlw	2
 14662  0A66  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 14663                           
 14664                           ;BVH2_Appl_Layer.c: 997: }
 14665  0A67  2B4A               	goto	l13906
 14666  0A68                     l13778:	
 14667                           ;BVH2_Appl_Layer.c: 998: else {
 14668                           ;BVH2_Appl_Layer.c: 999: Cb24_StateCnt = Cb24_StateCnt + 1 ;
 14669                           
 14670                           
 14671                           ;BVH2_Appl_Layer.c: 1009: if (Cb24_StateCnt > 1000) {
 14672  0A68  3003               	movlw	3
 14673  0A69  0020               	movlb	0	; select bank0
 14674  0A6A  0255               	subwf	BVH2_Appl_Layer@Cb24_StateCnt+1,w
 14675  0A6B  30E9               	movlw	233
 14676  0A6C  1903               	skipnz
 14677  0A6D  0254               	subwf	BVH2_Appl_Layer@Cb24_StateCnt,w
 14678  0A6E  1C03               	skipc
 14679  0A6F  2A76               	goto	l13790
 14680                           
 14681                           ;BVH2_Appl_Layer.c: 1012: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int)
 14682                           ;BVH2_Appl_Layer.c: 1013: (UInt8)5;
 14683                           
 14684                           ;BVH2_Appl_Layer.c: 1014: Cb24_StateCnt = 0 ;
 14685                           
 14686                           ;BVH2_Appl_Layer.c: 1015: Cb24_BadCnt = 0 ;
 14687  0A70  27AE  3188         	fcall	PL54	;call to abstracted procedure
 14688  0A72                     l13786:	
 14689                           
 14690                           ;BVH2_Appl_Layer.c: 1016: Cb24_oMotorStalled = 0;
 14691  0A72  0022               	movlb	2	; select bank2
 14692  0A73  01C2               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
 14693                           
 14694                           ;BVH2_Appl_Layer.c: 1019: Cb24_oStalledAlarm = 0;
 14695  0A74  01C1               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 14696                           
 14697                           ;BVH2_Appl_Layer.c: 1020: }
 14698  0A75  2B4A               	goto	l13906
 14699  0A76                     l13790:	
 14700                           
 14701                           ;BVH2_Appl_Layer.c: 1021: else {
 14702                           ;BVH2_Appl_Layer.c: 1024: if ((ui16_Speed_mat < 5) || (ui16_Speed_mat > 300)) {
 14703  0A76  3000               	movlw	0
 14704  0A77  0257               	subwf	_ui16_Speed_mat+1,w
 14705  0A78  3005               	movlw	5
 14706  0A79  1903               	skipnz
 14707  0A7A  0256               	subwf	_ui16_Speed_mat,w
 14708  0A7B  1C03               	skipc
 14709  0A7C  2A84               	goto	l13794
 14710  0A7D  3001               	movlw	1
 14711  0A7E  0257               	subwf	_ui16_Speed_mat+1,w
 14712  0A7F  302D               	movlw	45
 14713  0A80  1903               	skipnz
 14714  0A81  0256               	subwf	_ui16_Speed_mat,w
 14715  0A82  1C03               	skipc
 14716  0A83  2AAF               	goto	L24
 14717  0A84                     l13794:	
 14718                           
 14719                           ;BVH2_Appl_Layer.c: 1027: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int)
 14720                           ;BVH2_Appl_Layer.c: 1028: (UInt8)1;
 14721  0A84  0021               	movlb	1	; select bank1
 14722  0A85  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 14723  0A86  39F8               	andlw	-8
 14724  0A87  3801               	iorlw	1
 14725  0A88  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 14726                           
 14727                           ;BVH2_Appl_Layer.c: 1029: Cb24_oStalledAlarm = 0;
 14728  0A89  0022               	movlb	2	; select bank2
 14729  0A8A  01C1               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 14730                           
 14731                           ;BVH2_Appl_Layer.c: 1030: Cb24_StateCnt = 0 ;
 14732  0A8B  0020               	movlb	0	; select bank0
 14733  0A8C  01D4               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
 14734  0A8D  01D5               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
 14735                           
 14736                           ;BVH2_Appl_Layer.c: 1031: }
 14737  0A8E  2B4A               	goto	l13906
 14738  0A8F                     l13802:	
 14739                           
 14740                           ;BVH2_Appl_Layer.c: 1044: if (Cb24_BadCnt > 100) {
 14741  0A8F  3000               	movlw	0
 14742  0A90  0023               	movlb	3	; select bank3
 14743  0A91  0243               	subwf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384),w
 14744  0A92  3065               	movlw	101
 14745  0A93  1903               	skipnz
 14746  0A94  0242               	subwf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384),w
 14747  0A95  1C03               	skipc
 14748  0A96  2A9A               	goto	l13812
 14749                           
 14750                           ;BVH2_Appl_Layer.c: 1047: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int)
 14751                           ;BVH2_Appl_Layer.c: 1048: (UInt8)4;
 14752                           
 14753                           ;BVH2_Appl_Layer.c: 1049: Cb24_StateCnt = 0 ;
 14754  0A97  27C4  3188         	fcall	PL68	;call to abstracted procedure
 14755  0A99  2A72               	goto	l13786
 14756  0A9A                     l13812:	
 14757                           
 14758                           ;BVH2_Appl_Layer.c: 1053: else {
 14759                           ;BVH2_Appl_Layer.c: 1056: if ((ui16_Speed_mat >= 5) && (ui16_Speed_mat <= 300)) {
 14760  0A9A  27FC  3188         	fcall	PL130	;call to abstracted procedure
 14761  0A9C  1903               	skipnz
 14762  0A9D  0256               	subwf	_ui16_Speed_mat,w
 14763  0A9E  1C03               	skipc
 14764  0A9F  2AA7               	goto	l13818
 14765  0AA0  3001               	movlw	1
 14766  0AA1  0257               	subwf	_ui16_Speed_mat+1,w
 14767  0AA2  302D               	movlw	45
 14768  0AA3  1903               	skipnz
 14769  0AA4  0256               	subwf	_ui16_Speed_mat,w
 14770  0AA5  1C03               	btfss	3,0
 14771  0AA6  2A62               	goto	l13774
 14772  0AA7                     l13818:	
 14773                           
 14774                           ;BVH2_Appl_Layer.c: 1062: else {
 14775                           ;BVH2_Appl_Layer.c: 1063: Cb24_BadCnt = Cb24_BadCnt + 1 ;
 14776  0AA7  0023               	movlb	3	; select bank3
 14777  0AA8  0842               	movf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384),w
 14778  0AA9  3E01               	addlw	1
 14779  0AAA  00C2               	movwf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384)
 14780  0AAB  3000               	movlw	0
 14781  0AAC  3D43               	addwfc	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384),w
 14782  0AAD  00C3               	movwf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384)
 14783                           
 14784                           ;BVH2_Appl_Layer.c: 1064: Cb24_StateCnt = Cb24_StateCnt + 1 ;
 14785  0AAE  0020               	movlb	0	; select bank0
 14786  0AAF                     L24:	
 14787  0AAF  0854               	movf	BVH2_Appl_Layer@Cb24_StateCnt,w
 14788  0AB0  3E01               	addlw	1
 14789  0AB1  00D4               	movwf	BVH2_Appl_Layer@Cb24_StateCnt
 14790  0AB2  3000               	movlw	0
 14791  0AB3  3D55               	addwfc	BVH2_Appl_Layer@Cb24_StateCnt+1,w
 14792  0AB4  00D5               	movwf	BVH2_Appl_Layer@Cb24_StateCnt+1
 14793  0AB5  2B4A               	goto	l13906
 14794  0AB6                     l13822:	
 14795                           
 14796                           ;BVH2_Appl_Layer.c: 1089: if (Cb24_StateCnt > 10) {
 14797  0AB6  3000               	movlw	0
 14798  0AB7  0020               	movlb	0	; select bank0
 14799  0AB8  0255               	subwf	BVH2_Appl_Layer@Cb24_StateCnt+1,w
 14800  0AB9  300B               	movlw	11
 14801  0ABA  1903               	skipnz
 14802  0ABB  0254               	subwf	BVH2_Appl_Layer@Cb24_StateCnt,w
 14803  0ABC  1C03               	skipc
 14804  0ABD  2AF3               	goto	l13864
 14805                           
 14806                           ;BVH2_Appl_Layer.c: 1090: if (Cb24_RestartCounter == 10) {
 14807  0ABE  300A               	movlw	10
 14808  0ABF  0022               	movlb	2	; select bank2
 14809  0AC0  0646               	xorwf	BVH2_Appl_Layer@Cb24_RestartCounter^(0+256),w
 14810  0AC1  1D03               	btfss	3,2
 14811  0AC2  2ACD               	goto	l13836
 14812                           
 14813                           ;BVH2_Appl_Layer.c: 1092: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = 0 ;
 14814  0AC3  30F8               	movlw	-8
 14815  0AC4  0021               	movlb	1	; select bank1
 14816  0AC5  05A0               	andwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
 14817                           
 14818                           ;BVH2_Appl_Layer.c: 1093: SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine = 0;
 14819  0AC6  1320               	bcf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
 14820                           
 14821                           ;BVH2_Appl_Layer.c: 1094: SIBFS_Motor_Stalled_b.Cb33_Stop = 0;
 14822  0AC7  1021               	bcf	(BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)+1),0
 14823                           
 14824                           ;BVH2_Appl_Layer.c: 1095: Cb24_oStalledAlarm = 0;
 14825  0AC8  0022               	movlb	2	; select bank2
 14826  0AC9  3018               	movlw	24
 14827  0ACA  01C1               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 14828  0ACB  01C2               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
 14829  0ACC  2AEA               	goto	L26
 14830  0ACD                     l13836:	
 14831                           ;BVH2_Appl_Layer.c: 1098: }
 14832                           
 14833                           ;BVH2_Appl_Layer.c: 1097: SIBFS_Motor_Stalled_b.Cb24_glflag = 3 ;
 14834                           
 14835                           
 14836                           ;BVH2_Appl_Layer.c: 1099: else {
 14837                           ;BVH2_Appl_Layer.c: 1102: if ((ui16_Speed_mat < 5) || (ui16_Speed_mat > 300)) {
 14838  0ACD  27FC  3188         	fcall	PL130	;call to abstracted procedure
 14839  0ACF  1903               	skipnz
 14840  0AD0  0256               	subwf	_ui16_Speed_mat,w
 14841  0AD1  1C03               	skipc
 14842  0AD2  2ADA               	goto	l13840
 14843  0AD3  3001               	movlw	1
 14844  0AD4  0257               	subwf	_ui16_Speed_mat+1,w
 14845  0AD5  302D               	movlw	45
 14846  0AD6  1903               	skipnz
 14847  0AD7  0256               	subwf	_ui16_Speed_mat,w
 14848  0AD8  1C03               	skipc
 14849  0AD9  2ADD               	goto	l13850
 14850  0ADA                     l13840:	
 14851                           
 14852                           ;BVH2_Appl_Layer.c: 1105: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int)
 14853                           ;BVH2_Appl_Layer.c: 1106: (UInt8)4;
 14854                           
 14855                           ;BVH2_Appl_Layer.c: 1107: Cb24_StateCnt = 0 ;
 14856  0ADA  27C4  3188         	fcall	PL68	;call to abstracted procedure
 14857  0ADC  2AE6               	goto	L37
 14858  0ADD                     l13850:	
 14859                           ;BVH2_Appl_Layer.c: 1111: }
 14860                           
 14861                           ;BVH2_Appl_Layer.c: 1110: SIBFS_Motor_Stalled_b.Cb24_glflag = 3 ;
 14862                           
 14863                           ;BVH2_Appl_Layer.c: 1109: Cb24_oStalledAlarm = 0;
 14864                           
 14865                           ;BVH2_Appl_Layer.c: 1108: Cb24_oMotorStalled = 0;
 14866                           
 14867                           
 14868                           ;BVH2_Appl_Layer.c: 1112: else {
 14869                           ;BVH2_Appl_Layer.c: 1113: if (Cb24_StateCnt > 200) {
 14870  0ADD  3000               	movlw	0
 14871  0ADE  0255               	subwf	BVH2_Appl_Layer@Cb24_StateCnt+1,w
 14872  0ADF  30C9               	movlw	201
 14873  0AE0  1903               	skipnz
 14874  0AE1  0254               	subwf	BVH2_Appl_Layer@Cb24_StateCnt,w
 14875  0AE2  1C03               	skipc
 14876  0AE3  2AED               	goto	l13862
 14877                           
 14878                           ;BVH2_Appl_Layer.c: 1116: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int)
 14879                           ;BVH2_Appl_Layer.c: 1117: (UInt8)5;
 14880                           
 14881                           ;BVH2_Appl_Layer.c: 1118: Cb24_StateCnt = 0 ;
 14882                           
 14883                           ;BVH2_Appl_Layer.c: 1119: Cb24_BadCnt = 0 ;
 14884  0AE4  27AE  3188         	fcall	PL54	;call to abstracted procedure
 14885  0AE6                     L37:	
 14886                           
 14887                           ;BVH2_Appl_Layer.c: 1120: Cb24_oMotorStalled = 0;
 14888  0AE6  0022               	movlb	2	; select bank2
 14889  0AE7  3018               	movlw	24
 14890  0AE8  01C2               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
 14891  0AE9  01C1               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 14892  0AEA                     L26:	
 14893                           
 14894                           ;BVH2_Appl_Layer.c: 1124: SIBFS_Motor_Stalled_b.Cb24_glflag = 3 ;
 14895  0AEA  0021               	movlb	1	; select bank1
 14896  0AEB  04A0               	iorwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
 14897                           
 14898                           ;BVH2_Appl_Layer.c: 1125: }
 14899  0AEC  2AF6               	goto	l1690
 14900  0AED                     l13862:	
 14901                           
 14902                           ;BVH2_Appl_Layer.c: 1126: else {
 14903                           ;BVH2_Appl_Layer.c: 1127: SIBFS_Motor_Stalled_b.Cb24_glflag = 1 ;
 14904  0AED  0021               	movlb	1	; select bank1
 14905  0AEE  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 14906  0AEF  39E7               	andlw	-25
 14907  0AF0  3808               	iorlw	8
 14908  0AF1  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 14909  0AF2  2AF6               	goto	l1690
 14910  0AF3                     l13864:	
 14911                           
 14912                           ;BVH2_Appl_Layer.c: 1132: else {
 14913                           ;BVH2_Appl_Layer.c: 1133: SIBFS_Motor_Stalled_b.Cb24_glflag = 0 ;
 14914  0AF3  30E7               	movlw	-25
 14915  0AF4  0021               	movlb	1	; select bank1
 14916  0AF5  05A0               	andwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),f
 14917  0AF6                     l1690:	
 14918                           
 14919                           ;BVH2_Appl_Layer.c: 1134: }
 14920                           ;BVH2_Appl_Layer.c: 1135: if (SIBFS_Motor_Stalled_b.Cb24_glflag <= 2) {
 14921  0AF6  0C20               	rrf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 14922  0AF7  27EB  3188         	fcall	PL98	;call to abstracted procedure
 14923  0AF9  1D03               	btfss	3,2
 14924  0AFA  2AAF               	goto	L24
 14925  0AFB  2B4A               	goto	l13906
 14926  0AFC                     l13868:	
 14927                           
 14928                           ;BVH2_Appl_Layer.c: 1146: if (Cb24_StateCnt > 200) {
 14929  0AFC  3000               	movlw	0
 14930  0AFD  0020               	movlb	0	; select bank0
 14931  0AFE  0255               	subwf	BVH2_Appl_Layer@Cb24_StateCnt+1,w
 14932  0AFF  30C9               	movlw	201
 14933  0B00  1903               	skipnz
 14934  0B01  0254               	subwf	BVH2_Appl_Layer@Cb24_StateCnt,w
 14935  0B02  1C03               	skipc
 14936  0B03  2AAF               	goto	L24
 14937                           
 14938                           ;BVH2_Appl_Layer.c: 1150: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int)
 14939                           ;BVH2_Appl_Layer.c: 1151: (UInt8)6;
 14940  0B04  0021               	movlb	1	; select bank1
 14941  0B05  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 14942  0B06  39F8               	andlw	-8
 14943  0B07  3806               	iorlw	6
 14944  0B08  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 14945                           
 14946                           ;BVH2_Appl_Layer.c: 1152: Cb24_StateCnt = 0 ;
 14947  0B09  0020               	movlb	0	; select bank0
 14948  0B0A  01D4               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
 14949  0B0B  01D5               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
 14950                           
 14951                           ;BVH2_Appl_Layer.c: 1153: Cb24_oMotorStalled = 0;
 14952  0B0C  0022               	movlb	2	; select bank2
 14953  0B0D  01C2               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
 14954                           
 14955                           ;BVH2_Appl_Layer.c: 1154: Cb24_oStalledAlarm = 0;
 14956  0B0E  01C1               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 14957                           
 14958                           ;BVH2_Appl_Layer.c: 1155: Cb24_RestartCounter = Cb24_RestartCounter + 1 ;
 14959  0B0F  0AC6               	incf	BVH2_Appl_Layer@Cb24_RestartCounter^(0+256),f
 14960                           
 14961                           ;BVH2_Appl_Layer.c: 1156: }
 14962  0B10  2B4A               	goto	l13906
 14963  0B11                     l13884:	
 14964  0B11  0021               	movlb	1	; select bank1
 14965  0B12  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 14966  0B13  3907               	andlw	7
 14967                           
 14968                           ; Switch size 1, requested type "space"
 14969                           ; Number of cases is 6, Range of values is 1 to 6
 14970                           ; switch strategies available:
 14971                           ; Name         Instructions Cycles
 14972                           ; simple_byte           19    10 (average)
 14973                           ; direct_byte           21     9 (fixed)
 14974                           ; jumptable            263     9 (fixed)
 14975                           ;	Chosen strategy is simple_byte
 14976  0B14  3A01               	xorlw	1	; case 1
 14977  0B15  1903               	skipnz
 14978  0B16  2A8F               	goto	l13802
 14979  0B17  3A03               	xorlw	3	; case 2
 14980  0B18  1903               	skipnz
 14981  0B19  2A68               	goto	l13778
 14982  0B1A  3A01               	xorlw	1	; case 3
 14983  0B1B  1903               	skipnz
 14984  0B1C  2A5B               	goto	l13770
 14985  0B1D  3A07               	xorlw	7	; case 4
 14986  0B1E  1903               	skipnz
 14987  0B1F  2AFC               	goto	l13868
 14988  0B20  3A01               	xorlw	1	; case 5
 14989  0B21  1903               	skipnz
 14990  0B22  2A62               	goto	l13774
 14991  0B23  3A03               	xorlw	3	; case 6
 14992  0B24  1903               	skipnz
 14993  0B25  2AB6               	goto	l13822
 14994  0B26  2B4A               	goto	l13906
 14995                           
 14996                           ;BVH2_Appl_Layer.c: 1166: }
 14997                           ;BVH2_Appl_Layer.c: 1169: }
 14998  0B27  2B4A               	goto	l13906
 14999  0B28                     l1649:	
 15000                           
 15001                           ;BVH2_Appl_Layer.c: 1170: else {
 15002                           ;BVH2_Appl_Layer.c: 1172: if (SIBFS_Motor_Stalled_b.Cb32_default) {
 15003  0B28  1FA0               	btfss	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),7
 15004  0B29  2B3C               	goto	l1696
 15005                           
 15006                           ;BVH2_Appl_Layer.c: 1177: if (!(Sb1_Logical_Operator1)) {
 15007  0B2A  0024               	movlb	4	; select bank4
 15008  0B2B  083B               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+512),w
 15009  0B2C  1D03               	btfss	3,2
 15010  0B2D  2B4A               	goto	l13906
 15011                           
 15012                           ;BVH2_Appl_Layer.c: 1180: SIBFS_Motor_Stalled_b.Cb32_default = 0;
 15013  0B2E  0021               	movlb	1	; select bank1
 15014  0B2F  13A0               	bcf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),7
 15015                           
 15016                           ;BVH2_Appl_Layer.c: 1181: SIBFS_Motor_Stalled_b.Cb25_Motor_stalled_Statemachine = 1;
 15017  0B30  1720               	bsf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),6
 15018                           
 15019                           ;BVH2_Appl_Layer.c: 1182: SIBFS_Motor_Stalled_b.Cb25_Motor_sta__Statemachine_ns = (unsig
      +                          ned int) (UInt8)3;
 15020  0B31  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 15021  0B32  39F8               	andlw	-8
 15022  0B33  3803               	iorlw	3
 15023  0B34  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 15024                           
 15025                           ;BVH2_Appl_Layer.c: 1183: Cb24_StateCnt = 0 ;
 15026  0B35  0020               	movlb	0	; select bank0
 15027  0B36  01D4               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
 15028  0B37  01D5               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
 15029                           
 15030                           ;BVH2_Appl_Layer.c: 1184: Cb24_BadCnt = 0 ;
 15031  0B38  0023               	movlb	3	; select bank3
 15032  0B39  01C2               	clrf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384)
 15033  0B3A  01C3               	clrf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384)
 15034  0B3B  2B4A               	goto	l13906
 15035  0B3C                     l1696:	
 15036                           
 15037                           ;BVH2_Appl_Layer.c: 1189: else {
 15038                           ;BVH2_Appl_Layer.c: 1191: if (!(SIBFS_Motor_Stalled_b.Cb33_Stop)) {
 15039  0B3C  1C21               	btfss	(BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)+1),0
 15040                           
 15041                           ;BVH2_Appl_Layer.c: 1193: if (!(SIBFS_Motor_Stalled_b.Cb24_Motor_Stalled)) {
 15042  0B3D  1AA0               	btfsc	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),5
 15043  0B3E  2B4A               	goto	l13906
 15044                           
 15045                           ;BVH2_Appl_Layer.c: 1194: SIBFS_Motor_Stalled_b.Cb24_Motor_Stalled = 1;
 15046  0B3F  16A0               	bsf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),5
 15047                           
 15048                           ;BVH2_Appl_Layer.c: 1197: if (Cb24_Reset) {
 15049  0B40  0024               	movlb	4	; select bank4
 15050  0B41  0833               	movf	BVH2_Appl_Layer@Cb24_Reset^(0+512),w
 15051  0B42  1903               	btfsc	3,2
 15052  0B43  2B4A               	goto	l13906
 15053                           
 15054                           ;BVH2_Appl_Layer.c: 1199: SIBFS_Motor_Stalled_b.Cb32_default = 1;
 15055  0B44  0021               	movlb	1	; select bank1
 15056  0B45                     L34:	
 15057  0B45  17A0               	bsf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),7
 15058                           
 15059                           ;BVH2_Appl_Layer.c: 981: Cb24_oMotorStalled = 0;
 15060  0B46  0022               	movlb	2	; select bank2
 15061  0B47  01C2               	clrf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256)
 15062                           
 15063                           ;BVH2_Appl_Layer.c: 982: Cb24_oStalledAlarm = 0;
 15064  0B48  01C1               	clrf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256)
 15065                           
 15066                           ;BVH2_Appl_Layer.c: 983: Cb24_RestartCounter = 0 ;
 15067  0B49  01C6               	clrf	BVH2_Appl_Layer@Cb24_RestartCounter^(0+256)
 15068  0B4A                     l13906:	
 15069                           
 15070                           ;BVH2_Appl_Layer.c: 1213: Sb1_Logical_Operator5 = Cb34_odFixedValueSel || Cb56_odFixedVa
      +                          lueSel;
 15071  0B4A  0024               	movlb	4	; select bank4
 15072  0B4B  01AB               	clrf	_BVH2_Appl_Layer$1210^(0+512)
 15073  0B4C  0AAB               	incf	_BVH2_Appl_Layer$1210^(0+512),f
 15074  0B4D  0022               	movlb	2	; select bank2
 15075  0B4E  084B               	movf	_Cb34_odFixedValueSel^(0+256),w
 15076  0B4F  1D03               	btfss	3,2
 15077  0B50  2B57               	goto	l13914
 15078  0B51  0021               	movlb	1	; select bank1
 15079  0B52  0841               	movf	_Cb56_odFixedValueSel^(0+128),w
 15080  0B53  1D03               	btfss	3,2
 15081  0B54  2B57               	goto	l13914
 15082  0B55  0024               	movlb	4	; select bank4
 15083  0B56  01AB               	clrf	_BVH2_Appl_Layer$1210^(0+512)
 15084  0B57                     l13914:	
 15085  0B57  0024               	movlb	4	; select bank4
 15086  0B58  082B               	movf	_BVH2_Appl_Layer$1210^(0+512),w
 15087  0B59  00B5               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator5^(0+512)
 15088                           
 15089                           ;BVH2_Appl_Layer.c: 1217: if (bool_start_demand_mat) {
 15090  0B5A  0021               	movlb	1	; select bank1
 15091  0B5B  0866               	movf	_bool_start_demand_mat^(0+128),w
 15092  0B5C  1903               	btfsc	3,2
 15093  0B5D  2B65               	goto	l13920
 15094                           
 15095                           ;BVH2_Appl_Layer.c: 1218: Sb2_Switch5 = ui8_fixed_start_speed_mat;
 15096  0B5E  0023               	movlb	3	; select bank3
 15097  0B5F  0859               	movf	(_ui8_fixed_start_speed_mat+1)^(0+384),w
 15098  0B60  0024               	movlb	4	; select bank4
 15099  0B61  00B2               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+512)
 15100  0B62  0023               	movlb	3	; select bank3
 15101  0B63  0858               	movf	_ui8_fixed_start_speed_mat^(0+384),w
 15102  0B64  2B81               	goto	L27
 15103  0B65                     l13920:	
 15104                           ;BVH2_Appl_Layer.c: 1219: }
 15105                           
 15106                           
 15107                           ;BVH2_Appl_Layer.c: 1220: else {
 15108                           ;BVH2_Appl_Layer.c: 1223: if (Cb34_odFixedLowValueSel) {
 15109  0B65  0022               	movlb	2	; select bank2
 15110  0B66  084C               	movf	_Cb34_odFixedLowValueSel^(0+256),w
 15111  0B67  1903               	btfsc	3,2
 15112  0B68  2B70               	goto	l13924
 15113                           
 15114                           ;BVH2_Appl_Layer.c: 1224: Sb2_Switch5 = ui16_Speed_demand_mat_min;
 15115  0B69  0023               	movlb	3	; select bank3
 15116  0B6A  0845               	movf	(_ui16_Speed_demand_mat_min+1)^(0+384),w
 15117  0B6B  0024               	movlb	4	; select bank4
 15118  0B6C  00B2               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+512)
 15119  0B6D  0023               	movlb	3	; select bank3
 15120  0B6E  0844               	movf	_ui16_Speed_demand_mat_min^(0+384),w
 15121  0B6F  2B81               	goto	L27
 15122  0B70                     l13924:	
 15123                           ;BVH2_Appl_Layer.c: 1225: }
 15124                           
 15125                           
 15126                           ;BVH2_Appl_Layer.c: 1226: else {
 15127                           ;BVH2_Appl_Layer.c: 1229: if (Sb1_Logical_Operator5) {
 15128  0B70  0024               	movlb	4	; select bank4
 15129  0B71  0835               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator5^(0+512),w
 15130  0B72  1903               	btfsc	3,2
 15131  0B73  2B7B               	goto	l13928
 15132                           
 15133                           ;BVH2_Appl_Layer.c: 1230: Sb2_Switch5 = ui16_Speed_demand_mat_Max;
 15134  0B74  0023               	movlb	3	; select bank3
 15135  0B75  0847               	movf	(_ui16_Speed_demand_mat_Max+1)^(0+384),w
 15136  0B76  0024               	movlb	4	; select bank4
 15137  0B77  00B2               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+512)
 15138  0B78  0023               	movlb	3	; select bank3
 15139  0B79  0846               	movf	_ui16_Speed_demand_mat_Max^(0+384),w
 15140  0B7A  2B81               	goto	L27
 15141  0B7B                     l13928:	
 15142                           ;BVH2_Appl_Layer.c: 1231: }
 15143                           
 15144                           
 15145                           ;BVH2_Appl_Layer.c: 1232: else {
 15146                           ;BVH2_Appl_Layer.c: 1233: Sb2_Switch5 = ui16_Speed_demand_mat;
 15147  0B7B  0023               	movlb	3	; select bank3
 15148  0B7C  0849               	movf	(_ui16_Speed_demand_mat+1)^(0+384),w
 15149  0B7D  0024               	movlb	4	; select bank4
 15150  0B7E  00B2               	movwf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+512)
 15151  0B7F  0023               	movlb	3	; select bank3
 15152  0B80  0848               	movf	_ui16_Speed_demand_mat^(0+384),w
 15153  0B81                     L27:	
 15154  0B81  0024               	movlb	4	; select bank4
 15155  0B82  00B1               	movwf	BVH2_Appl_Layer@Sb2_Switch5^(0+512)
 15156                           
 15157                           ;BVH2_Appl_Layer.c: 1234: }
 15158                           ;BVH2_Appl_Layer.c: 1235: }
 15159                           ;BVH2_Appl_Layer.c: 1236: }
 15160                           ;BVH2_Appl_Layer.c: 1239: Sb2_Error = (Int16) (ui16_Speed_mat - Sb2_Switch5);
 15161  0B83  0020               	movlb	0	; select bank0
 15162  0B84  0857               	movf	_ui16_Speed_mat+1,w
 15163  0B85  0024               	movlb	4	; select bank4
 15164  0B86  00B8               	movwf	(BVH2_Appl_Layer@Sb2_Error+1)^(0+512)
 15165  0B87  0020               	movlb	0	; select bank0
 15166  0B88  0856               	movf	_ui16_Speed_mat,w
 15167  0B89  0024               	movlb	4	; select bank4
 15168  0B8A  00B7               	movwf	BVH2_Appl_Layer@Sb2_Error^(0+512)
 15169  0B8B  0831               	movf	BVH2_Appl_Layer@Sb2_Switch5^(0+512),w
 15170  0B8C  02B7               	subwf	BVH2_Appl_Layer@Sb2_Error^(0+512),f
 15171  0B8D  0832               	movf	(BVH2_Appl_Layer@Sb2_Switch5+1)^(0+512),w
 15172  0B8E  3BB8               	subwfb	(BVH2_Appl_Layer@Sb2_Error+1)^(0+512),f
 15173                           
 15174                           ;BVH2_Appl_Layer.c: 1244: if (SIBFS_Dry_Running_b.Cb15_greenState) {
 15175  0B8F  0021               	movlb	1	; select bank1
 15176  0B90  18BE               	btfsc	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),1
 15177  0B91  2BD7               	goto	l13974
 15178                           
 15179                           ;BVH2_Appl_Layer.c: 1264: else {
 15180                           ;BVH2_Appl_Layer.c: 1266: if (SIBFS_Dry_Running_b.Cb16_DryRunning) {
 15181  0B92  1D3E               	btfss	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),2
 15182  0B93  2BD0               	goto	l1713
 15183                           
 15184                           ;BVH2_Appl_Layer.c: 1270: if (!(SIBFS_Dry_Running_b.Cb17_redState)) {
 15185  0B94  1DBE               	btfss	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),3
 15186                           
 15187                           ;BVH2_Appl_Layer.c: 1272: if (SIBFS_Dry_Running_b.Cb18_CntOverCurrent) {
 15188  0B95  1E3E               	btfss	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),4
 15189  0B96  2BD7               	goto	l13974
 15190                           
 15191                           ;BVH2_Appl_Layer.c: 1279: if ((((UInt32)ui16_mat_Current) > (ui16_dryRun_Thresh + 5)) ||
      +                           (ui16_Speed_mat >
 15192                           ;BVH2_Appl_Layer.c: 1280: 400) || (ui16_Speed_mat < 80)) {
 15193  0B97  0023               	movlb	3	; select bank3
 15194  0B98  0868               	movf	_ui16_dryRun_Thresh^(0+384),w
 15195  0B99  3E05               	addlw	5
 15196  0B9A  0020               	movlb	0	; select bank0
 15197  0B9B  00B2               	movwf	??_BVH2_Appl_Layer
 15198  0B9C  3000               	movlw	0
 15199  0B9D  0023               	movlb	3	; select bank3
 15200  0B9E  3D69               	addwfc	(_ui16_dryRun_Thresh+1)^(0+384),w
 15201  0B9F  2785  3188         	fcall	PL24	;call to abstracted procedure
 15202  0BA1  1C03               	skipc
 15203  0BA2  2BB1               	goto	l1718
 15204  0BA3  3001               	movlw	1
 15205  0BA4  0257               	subwf	_ui16_Speed_mat+1,w
 15206  0BA5  3091               	movlw	145
 15207  0BA6  1903               	skipnz
 15208  0BA7  0256               	subwf	_ui16_Speed_mat,w
 15209  0BA8  1803               	skipnc
 15210  0BA9  2BB1               	goto	l1718
 15211  0BAA  3000               	movlw	0
 15212  0BAB  0257               	subwf	_ui16_Speed_mat+1,w
 15213  0BAC  3050               	movlw	80
 15214  0BAD  1903               	skipnz
 15215  0BAE  0256               	subwf	_ui16_Speed_mat,w
 15216  0BAF  1803               	skipnc
 15217  0BB0  2BB5               	goto	l13950
 15218  0BB1                     l1718:	
 15219                           
 15220                           ;BVH2_Appl_Layer.c: 1282: SIBFS_Dry_Running_b.Cb18_CntOverCurrent = 0;
 15221  0BB1  0021               	movlb	1	; select bank1
 15222  0BB2  123E               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),4
 15223                           
 15224                           ;BVH2_Appl_Layer.c: 1283: SIBFS_Dry_Running_b.Cb16_DryRunning = 0;
 15225  0BB3  113E               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),2
 15226  0BB4  2BD5               	goto	l13970
 15227  0BB5                     l13950:	
 15228                           ;BVH2_Appl_Layer.c: 1286: }
 15229                           
 15230                           ;BVH2_Appl_Layer.c: 1284: SIBFS_Dry_Running_b.Cb15_greenState = 0;
 15231                           
 15232                           
 15233                           ;BVH2_Appl_Layer.c: 1287: else {
 15234                           ;BVH2_Appl_Layer.c: 1288: if ((ui8_PWM_dc_mat < 20) && (ui8_PWM_dc_mat > 4)) {
 15235  0BB5  3014               	movlw	20
 15236  0BB6  025E               	subwf	_ui8_PWM_dc_mat,w
 15237  0BB7  1803               	skipnc
 15238  0BB8  2BBD               	goto	l13958
 15239  0BB9  3005               	movlw	5
 15240  0BBA  025E               	subwf	_ui8_PWM_dc_mat,w
 15241  0BBB  1803               	btfsc	3,0
 15242  0BBC  2BB1               	goto	l1718
 15243  0BBD                     l13958:	
 15244                           
 15245                           ;BVH2_Appl_Layer.c: 1295: else {
 15246                           ;BVH2_Appl_Layer.c: 1296: if (Cb14_StateCnt > 2000) {
 15247  0BBD  3007               	movlw	7
 15248  0BBE  0022               	movlb	2	; select bank2
 15249  0BBF  0224               	subwf	(BVH2_Appl_Layer@Cb14_StateCnt+1)^(0+256),w
 15250  0BC0  30D1               	movlw	209
 15251  0BC1  1903               	skipnz
 15252  0BC2  0223               	subwf	BVH2_Appl_Layer@Cb14_StateCnt^(0+256),w
 15253  0BC3  1C03               	skipc
 15254  0BC4  2BC9               	goto	l13964
 15255                           
 15256                           ;BVH2_Appl_Layer.c: 1298: SIBFS_Dry_Running_b.Cb18_CntOverCurrent = 0;
 15257  0BC5  0021               	movlb	1	; select bank1
 15258  0BC6  123E               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),4
 15259                           
 15260                           ;BVH2_Appl_Layer.c: 1299: SIBFS_Dry_Running_b.Cb17_redState = 0;
 15261  0BC7  11BE               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),3
 15262  0BC8  2BD6               	goto	l13948
 15263  0BC9                     l13964:	
 15264                           
 15265                           ;BVH2_Appl_Layer.c: 1302: else {
 15266                           ;BVH2_Appl_Layer.c: 1303: Cb14_StateCnt = Cb14_StateCnt + 1 ;
 15267  0BC9  0823               	movf	BVH2_Appl_Layer@Cb14_StateCnt^(0+256),w
 15268  0BCA  3E01               	addlw	1
 15269  0BCB  00A3               	movwf	BVH2_Appl_Layer@Cb14_StateCnt^(0+256)
 15270  0BCC  3000               	movlw	0
 15271  0BCD  3D24               	addwfc	(BVH2_Appl_Layer@Cb14_StateCnt+1)^(0+256),w
 15272  0BCE  00A4               	movwf	(BVH2_Appl_Layer@Cb14_StateCnt+1)^(0+256)
 15273  0BCF  2BD7               	goto	l13974
 15274  0BD0                     l1713:	
 15275                           
 15276                           ;BVH2_Appl_Layer.c: 1314: else {
 15277                           ;BVH2_Appl_Layer.c: 1316: if (!(SIBFS_Dry_Running_b.Cb14_Dry_Running)) {
 15278  0BD0  183E               	btfsc	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),0
 15279  0BD1  2BD7               	goto	l13974
 15280                           
 15281                           ;BVH2_Appl_Layer.c: 1317: SIBFS_Dry_Running_b.Cb14_Dry_Running = 0;
 15282  0BD2  103E               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),0
 15283                           
 15284                           ;BVH2_Appl_Layer.c: 1320: if (ui8_ResetMatlab == 1) {
 15285  0BD3  0B6F               	decfsz	_ui8_ResetMatlab^(0+128),w
 15286  0BD4  2BD7               	goto	l13974
 15287  0BD5                     l13970:	
 15288                           
 15289                           ;BVH2_Appl_Layer.c: 1322: SIBFS_Dry_Running_b.Cb15_greenState = 0;
 15290  0BD5  10BE               	bcf	BVH2_Appl_Layer@SIBFS_Dry_Running_b^(0+128),1
 15291  0BD6                     l13948:	
 15292                           
 15293                           ;BVH2_Appl_Layer.c: 1285: Cb14_oDryRunAlarm = 0;
 15294  0BD6  01BC               	clrf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128)
 15295  0BD7                     l13974:	
 15296                           
 15297                           ;BVH2_Appl_Layer.c: 1324: }
 15298                           ;BVH2_Appl_Layer.c: 1325: }
 15299                           ;BVH2_Appl_Layer.c: 1326: }
 15300                           ;BVH2_Appl_Layer.c: 1327: }
 15301                           ;BVH2_Appl_Layer.c: 1334: if (SIBFS_Dry_RunningAlarm_b.Cb20_greenState) {
 15302  0BD7  0020               	movlb	0	; select bank0
 15303  0BD8  1CDC               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,1
 15304  0BD9  2BE9               	goto	l1727
 15305                           
 15306                           ;BVH2_Appl_Layer.c: 1339: if (Cb14_oDryRunAlarm) {
 15307  0BDA  0021               	movlb	1	; select bank1
 15308  0BDB  083C               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),w
 15309  0BDC  1903               	btfsc	3,2
 15310  0BDD  2C27               	goto	l14016
 15311                           
 15312                           ;BVH2_Appl_Layer.c: 1342: SIBFS_Dry_RunningAlarm_b.Cb20_greenState = 0;
 15313  0BDE  0020               	movlb	0	; select bank0
 15314  0BDF  10DC               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,1
 15315                           
 15316                           ;BVH2_Appl_Layer.c: 1343: SIBFS_Dry_RunningAlarm_b.Cb21_DryRunningAlarm = 0;
 15317  0BE0  115C               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,2
 15318  0BE1                     L28:	
 15319                           
 15320                           ;BVH2_Appl_Layer.c: 1344: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 0;
 15321  0BE1  11DC               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,3
 15322  0BE2                     l13980:	
 15323                           
 15324                           ;BVH2_Appl_Layer.c: 1345: Cb19_Counter = 0 ;
 15325  0BE2  0021               	movlb	1	; select bank1
 15326  0BE3  01A2               	clrf	BVH2_Appl_Layer@Cb19_Counter^(0+128)
 15327  0BE4  01A3               	clrf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128)
 15328                           
 15329                           ;BVH2_Appl_Layer.c: 1346: Cb19_oDryRun66 = 0;
 15330  0BE5  0022               	movlb	2	; select bank2
 15331  0BE6  01C3               	clrf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256)
 15332                           
 15333                           ;BVH2_Appl_Layer.c: 1347: Cb19_oDryRun55 = 0;
 15334  0BE7  01C4               	clrf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256)
 15335                           
 15336                           ;BVH2_Appl_Layer.c: 1348: }
 15337                           ;BVH2_Appl_Layer.c: 1351: }
 15338  0BE8  2C27               	goto	l14016
 15339  0BE9                     l1727:	
 15340                           
 15341                           ;BVH2_Appl_Layer.c: 1352: else {
 15342                           ;BVH2_Appl_Layer.c: 1354: if (SIBFS_Dry_RunningAlarm_b.Cb21_DryRunningAlarm) {
 15343  0BE9  1D5C               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,2
 15344  0BEA  2C18               	goto	l1730
 15345                           
 15346                           ;BVH2_Appl_Layer.c: 1359: if (!(Cb14_oDryRunAlarm)) {
 15347  0BEB  0021               	movlb	1	; select bank1
 15348  0BEC  083C               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),w
 15349  0BED  1D03               	btfss	3,2
 15350  0BEE  2BF9               	goto	l1731
 15351                           
 15352                           ;BVH2_Appl_Layer.c: 1364: if (SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66) {
 15353  0BEF  0020               	movlb	0	; select bank0
 15354  0BF0  1DDC               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,3
 15355  0BF1  2BF4               	goto	l1732
 15356                           
 15357                           ;BVH2_Appl_Layer.c: 1365: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 0;
 15358  0BF2  11DC               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,3
 15359                           
 15360                           ;BVH2_Appl_Layer.c: 1366: }
 15361  0BF3  2BF7               	goto	l1733
 15362  0BF4                     l1732:	
 15363                           
 15364                           ;BVH2_Appl_Layer.c: 1367: else {
 15365                           ;BVH2_Appl_Layer.c: 1369: if (SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55) {
 15366  0BF4  1E5C               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,4
 15367  0BF5  2BF7               	goto	l1733
 15368                           
 15369                           ;BVH2_Appl_Layer.c: 1370: SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55 = 0;
 15370  0BF6  125C               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,4
 15371  0BF7                     l1733:	
 15372                           
 15373                           ;BVH2_Appl_Layer.c: 1371: }
 15374                           ;BVH2_Appl_Layer.c: 1372: }
 15375                           ;BVH2_Appl_Layer.c: 1373: SIBFS_Dry_RunningAlarm_b.Cb21_DryRunningAlarm = 0;
 15376  0BF7  115C               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,2
 15377  0BF8  2C20               	goto	L35
 15378  0BF9                     l1731:	
 15379                           ;BVH2_Appl_Layer.c: 1378: }
 15380                           
 15381                           ;BVH2_Appl_Layer.c: 1374: SIBFS_Dry_RunningAlarm_b.Cb20_greenState = 0;
 15382                           
 15383                           
 15384                           ;BVH2_Appl_Layer.c: 1379: else {
 15385                           ;BVH2_Appl_Layer.c: 1381: if (SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66) {
 15386  0BF9  0020               	movlb	0	; select bank0
 15387  0BFA  1DDC               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,3
 15388  0BFB  2C0D               	goto	l1736
 15389                           
 15390                           ;BVH2_Appl_Layer.c: 1384: if (Cb19_Counter > 400) {
 15391  0BFC  27F8  3188         	fcall	PL116	;call to abstracted procedure
 15392  0BFE  1903               	skipnz
 15393  0BFF  0222               	subwf	BVH2_Appl_Layer@Cb19_Counter^(0+128),w
 15394  0C00  1C03               	skipc
 15395  0C01  2C06               	goto	l13998
 15396                           
 15397                           ;BVH2_Appl_Layer.c: 1387: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 0;
 15398  0C02  0020               	movlb	0	; select bank0
 15399  0C03  11DC               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,3
 15400                           
 15401                           ;BVH2_Appl_Layer.c: 1388: SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55 = 0;
 15402  0C04  125C               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,4
 15403  0C05  2BE2               	goto	l13980
 15404  0C06                     l13998:	
 15405                           
 15406                           ;BVH2_Appl_Layer.c: 1393: else {
 15407                           ;BVH2_Appl_Layer.c: 1394: Cb19_Counter = Cb19_Counter + 1 ;
 15408  0C06  0822               	movf	BVH2_Appl_Layer@Cb19_Counter^(0+128),w
 15409  0C07  3E01               	addlw	1
 15410  0C08  00A2               	movwf	BVH2_Appl_Layer@Cb19_Counter^(0+128)
 15411  0C09  3000               	movlw	0
 15412  0C0A  3D23               	addwfc	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128),w
 15413  0C0B  00A3               	movwf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128)
 15414  0C0C  2C27               	goto	l14016
 15415  0C0D                     l1736:	
 15416                           
 15417                           ;BVH2_Appl_Layer.c: 1400: else {
 15418                           ;BVH2_Appl_Layer.c: 1402: if (SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55) {
 15419  0C0D  1E5C               	btfss	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,4
 15420  0C0E  2C27               	goto	l14016
 15421                           
 15422                           ;BVH2_Appl_Layer.c: 1405: if (Cb19_Counter > 400) {
 15423  0C0F  27F8  3188         	fcall	PL116	;call to abstracted procedure
 15424  0C11  1903               	skipnz
 15425  0C12  0222               	subwf	BVH2_Appl_Layer@Cb19_Counter^(0+128),w
 15426  0C13  1C03               	skipc
 15427  0C14  2C06               	goto	l13998
 15428                           
 15429                           ;BVH2_Appl_Layer.c: 1408: SIBFS_Dry_RunningAlarm_b.Cb23_DryRun55 = 0;
 15430  0C15  0020               	movlb	0	; select bank0
 15431  0C16  125C               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,4
 15432  0C17  2BE1               	goto	L28
 15433  0C18                     l1730:	
 15434                           ;BVH2_Appl_Layer.c: 1409: SIBFS_Dry_RunningAlarm_b.Cb22_DryRun66 = 0;
 15435                           
 15436                           
 15437                           ;BVH2_Appl_Layer.c: 1426: else {
 15438                           ;BVH2_Appl_Layer.c: 1428: if (!(SIBFS_Dry_RunningAlarm_b.Cb19_Dry_RunningAlarm)) {
 15439  0C18  185C               	btfsc	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,0
 15440  0C19  2C27               	goto	l14016
 15441                           
 15442                           ;BVH2_Appl_Layer.c: 1429: SIBFS_Dry_RunningAlarm_b.Cb19_Dry_RunningAlarm = 1;
 15443  0C1A  145C               	bsf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,0
 15444                           
 15445                           ;BVH2_Appl_Layer.c: 1433: if (!(Cb14_oDryRunAlarm)) {
 15446  0C1B  0021               	movlb	1	; select bank1
 15447  0C1C  083C               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),w
 15448  0C1D  1D03               	btfss	3,2
 15449  0C1E  2C27               	goto	l14016
 15450                           
 15451                           ;BVH2_Appl_Layer.c: 1435: SIBFS_Dry_RunningAlarm_b.Cb20_greenState = 0;
 15452  0C1F  0020               	movlb	0	; select bank0
 15453  0C20                     L35:	
 15454  0C20  10DC               	bcf	BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b,1
 15455                           
 15456                           ;BVH2_Appl_Layer.c: 1375: Cb19_oDryRun55 = 0;
 15457  0C21  0022               	movlb	2	; select bank2
 15458  0C22  01C4               	clrf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256)
 15459                           
 15460                           ;BVH2_Appl_Layer.c: 1376: Cb19_oDryRun66 = 0;
 15461  0C23  01C3               	clrf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256)
 15462                           
 15463                           ;BVH2_Appl_Layer.c: 1377: Cb19_Counter = 0 ;
 15464  0C24  0021               	movlb	1	; select bank1
 15465  0C25  01A2               	clrf	BVH2_Appl_Layer@Cb19_Counter^(0+128)
 15466  0C26  01A3               	clrf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128)
 15467  0C27                     l14016:	
 15468                           
 15469                           ;BVH2_Appl_Layer.c: 1439: }
 15470                           ;BVH2_Appl_Layer.c: 1440: }
 15471                           ;BVH2_Appl_Layer.c: 1441: }
 15472                           ;BVH2_Appl_Layer.c: 1442: }
 15473                           ;BVH2_Appl_Layer.c: 1447: bool_DryRunningAlarm = Cb19_oDryRun66;
 15474  0C27  0022               	movlb	2	; select bank2
 15475  0C28  0843               	movf	BVH2_Appl_Layer@Cb19_oDryRun66^(0+256),w
 15476  0C29  0021               	movlb	1	; select bank1
 15477  0C2A  00DB               	movwf	_bool_DryRunningAlarm^(0+128)
 15478                           
 15479                           ;BVH2_Appl_Layer.c: 1450: bool_CPU_TempAlarm = Cb51_oTempAlarm;
 15480  0C2B  0022               	movlb	2	; select bank2
 15481  0C2C  0840               	movf	BVH2_Appl_Layer@Cb51_oTempAlarm^(0+256),w
 15482  0C2D  0021               	movlb	1	; select bank1
 15483  0C2E  00DC               	movwf	_bool_CPU_TempAlarm^(0+128)
 15484                           
 15485                           ;BVH2_Appl_Layer.c: 1455: if (SIBFS_Current_Analysis_low_b.Cb10_greenState) {
 15486  0C2F  1C3F               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),0
 15487  0C30  2C3C               	goto	l1746
 15488                           
 15489                           ;BVH2_Appl_Layer.c: 1460: if (((Int32)ui16_mat_Current) > (ui16_Current_Thresh - 2)) {
 15490  0C31  2792  3188         	fcall	PL26	;call to abstracted procedure
 15491  0C33  2785  3188         	fcall	PL24	;call to abstracted procedure
 15492  0C35  1803               	skipnc
 15493  0C36  2C75               	goto	l14068
 15494                           
 15495                           ;BVH2_Appl_Layer.c: 1463: SIBFS_Current_Analysis_low_b.Cb10_greenState = 0;
 15496  0C37  0021               	movlb	1	; select bank1
 15497  0C38  103F               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),0
 15498                           
 15499                           ;BVH2_Appl_Layer.c: 1464: SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent = 0;
 15500  0C39  113F               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
 15501  0C3A                     l14026:	
 15502                           
 15503                           ;BVH2_Appl_Layer.c: 1465: Cb9_StateCnt = 0 ;
 15504  0C3A  01C0               	clrf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128)
 15505  0C3B  2C75               	goto	l14068
 15506  0C3C                     l1746:	
 15507                           
 15508                           ;BVH2_Appl_Layer.c: 1470: else {
 15509                           ;BVH2_Appl_Layer.c: 1472: if (SIBFS_Current_Analysis_low_b.Cb11_Wait) {
 15510  0C3C  1CBF               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
 15511  0C3D  2C54               	goto	l1749
 15512                           
 15513                           ;BVH2_Appl_Layer.c: 1477: if (((Int32)ui16_mat_Current) > (ui16_Current_Thresh - 2)) {
 15514  0C3E  2792  3188         	fcall	PL26	;call to abstracted procedure
 15515  0C40  2785  3188         	fcall	PL24	;call to abstracted procedure
 15516  0C42  1803               	skipnc
 15517  0C43  2C4B               	goto	l14032
 15518                           
 15519                           ;BVH2_Appl_Layer.c: 1479: SIBFS_Current_Analysis_low_b.Cb11_Wait = 0;
 15520  0C44  0021               	movlb	1	; select bank1
 15521  0C45  10BF               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
 15522                           
 15523                           ;BVH2_Appl_Layer.c: 1480: SIBFS_Current_Analysis_low_b.Cb13_redState = 0;
 15524  0C46  11BF               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),3
 15525                           
 15526                           ;BVH2_Appl_Layer.c: 1481: Cb9_oCurrentAlarm = 1;
 15527  0C47  0022               	movlb	2	; select bank2
 15528  0C48  01BD               	clrf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256)
 15529  0C49  0ABD               	incf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256),f
 15530                           
 15531                           ;BVH2_Appl_Layer.c: 1482: }
 15532  0C4A  2C75               	goto	l14068
 15533  0C4B                     l14032:	
 15534                           
 15535                           ;BVH2_Appl_Layer.c: 1483: else {
 15536                           ;BVH2_Appl_Layer.c: 1484: if (Cb9_StateCnt > 100) {
 15537  0C4B  3065               	movlw	101
 15538  0C4C  0021               	movlb	1	; select bank1
 15539  0C4D  0240               	subwf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128),w
 15540  0C4E  1C03               	skipc
 15541  0C4F  2C52               	goto	l14038
 15542                           
 15543                           ;BVH2_Appl_Layer.c: 1486: SIBFS_Current_Analysis_low_b.Cb11_Wait = 0;
 15544  0C50  10BF               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
 15545  0C51  2C72               	goto	l14064
 15546  0C52                     l14038:	
 15547                           ;BVH2_Appl_Layer.c: 1489: }
 15548                           
 15549                           ;BVH2_Appl_Layer.c: 1487: SIBFS_Current_Analysis_low_b.Cb10_greenState = 0;
 15550                           
 15551                           
 15552                           ;BVH2_Appl_Layer.c: 1490: else {
 15553                           ;BVH2_Appl_Layer.c: 1491: Cb9_StateCnt = Cb9_StateCnt + 1 ;
 15554  0C52  0AC0               	incf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128),f
 15555  0C53  2C75               	goto	l14068
 15556  0C54                     l1749:	
 15557                           
 15558                           ;BVH2_Appl_Layer.c: 1497: else {
 15559                           ;BVH2_Appl_Layer.c: 1499: if (SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent) {
 15560  0C54  1D3F               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
 15561  0C55  2C64               	goto	l1755
 15562                           
 15563                           ;BVH2_Appl_Layer.c: 1504: if (((UInt32)ui16_mat_Current) < (ui16_Current_Thresh + 2)) {
 15564  0C56  279B  3188         	fcall	PL30	;call to abstracted procedure
 15565  0C58  1803               	skipnc
 15566  0C59  2C5D               	goto	l14046
 15567                           
 15568                           ;BVH2_Appl_Layer.c: 1506: SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent = 0;
 15569  0C5A  113F               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
 15570                           
 15571                           ;BVH2_Appl_Layer.c: 1507: SIBFS_Current_Analysis_low_b.Cb10_greenState = 1;
 15572  0C5B  143F               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),0
 15573  0C5C  2C73               	goto	l14036
 15574  0C5D                     l14046:	
 15575                           
 15576                           ;BVH2_Appl_Layer.c: 1510: else {
 15577                           ;BVH2_Appl_Layer.c: 1511: if (Cb9_StateCnt > 50) {
 15578  0C5D  3033               	movlw	51
 15579  0C5E  0240               	subwf	BVH2_Appl_Layer@Cb9_StateCnt^(0+128),w
 15580  0C5F  1C03               	skipc
 15581  0C60  2C52               	goto	l14038
 15582                           
 15583                           ;BVH2_Appl_Layer.c: 1513: SIBFS_Current_Analysis_low_b.Cb12_CntOverCurrent = 0;
 15584  0C61  113F               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),2
 15585                           
 15586                           ;BVH2_Appl_Layer.c: 1514: SIBFS_Current_Analysis_low_b.Cb13_redState = 1;
 15587  0C62  15BF               	bsf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),3
 15588  0C63  2C73               	goto	l14036
 15589  0C64                     l1755:	
 15590                           
 15591                           ;BVH2_Appl_Layer.c: 1524: else {
 15592                           ;BVH2_Appl_Layer.c: 1526: if (SIBFS_Current_Analysis_low_b.Cb13_redState) {
 15593  0C64  1DBF               	btfss	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),3
 15594  0C65  2C6D               	goto	l1761
 15595                           
 15596                           ;BVH2_Appl_Layer.c: 1531: if (((UInt32)ui16_mat_Current) < (ui16_Current_Thresh + 2)) {
 15597  0C66  279B  3188         	fcall	PL30	;call to abstracted procedure
 15598  0C68  1803               	skipnc
 15599  0C69  2C75               	goto	l14068
 15600                           
 15601                           ;BVH2_Appl_Layer.c: 1534: SIBFS_Current_Analysis_low_b.Cb13_redState = 0;
 15602  0C6A  11BF               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),3
 15603                           
 15604                           ;BVH2_Appl_Layer.c: 1535: SIBFS_Current_Analysis_low_b.Cb11_Wait = 0;
 15605  0C6B  10BF               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),1
 15606  0C6C  2C3A               	goto	l14026
 15607  0C6D                     l1761:	
 15608                           
 15609                           ;BVH2_Appl_Layer.c: 1541: else {
 15610                           ;BVH2_Appl_Layer.c: 1543: if (!(SIBFS_Current_Analysis_low_b.Cb9_Current_Analysis_low)) 
      +                          {
 15611  0C6D  1A3F               	btfsc	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),4
 15612  0C6E  2C75               	goto	l14068
 15613                           
 15614                           ;BVH2_Appl_Layer.c: 1544: SIBFS_Current_Analysis_low_b.Cb9_Current_Analysis_low = 0;
 15615  0C6F  123F               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),4
 15616                           
 15617                           ;BVH2_Appl_Layer.c: 1547: if (ui8_ResetMatlab == 1) {
 15618  0C70  0B6F               	decfsz	_ui8_ResetMatlab^(0+128),w
 15619  0C71  2C75               	goto	l14068
 15620  0C72                     l14064:	
 15621                           
 15622                           ;BVH2_Appl_Layer.c: 1549: SIBFS_Current_Analysis_low_b.Cb10_greenState = 0;
 15623  0C72  103F               	bcf	BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b^(0+128),0
 15624  0C73                     l14036:	
 15625                           
 15626                           ;BVH2_Appl_Layer.c: 1488: Cb9_oCurrentAlarm = 0;
 15627  0C73  0022               	movlb	2	; select bank2
 15628  0C74  01BD               	clrf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256)
 15629  0C75                     l14068:	
 15630                           
 15631                           ;BVH2_Appl_Layer.c: 1551: }
 15632                           ;BVH2_Appl_Layer.c: 1552: }
 15633                           ;BVH2_Appl_Layer.c: 1553: }
 15634                           ;BVH2_Appl_Layer.c: 1554: }
 15635                           ;BVH2_Appl_Layer.c: 1555: }
 15636                           ;BVH2_Appl_Layer.c: 1556: }
 15637                           ;BVH2_Appl_Layer.c: 1561: bool_HighCurrentAlarm = Cb9_oCurrentAlarm;
 15638  0C75  0022               	movlb	2	; select bank2
 15639  0C76  083D               	movf	BVH2_Appl_Layer@Cb9_oCurrentAlarm^(0+256),w
 15640  0C77  0021               	movlb	1	; select bank1
 15641  0C78  00D9               	movwf	_bool_HighCurrentAlarm^(0+128)
 15642                           
 15643                           ;BVH2_Appl_Layer.c: 1564: bool_PWMin_err_Alarm = Cb34_oPWM_Alarm;
 15644  0C79  0022               	movlb	2	; select bank2
 15645  0C7A  084E               	movf	_Cb34_oPWM_Alarm^(0+256),w
 15646  0C7B  00DC               	movwf	_bool_PWMin_err_Alarm^(0+256)
 15647                           
 15648                           ;BVH2_Appl_Layer.c: 1567: bool_UbatAlarm = Cb56_oUbat_Alarm_High;
 15649  0C7C  0848               	movf	_Cb56_oUbat_Alarm_High^(0+256),w
 15650  0C7D  00DA               	movwf	_bool_UbatAlarm^(0+256)
 15651                           
 15652                           ;BVH2_Appl_Layer.c: 1568: bool_MotorStalled = Cb24_oStalledAlarm || Cb1_oCurrentAlarm ||
      +                           Cb19_oDryRun55;
 15653  0C7E  0024               	movlb	4	; select bank4
 15654  0C7F  01AC               	clrf	_BVH2_Appl_Layer$1211^(0+512)
 15655  0C80  0AAC               	incf	_BVH2_Appl_Layer$1211^(0+512),f
 15656  0C81  0022               	movlb	2	; select bank2
 15657  0C82  0841               	movf	BVH2_Appl_Layer@Cb24_oStalledAlarm^(0+256),w
 15658  0C83  1D03               	btfss	3,2
 15659  0C84  2C8D               	goto	l14084
 15660  0C85  0850               	movf	_Cb1_oCurrentAlarm^(0+256),w
 15661  0C86  1D03               	btfss	3,2
 15662  0C87  2C8D               	goto	l14084
 15663  0C88  0844               	movf	BVH2_Appl_Layer@Cb19_oDryRun55^(0+256),w
 15664  0C89  1D03               	btfss	3,2
 15665  0C8A  2C8D               	goto	l14084
 15666  0C8B  0024               	movlb	4	; select bank4
 15667  0C8C  01AC               	clrf	_BVH2_Appl_Layer$1211^(0+512)
 15668  0C8D                     l14084:	
 15669  0C8D  0024               	movlb	4	; select bank4
 15670  0C8E  082C               	movf	_BVH2_Appl_Layer$1211^(0+512),w
 15671  0C8F  0021               	movlb	1	; select bank1
 15672  0C90  00DA               	movwf	_bool_MotorStalled^(0+128)
 15673                           
 15674                           ;BVH2_Appl_Layer.c: 1574: ui8_debug_out0 = (UInt8) Sb2_Switch5;
 15675  0C91  0022               	movlb	2	; select bank2
 15676  0C92  083F               	movf	BVH2_Appl_Layer@Cb51_oTempRedAlarm^(0+256),w
 15677  0C93  00DB               	movwf	_bool_CPU_TempRedAlarm^(0+256)
 15678                           
 15679                           ;BVH2_Appl_Layer.c: 1575: Sb1_Logical_Operator3 = Sb1_Logical_Operator1 || Cb24_oMotorSt
      +                          alled || Cb14_oDryRunAlarm;
 15680  0C94  0024               	movlb	4	; select bank4
 15681  0C95  01AD               	clrf	_BVH2_Appl_Layer$1212^(0+512)
 15682  0C96  0AAD               	incf	_BVH2_Appl_Layer$1212^(0+512),f
 15683  0C97  083B               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator1^(0+512),w
 15684  0C98  1D03               	btfss	3,2
 15685  0C99  2CA4               	goto	l14098
 15686  0C9A  0022               	movlb	2	; select bank2
 15687  0C9B  0842               	movf	BVH2_Appl_Layer@Cb24_oMotorStalled^(0+256),w
 15688  0C9C  1D03               	btfss	3,2
 15689  0C9D  2CA4               	goto	l14098
 15690  0C9E  0021               	movlb	1	; select bank1
 15691  0C9F  083C               	movf	BVH2_Appl_Layer@Cb14_oDryRunAlarm^(0+128),w
 15692  0CA0  1D03               	btfss	3,2
 15693  0CA1  2CA4               	goto	l14098
 15694  0CA2  0024               	movlb	4	; select bank4
 15695  0CA3  01AD               	clrf	_BVH2_Appl_Layer$1212^(0+512)
 15696  0CA4                     l14098:	
 15697  0CA4  0024               	movlb	4	; select bank4
 15698  0CA5  082D               	movf	_BVH2_Appl_Layer$1212^(0+512),w
 15699  0CA6  00B4               	movwf	BVH2_Appl_Layer@Sb1_Logical_Operator3^(0+512)
 15700                           
 15701                           ;BVH2_Appl_Layer.c: 1576: Sb2_Logical_Operator2 = Sb1_Logical_Operator3 || bool_ControlL
      +                          oopMode;
 15702  0CA7  01AE               	clrf	_BVH2_Appl_Layer$1213^(0+512)
 15703  0CA8  0AAE               	incf	_BVH2_Appl_Layer$1213^(0+512),f
 15704  0CA9  0834               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator3^(0+512),w
 15705  0CAA  1D03               	btfss	3,2
 15706  0CAB  2CB2               	goto	l14108
 15707  0CAC  0021               	movlb	1	; select bank1
 15708  0CAD  0849               	movf	_bool_ControlLoopMode^(0+128),w
 15709  0CAE  1D03               	btfss	3,2
 15710  0CAF  2CB2               	goto	l14108
 15711  0CB0  0024               	movlb	4	; select bank4
 15712  0CB1  01AE               	clrf	_BVH2_Appl_Layer$1213^(0+512)
 15713  0CB2                     l14108:	
 15714  0CB2  0024               	movlb	4	; select bank4
 15715  0CB3  082E               	movf	_BVH2_Appl_Layer$1213^(0+512),w
 15716  0CB4  00B6               	movwf	BVH2_Appl_Layer@Sb2_Logical_Operator2^(0+512)
 15717                           
 15718                           ;BVH2_Appl_Layer.c: 1577: if ((Sb2_Logical_Operator2 ^ X_Sb4_Intergrator_TriggerIn) && (
      +                          !(Sb1_BVH2_Appl_Layer_FirstRun)))
 15719  0CB5  0022               	movlb	2	; select bank2
 15720  0CB6  066C               	xorwf	BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn^(0+256),w
 15721  0CB7  1903               	btfsc	3,2
 15722  0CB8  2CC3               	goto	l14116
 15723  0CB9  086D               	movf	BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun^(0+256),w
 15724  0CBA  1D03               	btfss	3,2
 15725  0CBB  2CC3               	goto	l14116
 15726                           
 15727                           ;BVH2_Appl_Layer.c: 1578: {
 15728                           ;BVH2_Appl_Layer.c: 1579: X_Sb4_Intergrator = 80000 ;
 15729  0CBC  3001               	movlw	1
 15730  0CBD  01EB               	clrf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256)
 15731  0CBE  00EA               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256)
 15732  0CBF  3038               	movlw	56
 15733  0CC0  00E9               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256)
 15734  0CC1  3080               	movlw	128
 15735  0CC2  00E8               	movwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256)
 15736  0CC3                     l14116:	
 15737                           
 15738                           ;BVH2_Appl_Layer.c: 1580: }
 15739                           ;BVH2_Appl_Layer.c: 1584: if (Sb1_Logical_Operator3) {
 15740  0CC3  0024               	movlb	4	; select bank4
 15741  0CC4  0834               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator3^(0+512),w
 15742  0CC5  1903               	btfsc	3,2
 15743  0CC6  2CC9               	goto	l14120
 15744                           
 15745                           ;BVH2_Appl_Layer.c: 1585: Sb2_Switch2 = 0 ;
 15746  0CC7  01B9               	clrf	BVH2_Appl_Layer@Sb2_Switch2^(0+512)
 15747  0CC8  2D3C               	goto	L30
 15748  0CC9                     l14120:	
 15749                           ;BVH2_Appl_Layer.c: 1586: }
 15750                           
 15751                           
 15752                           ;BVH2_Appl_Layer.c: 1587: else {
 15753                           ;BVH2_Appl_Layer.c: 1590: if (bool_ControlLoopMode) {
 15754  0CC9  0021               	movlb	1	; select bank1
 15755  0CCA  0849               	movf	_bool_ControlLoopMode^(0+128),w
 15756  0CCB  1903               	btfsc	3,2
 15757  0CCC  2D3E               	goto	l14140
 15758                           
 15759                           ;BVH2_Appl_Layer.c: 1593: if (Sb1_Logical_Operator5) {
 15760  0CCD  0024               	movlb	4	; select bank4
 15761  0CCE  0835               	movf	BVH2_Appl_Layer@Sb1_Logical_Operator5^(0+512),w
 15762  0CCF  1903               	btfsc	3,2
 15763  0CD0  2CD3               	goto	l14126
 15764  0CD1                     l14124:	
 15765                           
 15766                           ;BVH2_Appl_Layer.c: 1594: Sb2_Switch2 = Sb2_Fixed_Power;
 15767  0CD1  30CA               	movlw	202
 15768  0CD2  2D3B               	goto	L36
 15769  0CD3                     l14126:	
 15770                           ;BVH2_Appl_Layer.c: 1595: }
 15771                           
 15772                           
 15773                           ;BVH2_Appl_Layer.c: 1596: else {
 15774                           ;BVH2_Appl_Layer.c: 1598: UInt16 Sb3_Product1 ;
 15775                           ;BVH2_Appl_Layer.c: 1599: Int16 Sb3_Sum1;
 15776                           ;BVH2_Appl_Layer.c: 1607: Sb3_Product1 = (UInt16) (((UInt16) (140 << 8)) / 160 );
 15777  0CD3  30E0               	movlw	224
 15778  0CD4  00AF               	movwf	BVH2_Appl_Layer@Sb3_Product1^(0+512)
 15779  0CD5  01B0               	clrf	(BVH2_Appl_Layer@Sb3_Product1+1)^(0+512)
 15780                           
 15781                           ;BVH2_Appl_Layer.c: 1613: Sb3_Sum1 = (Int16) (((UInt16) ((((UInt32) ui8_PWM_dc_mat) * ((
      +                          UInt32) Sb3_Product1)) >>
 15782                           ;BVH2_Appl_Layer.c: 1614: 8)) + ((Int16) (((Int16) (-((Int16) (UInt16) ((((UInt32) Sb3_P
      +                          roduct1) * 95) >> 7)))) + 200)));
 15783  0CD6  0020               	movlb	0	; select bank0
 15784  0CD7  085E               	movf	_ui8_PWM_dc_mat,w
 15785  0CD8  00A4               	movwf	___lmul@multiplier
 15786  0CD9  01A5               	clrf	___lmul@multiplier+1
 15787  0CDA  01A6               	clrf	___lmul@multiplier+2
 15788  0CDB  01A7               	clrf	___lmul@multiplier+3
 15789  0CDC  0024               	movlb	4	; select bank4
 15790  0CDD  082F               	movf	BVH2_Appl_Layer@Sb3_Product1^(0+512),w
 15791  0CDE  0020               	movlb	0	; select bank0
 15792  0CDF  00A8               	movwf	___lmul@multiplicand
 15793  0CE0  0024               	movlb	4	; select bank4
 15794  0CE1  0830               	movf	(BVH2_Appl_Layer@Sb3_Product1+1)^(0+512),w
 15795  0CE2  0020               	movlb	0	; select bank0
 15796  0CE3  00A9               	movwf	___lmul@multiplicand+1
 15797  0CE4  01AA               	clrf	___lmul@multiplicand+2
 15798  0CE5  01AB               	clrf	___lmul@multiplicand+3
 15799  0CE6  264C  3188         	fcall	___lmul
 15800  0CE8  0826               	movf	?___lmul+2,w
 15801  0CE9  0024               	movlb	4	; select bank4
 15802  0CEA  00BD               	movwf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+512)
 15803  0CEB  0020               	movlb	0	; select bank0
 15804  0CEC  0825               	movf	?___lmul+1,w
 15805  0CED  0024               	movlb	4	; select bank4
 15806  0CEE  00BC               	movwf	BVH2_Appl_Layer@Sb3_Sum1^(0+512)
 15807  0CEF  082F               	movf	BVH2_Appl_Layer@Sb3_Product1^(0+512),w
 15808  0CF0  0020               	movlb	0	; select bank0
 15809  0CF1  00A4               	movwf	___lmul@multiplier
 15810  0CF2  0024               	movlb	4	; select bank4
 15811  0CF3  0830               	movf	(BVH2_Appl_Layer@Sb3_Product1+1)^(0+512),w
 15812  0CF4  0020               	movlb	0	; select bank0
 15813  0CF5  00A5               	movwf	___lmul@multiplier+1
 15814  0CF6  305F               	movlw	95
 15815  0CF7  01A6               	clrf	___lmul@multiplier+2
 15816  0CF8  01A7               	clrf	___lmul@multiplier+3
 15817  0CF9  00A8               	movwf	___lmul@multiplicand
 15818  0CFA  01A9               	clrf	___lmul@multiplicand+1
 15819  0CFB  01AA               	clrf	___lmul@multiplicand+2
 15820  0CFC  01AB               	clrf	___lmul@multiplicand+3
 15821  0CFD  264C  3188         	fcall	___lmul
 15822  0CFF  0824               	movf	?___lmul,w
 15823  0D00  00B2               	movwf	??_BVH2_Appl_Layer
 15824  0D01  0825               	movf	?___lmul+1,w
 15825  0D02  00B3               	movwf	??_BVH2_Appl_Layer+1
 15826  0D03  0826               	movf	?___lmul+2,w
 15827  0D04  00B4               	movwf	??_BVH2_Appl_Layer+2
 15828  0D05  0827               	movf	?___lmul+3,w
 15829  0D06  00B5               	movwf	??_BVH2_Appl_Layer+3
 15830  0D07  3007               	movlw	7
 15831  0D08                     u12945:	
 15832  0D08  36B5               	lsrf	??_BVH2_Appl_Layer+3,f
 15833  0D09  0CB4               	rrf	??_BVH2_Appl_Layer+2,f
 15834  0D0A  0CB3               	rrf	??_BVH2_Appl_Layer+1,f
 15835  0D0B  0CB2               	rrf	??_BVH2_Appl_Layer,f
 15836  0D0C  0B89               	decfsz	9,f
 15837  0D0D  2D08               	goto	u12945
 15838  0D0E  0832               	movf	??_BVH2_Appl_Layer,w
 15839  0D0F  0024               	movlb	4	; select bank4
 15840  0D10  02BC               	subwf	BVH2_Appl_Layer@Sb3_Sum1^(0+512),f
 15841  0D11  0020               	movlb	0	; select bank0
 15842  0D12  0833               	movf	??_BVH2_Appl_Layer+1,w
 15843  0D13  0024               	movlb	4	; select bank4
 15844  0D14  3BBD               	subwfb	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+512),f
 15845  0D15  30C8               	movlw	200
 15846  0D16  07BC               	addwf	BVH2_Appl_Layer@Sb3_Sum1^(0+512),f
 15847  0D17  1803               	skipnc
 15848  0D18  0ABD               	incf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+512),f
 15849                           
 15850                           ;BVH2_Appl_Layer.c: 1617: Sb2_Switch2 = (UInt16) ( (Sb3_Sum1 > (Int16)200) ? 200 : ( (Sb
      +                          3_Sum1 < (Int16)60) ? 60 : (UInt8)Sb3_Sum1 ) );
 15851  0D19  083D               	movf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+512),w
 15852  0D1A  27DE  3188         	fcall	PL86	;call to abstracted procedure
 15853  0D1C  1D03               	skipz
 15854  0D1D  2D21               	goto	u12955
 15855  0D1E  30C9               	movlw	201
 15856  0D1F  0024               	movlb	4	; select bank4
 15857  0D20  023C               	subwf	BVH2_Appl_Layer@Sb3_Sum1^(0+512),w
 15858  0D21                     u12955:	
 15859  0D21  1803               	skipnc
 15860  0D22  2D39               	goto	l14138
 15861  0D23  0024               	movlb	4	; select bank4
 15862  0D24  083D               	movf	(BVH2_Appl_Layer@Sb3_Sum1+1)^(0+512),w
 15863  0D25  27DE  3188         	fcall	PL86	;call to abstracted procedure
 15864  0D27  1D03               	skipz
 15865  0D28  2D2C               	goto	u12965
 15866  0D29  303C               	movlw	60
 15867  0D2A  0024               	movlb	4	; select bank4
 15868  0D2B  023C               	subwf	BVH2_Appl_Layer@Sb3_Sum1^(0+512),w
 15869  0D2C                     u12965:	
 15870  0D2C  1C03               	skipc
 15871  0D2D  2D31               	goto	l14136
 15872  0D2E  0024               	movlb	4	; select bank4
 15873  0D2F  083C               	movf	BVH2_Appl_Layer@Sb3_Sum1^(0+512),w
 15874  0D30  2D33               	goto	L31
 15875  0D31                     l14136:	
 15876  0D31  303C               	movlw	60
 15877  0D32  0024               	movlb	4	; select bank4
 15878  0D33                     L31:	
 15879  0D33  00A4               	movwf	_BVH2_Appl_Layer$1216^(0+512)
 15880  0D34  01A5               	clrf	(_BVH2_Appl_Layer$1216+1)^(0+512)
 15881  0D35  0825               	movf	(_BVH2_Appl_Layer$1216+1)^(0+512),w
 15882  0D36  00BA               	movwf	(BVH2_Appl_Layer@Sb2_Switch2+1)^(0+512)
 15883  0D37  0824               	movf	_BVH2_Appl_Layer$1216^(0+512),w
 15884  0D38  2D95               	goto	L32
 15885  0D39                     l14138:	
 15886  0D39  30C8               	movlw	200
 15887  0D3A  0024               	movlb	4	; select bank4
 15888  0D3B                     L36:	
 15889  0D3B  00B9               	movwf	BVH2_Appl_Layer@Sb2_Switch2^(0+512)
 15890  0D3C                     L30:	
 15891  0D3C  01BA               	clrf	(BVH2_Appl_Layer@Sb2_Switch2+1)^(0+512)
 15892  0D3D  2D96               	goto	l14154
 15893  0D3E                     l14140:	
 15894                           
 15895                           ;BVH2_Appl_Layer.c: 1620: else {
 15896                           ;BVH2_Appl_Layer.c: 1622: Int16 Sb4_PI_sum;
 15897                           ;BVH2_Appl_Layer.c: 1627: Sb4_PI_sum = (Int16) (((UInt16) (Int16) (X_Sb4_Intergrator / (
      +                          (Int32) 800))) + ((UInt16)
 15898                           ;BVH2_Appl_Layer.c: 1628: (Sb2_Error * ((Int16) ui8_Kp_mat))));
 15899  0D3E  0020               	movlb	0	; select bank0
 15900  0D3F  3003               	movlw	3
 15901  0D40  01A7               	clrf	___aldiv@divisor+3
 15902  0D41  01A6               	clrf	___aldiv@divisor+2
 15903  0D42  00A5               	movwf	___aldiv@divisor+1
 15904  0D43  3020               	movlw	32
 15905  0D44  00A4               	movwf	___aldiv@divisor
 15906  0D45  0022               	movlb	2	; select bank2
 15907  0D46  086B               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 15908  0D47  0020               	movlb	0	; select bank0
 15909  0D48  00AB               	movwf	___aldiv@dividend+3
 15910  0D49  0022               	movlb	2	; select bank2
 15911  0D4A  086A               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 15912  0D4B  0020               	movlb	0	; select bank0
 15913  0D4C  00AA               	movwf	___aldiv@dividend+2
 15914  0D4D  0022               	movlb	2	; select bank2
 15915  0D4E  0869               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 15916  0D4F  0020               	movlb	0	; select bank0
 15917  0D50  00A9               	movwf	___aldiv@dividend+1
 15918  0D51  0022               	movlb	2	; select bank2
 15919  0D52  0868               	movf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),w
 15920  0D53  0020               	movlb	0	; select bank0
 15921  0D54  00A8               	movwf	___aldiv@dividend
 15922  0D55  2719  3188         	fcall	___aldiv
 15923  0D57  0825               	movf	?___aldiv+1,w
 15924  0D58  0024               	movlb	4	; select bank4
 15925  0D59  00BF               	movwf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512)
 15926  0D5A  0020               	movlb	0	; select bank0
 15927  0D5B  0824               	movf	?___aldiv,w
 15928  0D5C  0024               	movlb	4	; select bank4
 15929  0D5D  00BE               	movwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+512)
 15930  0D5E  0022               	movlb	2	; select bank2
 15931  0D5F  085D               	movf	_ui8_Kp_mat^(0+256),w
 15932  0D60  0020               	movlb	0	; select bank0
 15933  0D61  00A4               	movwf	___wmul@multiplier
 15934  0D62  01A5               	clrf	___wmul@multiplier+1
 15935  0D63  27CD               	fcall	PL72	;call to abstracted procedure
 15936  0D64  3196  263C  3188   	fcall	___wmul
 15937  0D67  0824               	movf	?___wmul,w
 15938  0D68  0024               	movlb	4	; select bank4
 15939  0D69  07BE               	addwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+512),f
 15940  0D6A  0020               	movlb	0	; select bank0
 15941  0D6B  0825               	movf	?___wmul+1,w
 15942  0D6C  0024               	movlb	4	; select bank4
 15943  0D6D  3DBF               	addwfc	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512),f
 15944                           
 15945                           ;BVH2_Appl_Layer.c: 1631: Sb2_Switch2 = ( ( (Sb4_PI_sum > 0) && ((UInt16)Sb4_PI_sum > 20
      +                          2) ) ? 202 : ( ( (Sb4_PI_sum < 0) || ((UInt16)Sb4_PI_sum < 40) ) ? 40 : (UInt16)Sb4_PI_s
      +                          um ) );
 15946  0D6E  083F               	movf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512),w
 15947  0D6F  27DE  3188         	fcall	PL86	;call to abstracted procedure
 15948  0D71  1D03               	skipz
 15949  0D72  2D76               	goto	u12975
 15950  0D73  3001               	movlw	1
 15951  0D74  0024               	movlb	4	; select bank4
 15952  0D75  023E               	subwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+512),w
 15953  0D76                     u12975:	
 15954  0D76  1C03               	skipc
 15955  0D77  2D80               	goto	l1792
 15956  0D78  3000               	movlw	0
 15957  0D79  0024               	movlb	4	; select bank4
 15958  0D7A  023F               	subwf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512),w
 15959  0D7B  30CB               	movlw	203
 15960  0D7C  1903               	skipnz
 15961  0D7D  023E               	subwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+512),w
 15962  0D7E  1803               	skipnc
 15963  0D7F  2CD1               	goto	l14124
 15964  0D80                     l1792:	
 15965  0D80  0024               	movlb	4	; select bank4
 15966  0D81  1BBF               	btfsc	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512),7
 15967  0D82  2D8F               	goto	l14150
 15968  0D83  3000               	movlw	0
 15969  0D84  023F               	subwf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512),w
 15970  0D85  3028               	movlw	40
 15971  0D86  1903               	skipnz
 15972  0D87  023E               	subwf	BVH2_Appl_Layer@Sb4_PI_sum^(0+512),w
 15973  0D88  1C03               	skipc
 15974  0D89  2D8F               	goto	l14150
 15975  0D8A  083F               	movf	(BVH2_Appl_Layer@Sb4_PI_sum+1)^(0+512),w
 15976  0D8B  00A7               	movwf	(_BVH2_Appl_Layer$1218+1)^(0+512)
 15977  0D8C  083E               	movf	BVH2_Appl_Layer@Sb4_PI_sum^(0+512),w
 15978  0D8D  00A6               	movwf	_BVH2_Appl_Layer$1218^(0+512)
 15979  0D8E  2D92               	goto	l1796
 15980  0D8F                     l14150:	
 15981  0D8F  3028               	movlw	40
 15982  0D90  00A6               	movwf	_BVH2_Appl_Layer$1218^(0+512)
 15983  0D91  01A7               	clrf	(_BVH2_Appl_Layer$1218+1)^(0+512)
 15984  0D92                     l1796:	
 15985  0D92  0827               	movf	(_BVH2_Appl_Layer$1218+1)^(0+512),w
 15986  0D93  00BA               	movwf	(BVH2_Appl_Layer@Sb2_Switch2+1)^(0+512)
 15987  0D94  0826               	movf	_BVH2_Appl_Layer$1218^(0+512),w
 15988  0D95                     L32:	
 15989  0D95  00B9               	movwf	BVH2_Appl_Layer@Sb2_Switch2^(0+512)
 15990  0D96                     l14154:	
 15991                           
 15992                           ;BVH2_Appl_Layer.c: 1640: bl_Pumpoff_Alarm = Sb1_Logical_Operator2;
 15993  0D96  083A               	movf	(BVH2_Appl_Layer@Sb2_Switch2+1)^(0+512),w
 15994  0D97  0020               	movlb	0	; select bank0
 15995  0D98  00B3               	movwf	??_BVH2_Appl_Layer+1
 15996  0D99  0024               	movlb	4	; select bank4
 15997  0D9A  0839               	movf	BVH2_Appl_Layer@Sb2_Switch2^(0+512),w
 15998  0D9B  0020               	movlb	0	; select bank0
 15999  0D9C  00B2               	movwf	??_BVH2_Appl_Layer
 16000  0D9D  36B3               	lsrf	??_BVH2_Appl_Layer+1,f
 16001  0D9E  0CB2               	rrf	??_BVH2_Appl_Layer,f
 16002  0D9F  0832               	movf	??_BVH2_Appl_Layer,w
 16003  0DA0  0021               	movlb	1	; select bank1
 16004  0DA1  00CB               	movwf	_ui8_duty_cycle_mat^(0+128)
 16005                           
 16006                           ;BVH2_Appl_Layer.c: 1641: X_Sb4_Intergrator_TriggerIn = Sb2_Logical_Operator2;
 16007  0DA2  0024               	movlb	4	; select bank4
 16008  0DA3  0836               	movf	BVH2_Appl_Layer@Sb2_Logical_Operator2^(0+512),w
 16009  0DA4  0022               	movlb	2	; select bank2
 16010  0DA5  00EC               	movwf	BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn^(0+256)
 16011                           
 16012                           ;BVH2_Appl_Layer.c: 1645: X_Sb4_Intergrator = X_Sb4_Intergrator + ((Int32) (Int16) ((((I
      +                          nt16) ui8_Ki_mat) * Sb2_Error) <<
 16013                           ;BVH2_Appl_Layer.c: 1646: 3));
 16014  0DA6  0023               	movlb	3	; select bank3
 16015  0DA7  084B               	movf	(_ui8_Ki_mat+1)^(0+384),w
 16016  0DA8  0020               	movlb	0	; select bank0
 16017  0DA9  00A5               	movwf	___wmul@multiplier+1
 16018  0DAA  0023               	movlb	3	; select bank3
 16019  0DAB  084A               	movf	_ui8_Ki_mat^(0+384),w
 16020  0DAC  0020               	movlb	0	; select bank0
 16021  0DAD  00A4               	movwf	___wmul@multiplier
 16022  0DAE  27CD               	fcall	PL72	;call to abstracted procedure
 16023  0DAF  3196  263C  3188   	fcall	___wmul
 16024  0DB2  0824               	movf	?___wmul,w
 16025  0DB3  00B2               	movwf	??_BVH2_Appl_Layer
 16026  0DB4  0825               	movf	?___wmul+1,w
 16027  0DB5  00B3               	movwf	??_BVH2_Appl_Layer+1
 16028  0DB6  35B2               	lslf	??_BVH2_Appl_Layer,f
 16029  0DB7  0DB3               	rlf	??_BVH2_Appl_Layer+1,f
 16030  0DB8  35B2               	lslf	??_BVH2_Appl_Layer,f
 16031  0DB9  0DB3               	rlf	??_BVH2_Appl_Layer+1,f
 16032  0DBA  35B2               	lslf	??_BVH2_Appl_Layer,f
 16033  0DBB  0DB3               	rlf	??_BVH2_Appl_Layer+1,f
 16034  0DBC  0832               	movf	??_BVH2_Appl_Layer,w
 16035  0DBD  00B4               	movwf	??_BVH2_Appl_Layer+2
 16036  0DBE  0833               	movf	??_BVH2_Appl_Layer+1,w
 16037  0DBF  00B5               	movwf	??_BVH2_Appl_Layer+3
 16038  0DC0  3000               	movlw	0
 16039  0DC1  1BB5               	btfsc	??_BVH2_Appl_Layer+3,7
 16040  0DC2  30FF               	movlw	255
 16041  0DC3  00B6               	movwf	??_BVH2_Appl_Layer+4
 16042  0DC4  00B7               	movwf	??_BVH2_Appl_Layer+5
 16043  0DC5  0834               	movf	??_BVH2_Appl_Layer+2,w
 16044  0DC6  0022               	movlb	2	; select bank2
 16045  0DC7  07E8               	addwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),f
 16046  0DC8  0020               	movlb	0	; select bank0
 16047  0DC9  0835               	movf	??_BVH2_Appl_Layer+3,w
 16048  0DCA  0022               	movlb	2	; select bank2
 16049  0DCB  3DE9               	addwfc	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),f
 16050  0DCC  0020               	movlb	0	; select bank0
 16051  0DCD  0836               	movf	??_BVH2_Appl_Layer+4,w
 16052  0DCE  0022               	movlb	2	; select bank2
 16053  0DCF  3DEA               	addwfc	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),f
 16054  0DD0  0020               	movlb	0	; select bank0
 16055  0DD1  0837               	movf	??_BVH2_Appl_Layer+5,w
 16056  0DD2  0022               	movlb	2	; select bank2
 16057  0DD3  3DEB               	addwfc	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),f
 16058                           
 16059                           ;BVH2_Appl_Layer.c: 1649: X_Sb4_Intergrator = ( (X_Sb4_Intergrator > 161600) ? 161600 : 
      +                          ( (X_Sb4_Intergrator < 32000) ? 32000 : X_Sb4_Intergrator ) );
 16060  0DD4  1BEB               	btfsc	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),7
 16061  0DD5  2DE1               	goto	l14162
 16062  0DD6  086B               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 16063  0DD7  1D03               	btfss	3,2
 16064  0DD8  2E12               	goto	l14168
 16065  0DD9  3041               	movlw	65
 16066  0DDA  0268               	subwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),w
 16067  0DDB  3077               	movlw	119
 16068  0DDC  3B69               	subwfb	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 16069  0DDD  3002               	movlw	2
 16070  0DDE  3B6A               	subwfb	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 16071  0DDF  1803               	btfsc	3,0
 16072  0DE0  2E12               	goto	l14168
 16073  0DE1                     l14162:	
 16074  0DE1  1BEB               	btfsc	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),7
 16075  0DE2  2DFD               	goto	l14166
 16076  0DE3  086B               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 16077  0DE4  1D03               	btfss	3,2
 16078  0DE5  2DED               	goto	l14164
 16079  0DE6  086A               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 16080  0DE7  1D03               	btfss	3,2
 16081  0DE8  2DED               	goto	l14164
 16082  0DE9  307D               	movlw	125
 16083  0DEA  0269               	subwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 16084  0DEB  1C03               	btfss	3,0
 16085  0DEC  2DFD               	goto	l14166
 16086  0DED                     l14164:	
 16087  0DED  086B               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256),w
 16088  0DEE  0024               	movlb	4	; select bank4
 16089  0DEF  00A3               	movwf	(_BVH2_Appl_Layer$1219+3)^(0+512)
 16090  0DF0  0022               	movlb	2	; select bank2
 16091  0DF1  086A               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256),w
 16092  0DF2  0024               	movlb	4	; select bank4
 16093  0DF3  00A2               	movwf	(_BVH2_Appl_Layer$1219+2)^(0+512)
 16094  0DF4  0022               	movlb	2	; select bank2
 16095  0DF5  0869               	movf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256),w
 16096  0DF6  0024               	movlb	4	; select bank4
 16097  0DF7  00A1               	movwf	(_BVH2_Appl_Layer$1219+1)^(0+512)
 16098  0DF8  0022               	movlb	2	; select bank2
 16099  0DF9  0868               	movf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256),w
 16100  0DFA  0024               	movlb	4	; select bank4
 16101  0DFB  00A0               	movwf	_BVH2_Appl_Layer$1219^(0+512)
 16102  0DFC  2E03               	goto	l1804
 16103  0DFD                     l14166:	
 16104  0DFD  0024               	movlb	4	; select bank4
 16105  0DFE  307D               	movlw	125
 16106  0DFF  01A3               	clrf	(_BVH2_Appl_Layer$1219+3)^(0+512)
 16107  0E00  01A2               	clrf	(_BVH2_Appl_Layer$1219+2)^(0+512)
 16108  0E01  00A1               	movwf	(_BVH2_Appl_Layer$1219+1)^(0+512)
 16109  0E02  01A0               	clrf	_BVH2_Appl_Layer$1219^(0+512)
 16110  0E03                     l1804:	
 16111  0E03  0823               	movf	(_BVH2_Appl_Layer$1219+3)^(0+512),w
 16112  0E04  0022               	movlb	2	; select bank2
 16113  0E05  00EB               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256)
 16114  0E06  0024               	movlb	4	; select bank4
 16115  0E07  0822               	movf	(_BVH2_Appl_Layer$1219+2)^(0+512),w
 16116  0E08  0022               	movlb	2	; select bank2
 16117  0E09  00EA               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256)
 16118  0E0A  0024               	movlb	4	; select bank4
 16119  0E0B  0821               	movf	(_BVH2_Appl_Layer$1219+1)^(0+512),w
 16120  0E0C  0022               	movlb	2	; select bank2
 16121  0E0D  00E9               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256)
 16122  0E0E  0024               	movlb	4	; select bank4
 16123  0E0F  0820               	movf	_BVH2_Appl_Layer$1219^(0+512),w
 16124  0E10  0022               	movlb	2	; select bank2
 16125  0E11  2E18               	goto	L33
 16126  0E12                     l14168:	
 16127  0E12  3002               	movlw	2
 16128  0E13  01EB               	clrf	(BVH2_Appl_Layer@X_Sb4_Intergrator+3)^(0+256)
 16129  0E14  00EA               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+2)^(0+256)
 16130  0E15  3077               	movlw	119
 16131  0E16  00E9               	movwf	(BVH2_Appl_Layer@X_Sb4_Intergrator+1)^(0+256)
 16132  0E17  3040               	movlw	64
 16133  0E18                     L33:	
 16134  0E18  00E8               	movwf	BVH2_Appl_Layer@X_Sb4_Intergrator^(0+256)
 16135                           
 16136                           ;BVH2_Appl_Layer.c: 1652: Sb1_BVH2_Appl_Layer_FirstRun = 0;
 16137  0E19  01ED               	clrf	BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun^(0+256)
 16138  0E1A  0008               	return
 16139  0E1B                     __end_of_BVH2_Appl_Layer:	
 16140  0E1B                     __ptext48:	
 16141 ;; *************** function _Cb1_Current_An___High_node_fcn1 *****************
 16142 ;; Defined at:
 16143 ;;		line 1676 in file "../T_Link/BVH2_Appl_Layer.c"
 16144 ;; Parameters:    Size  Location     Type
 16145 ;;		None
 16146 ;; Auto vars:     Size  Location     Type
 16147 ;;		None
 16148 ;; Return value:  Size  Location     Type
 16149 ;;                  1    wreg      void 
 16150 ;; Registers used:
 16151 ;;		wreg, status,2, status,0
 16152 ;; Tracked objects:
 16153 ;;		On entry : 1F/1
 16154 ;;		On exit  : 1F/1
 16155 ;;		Unchanged: 0/0
 16156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16157 ;;      Params:         0       0       0       0       0       0       0       0
 16158 ;;      Locals:         0       0       0       0       0       0       0       0
 16159 ;;      Temps:          0       0       0       0       0       0       0       0
 16160 ;;      Totals:         0       0       0       0       0       0       0       0
 16161 ;;Total ram usage:        0 bytes
 16162 ;; Hardware stack levels used:    1
 16163 ;; Hardware stack levels required when called:    3
 16164 ;; This function calls:
 16165 ;;		Nothing
 16166 ;; This function is called by:
 16167 ;;		_BVH2_Appl_Layer
 16168 ;; This function uses a non-reentrant model
 16169 ;;
 16170                           
 16171                           
 16172                           ;psect for function _Cb1_Current_An___High_node_fcn1
 16173  0E1B                     _Cb1_Current_An___High_node_fcn1:	
 16174                           
 16175                           ;BVH2_Appl_Layer.c: 1680: if (bool_mat_currAlarm_bldc) {
 16176                           
 16177                           ;incstack = 0
 16178                           ; Regs used in _Cb1_Current_An___High_node_fcn1: [wreg+status,2+status,0]
 16179  0E1B  084A               	movf	_bool_mat_currAlarm_bldc^(0+128),w
 16180  0E1C  1903               	btfsc	3,2
 16181  0E1D  2E2B               	goto	l9954
 16182                           
 16183                           ;BVH2_Appl_Layer.c: 1682: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (
      +                          unsigned int)
 16184                           ;BVH2_Appl_Layer.c: 1683: (UInt8)2;
 16185  0E1E  0845               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 16186  0E1F  39F0               	andlw	-16
 16187  0E20  3802               	iorlw	2
 16188  0E21  00C5               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 16189                           
 16190                           ;BVH2_Appl_Layer.c: 1684: Cb1_StateCnt = 0 ;
 16191  0E22  01A6               	clrf	_Cb1_StateCnt^(0+128)
 16192  0E23  01A7               	clrf	(_Cb1_StateCnt+1)^(0+128)
 16193  0E24  2E27               	goto	l9952
 16194  0E25                     L42:	
 16195                           ;BVH2_Appl_Layer.c: 1690: SIBFS_Current_Analysis_High_b.Cb1_Current_Analysis_High_ns = (
      +                          unsigned int)
 16196                           ;BVH2_Appl_Layer.c: 1691: (UInt8)5;
 16197                           
 16198                           
 16199                           ;BVH2_Appl_Layer.c: 1692: Cb1_oShutoff = 0;
 16200                           
 16201                           ;BVH2_Appl_Layer.c: 1693: Cb1_oCurrentAlarm = 0;
 16202  0E25  27E4               	fcall	PL94	;call to abstracted procedure
 16203                           
 16204                           ;BVH2_Appl_Layer.c: 1694: Cb1_RestartCounter = 0 ;
 16205  0E26  01D1               	clrf	_Cb1_RestartCounter^(0+256)
 16206  0E27                     l9952:	
 16207                           
 16208                           ;BVH2_Appl_Layer.c: 1685: SIBFS_Current_Analysis_High_b.Cb1_glflag = 3 ;
 16209  0E27  3030               	movlw	48
 16210  0E28  0021               	movlb	1	; select bank1
 16211  0E29  04C5               	iorwf	_SIBFS_Current_Analysis_High_b^(0+128),f
 16212                           
 16213                           ;BVH2_Appl_Layer.c: 1686: }
 16214  0E2A  0008               	return
 16215  0E2B                     l9954:	
 16216                           
 16217                           ;BVH2_Appl_Layer.c: 1687: else {
 16218                           ;BVH2_Appl_Layer.c: 1688: if (Cb1_StateCnt > 100) {
 16219  0E2B  3000               	movlw	0
 16220  0E2C  0227               	subwf	(_Cb1_StateCnt+1)^(0+128),w
 16221  0E2D  3065               	movlw	101
 16222  0E2E  1903               	skipnz
 16223  0E2F  0226               	subwf	_Cb1_StateCnt^(0+128),w
 16224                           
 16225                           ;BVH2_Appl_Layer.c: 1697: else {
 16226                           ;BVH2_Appl_Layer.c: 1698: SIBFS_Current_Analysis_High_b.Cb1_glflag = 1 ;
 16227  0E30  0845               	movf	_SIBFS_Current_Analysis_High_b^(0+128),w
 16228  0E31  1803               	btfsc	3,0
 16229  0E32  2E25               	goto	L42
 16230  0E33  39CF               	andlw	-49
 16231  0E34  3810               	iorlw	16
 16232  0E35  00C5               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 16233  0E36  0008               	return
 16234  0E37                     __end_of_Cb1_Current_An___High_node_fcn1:	
 16235  0E37                     __ptext46:	
 16236 ;; *************** function _Cb44_Pic_etat_monitor_node_fcn1 *****************
 16237 ;; Defined at:
 16238 ;;		line 1839 in file "../T_Link/BVH2_Appl_Layer.c"
 16239 ;; Parameters:    Size  Location     Type
 16240 ;;		None
 16241 ;; Auto vars:     Size  Location     Type
 16242 ;;		None
 16243 ;; Return value:  Size  Location     Type
 16244 ;;                  1    wreg      void 
 16245 ;; Registers used:
 16246 ;;		wreg, status,2, status,0
 16247 ;; Tracked objects:
 16248 ;;		On entry : 1F/1
 16249 ;;		On exit  : 1F/1
 16250 ;;		Unchanged: 0/0
 16251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16252 ;;      Params:         0       0       0       0       0       0       0       0
 16253 ;;      Locals:         0       0       0       0       0       0       0       0
 16254 ;;      Temps:          0       0       0       0       0       0       0       0
 16255 ;;      Totals:         0       0       0       0       0       0       0       0
 16256 ;;Total ram usage:        0 bytes
 16257 ;; Hardware stack levels used:    1
 16258 ;; Hardware stack levels required when called:    3
 16259 ;; This function calls:
 16260 ;;		Nothing
 16261 ;; This function is called by:
 16262 ;;		_BVH2_Appl_Layer
 16263 ;; This function uses a non-reentrant model
 16264 ;;
 16265                           
 16266                           
 16267                           ;psect for function _Cb44_Pic_etat_monitor_node_fcn1
 16268  0E37                     _Cb44_Pic_etat_monitor_node_fcn1:	
 16269                           
 16270                           ;BVH2_Appl_Layer.c: 1849: else {
 16271                           ;BVH2_Appl_Layer.c: 1850: if (Cb44_StateCnt > 5) {
 16272                           
 16273                           ;BVH2_Appl_Layer.c: 1843: if (bool_mat_pic_etat) {
 16274                           
 16275                           ;incstack = 0
 16276                           ; Regs used in _Cb44_Pic_etat_monitor_node_fcn1: [wreg+status,2+status,0]
 16277  0E37  3000               	movlw	0
 16278  0E38  0225               	subwf	(_Cb44_StateCnt+1)^(0+128),w
 16279  0E39  3006               	movlw	6
 16280  0E3A  1903               	skipnz
 16281  0E3B  0224               	subwf	_Cb44_StateCnt^(0+128),w
 16282                           
 16283                           ;BVH2_Appl_Layer.c: 1852: SIBFS_Pic_etat_monitor_b.Cb44_Pic_etat_monitor_ns = (unsigned 
      +                          int) (UInt8)3;
 16284  0E3C  0843               	movf	_SIBFS_Pic_etat_monitor_b^(0+128),w
 16285  0E3D  1C03               	skipc
 16286  0E3E  2E48               	goto	L40
 16287  0E3F  39F8               	andlw	-8
 16288  0E40  3803               	iorlw	3
 16289  0E41  00C3               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
 16290                           
 16291                           ;BVH2_Appl_Layer.c: 1854: Cb44_oAlarm = 0;
 16292  0E42  0022               	movlb	2	; select bank2
 16293  0E43  3018               	movlw	24
 16294  0E44  01C9               	clrf	_Cb44_oShutoff^(0+256)
 16295                           
 16296                           ;BVH2_Appl_Layer.c: 1855: SIBFS_Pic_etat_monitor_b.Cb44_glflag = 3 ;
 16297  0E45  0021               	movlb	1	; select bank1
 16298  0E46  04C3               	iorwf	_SIBFS_Pic_etat_monitor_b^(0+128),f
 16299                           
 16300                           ;BVH2_Appl_Layer.c: 1856: }
 16301  0E47  0008               	return
 16302  0E48                     L40:	
 16303                           ;BVH2_Appl_Layer.c: 1857: else {
 16304                           ;BVH2_Appl_Layer.c: 1858: SIBFS_Pic_etat_monitor_b.Cb44_glflag = 1 ;
 16305                           
 16306  0E48  39E7               	andlw	-25
 16307  0E49  3808               	iorlw	8
 16308  0E4A  00C3               	movwf	_SIBFS_Pic_etat_monitor_b^(0+128)
 16309  0E4B  0008               	return
 16310  0E4C                     __end_of_Cb44_Pic_etat_monitor_node_fcn1:	
 16311  0E4C                     __ptext43:	
 16312 ;; *************** function ___lmul *****************
 16313 ;; Defined at:
 16314 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul32.c"
 16315 ;; Parameters:    Size  Location     Type
 16316 ;;  multiplier      4    4[BANK0 ] unsigned long 
 16317 ;;  multiplicand    4    8[BANK0 ] unsigned long 
 16318 ;; Auto vars:     Size  Location     Type
 16319 ;;  product         4   12[BANK0 ] unsigned long 
 16320 ;; Return value:  Size  Location     Type
 16321 ;;                  4    4[BANK0 ] unsigned long 
 16322 ;; Registers used:
 16323 ;;		wreg, status,2, status,0
 16324 ;; Tracked objects:
 16325 ;;		On entry : 1F/0
 16326 ;;		On exit  : 1F/0
 16327 ;;		Unchanged: 0/0
 16328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16329 ;;      Params:         0       8       0       0       0       0       0       0
 16330 ;;      Locals:         0       4       0       0       0       0       0       0
 16331 ;;      Temps:          0       0       0       0       0       0       0       0
 16332 ;;      Totals:         0      12       0       0       0       0       0       0
 16333 ;;Total ram usage:       12 bytes
 16334 ;; Hardware stack levels used:    1
 16335 ;; Hardware stack levels required when called:    3
 16336 ;; This function calls:
 16337 ;;		Nothing
 16338 ;; This function is called by:
 16339 ;;		_BVH2_Appl_Layer
 16340 ;; This function uses a non-reentrant model
 16341 ;;
 16342                           
 16343                           
 16344                           ;psect for function ___lmul
 16345  0E4C                     ___lmul:	
 16346                           
 16347                           ;incstack = 0
 16348                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 16349  0E4C  01AC               	clrf	___lmul@product
 16350  0E4D  01AD               	clrf	___lmul@product+1
 16351  0E4E  01AE               	clrf	___lmul@product+2
 16352  0E4F  01AF               	clrf	___lmul@product+3
 16353  0E50                     l2073:	
 16354  0E50  1C24               	btfss	___lmul@multiplier,0
 16355  0E51  2E5A               	goto	l9988
 16356  0E52  0828               	movf	___lmul@multiplicand,w
 16357  0E53  07AC               	addwf	___lmul@product,f
 16358  0E54  0829               	movf	___lmul@multiplicand+1,w
 16359  0E55  3DAD               	addwfc	___lmul@product+1,f
 16360  0E56  082A               	movf	___lmul@multiplicand+2,w
 16361  0E57  3DAE               	addwfc	___lmul@product+2,f
 16362  0E58  082B               	movf	___lmul@multiplicand+3,w
 16363  0E59  3DAF               	addwfc	___lmul@product+3,f
 16364  0E5A                     l9988:	
 16365  0E5A  35A8               	lslf	___lmul@multiplicand,f
 16366  0E5B  0DA9               	rlf	___lmul@multiplicand+1,f
 16367  0E5C  0DAA               	rlf	___lmul@multiplicand+2,f
 16368  0E5D  0DAB               	rlf	___lmul@multiplicand+3,f
 16369  0E5E  36A7               	lsrf	___lmul@multiplier+3,f
 16370  0E5F  0CA6               	rrf	___lmul@multiplier+2,f
 16371  0E60  0CA5               	rrf	___lmul@multiplier+1,f
 16372  0E61  0CA4               	rrf	___lmul@multiplier,f
 16373  0E62  0827               	movf	___lmul@multiplier+3,w
 16374  0E63  0426               	iorwf	___lmul@multiplier+2,w
 16375  0E64  0425               	iorwf	___lmul@multiplier+1,w
 16376  0E65  0424               	iorwf	___lmul@multiplier,w
 16377  0E66  1D03               	skipz
 16378  0E67  2E50               	goto	l2073
 16379  0E68  082F               	movf	___lmul@product+3,w
 16380  0E69  00A7               	movwf	?___lmul+3
 16381  0E6A  082E               	movf	___lmul@product+2,w
 16382  0E6B  00A6               	movwf	?___lmul+2
 16383  0E6C  082D               	movf	___lmul@product+1,w
 16384  0E6D  00A5               	movwf	?___lmul+1
 16385  0E6E  082C               	movf	___lmul@product,w
 16386  0E6F  00A4               	movwf	?___lmul
 16387  0E70  0008               	return
 16388  0E71                     __end_of___lmul:	
 16389  0E71                     __ptext47:	
 16390 ;; *************** function _Cb34_PWM_Detection_node_fcn1 *****************
 16391 ;; Defined at:
 16392 ;;		line 1720 in file "../T_Link/BVH2_Appl_Layer.c"
 16393 ;; Parameters:    Size  Location     Type
 16394 ;;		None
 16395 ;; Auto vars:     Size  Location     Type
 16396 ;;		None
 16397 ;; Return value:  Size  Location     Type
 16398 ;;                  1    wreg      void 
 16399 ;; Registers used:
 16400 ;;		wreg, status,2, status,0
 16401 ;; Tracked objects:
 16402 ;;		On entry : 1F/1
 16403 ;;		On exit  : 1D/0
 16404 ;;		Unchanged: 0/0
 16405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16406 ;;      Params:         0       0       0       0       0       0       0       0
 16407 ;;      Locals:         0       0       0       0       0       0       0       0
 16408 ;;      Temps:          0       0       0       0       0       0       0       0
 16409 ;;      Totals:         0       0       0       0       0       0       0       0
 16410 ;;Total ram usage:        0 bytes
 16411 ;; Hardware stack levels used:    1
 16412 ;; Hardware stack levels required when called:    3
 16413 ;; This function calls:
 16414 ;;		Nothing
 16415 ;; This function is called by:
 16416 ;;		_BVH2_Appl_Layer
 16417 ;; This function uses a non-reentrant model
 16418 ;;
 16419                           
 16420                           
 16421                           ;psect for function _Cb34_PWM_Detection_node_fcn1
 16422  0E71                     _Cb34_PWM_Detection_node_fcn1:	
 16423                           
 16424                           ;BVH2_Appl_Layer.c: 1722: if ((Cb34_idPWM < 1) || (Cb34_idPWM > 199)) {
 16425                           
 16426                           ;incstack = 0
 16427                           ; Regs used in _Cb34_PWM_Detection_node_fcn1: [wreg+status,2+status,0]
 16428  0E71  0020               	movlb	0	; select bank0
 16429  0E72  085D               	movf	_Cb34_idPWM,w
 16430  0E73  1903               	btfsc	3,2
 16431  0E74  2E79               	goto	l9812
 16432  0E75  30C8               	movlw	200
 16433  0E76  025D               	subwf	_Cb34_idPWM,w
 16434  0E77  1C03               	skipc
 16435  0E78  2E83               	goto	l9824
 16436  0E79                     l9812:	
 16437                           
 16438                           ;BVH2_Appl_Layer.c: 1724: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t) (UInt8)7;
 16439  0E79  0021               	movlb	1	; select bank1
 16440  0E7A  0844               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 16441  0E7B  39F0               	andlw	-16
 16442  0E7C  3807               	iorlw	7
 16443                           
 16444                           ;BVH2_Appl_Layer.c: 1725: Cb34_odPumpOff = 0;
 16445                           
 16446                           ;BVH2_Appl_Layer.c: 1726: Cb34_odFixedValueSel = 1;
 16447  0E7D  27F2               	fcall	PL112	;call to abstracted procedure
 16448                           
 16449                           ;BVH2_Appl_Layer.c: 1727: Cb34_odFixedLowValueSel = 0;
 16450  0E7E  01CC               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 16451                           
 16452                           ;BVH2_Appl_Layer.c: 1728: Cb34_oPWM_SC_Alarm = 0;
 16453  0E7F  01CD               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 16454                           
 16455                           ;BVH2_Appl_Layer.c: 1729: Cb34_oPWM_Alarm = 1;
 16456  0E80  01CE               	clrf	_Cb34_oPWM_Alarm^(0+256)
 16457  0E81  0ACE               	incf	_Cb34_oPWM_Alarm^(0+256),f
 16458                           
 16459                           ;BVH2_Appl_Layer.c: 1730: }
 16460  0E82  0008               	return
 16461  0E83                     l9824:	
 16462                           
 16463                           ;BVH2_Appl_Layer.c: 1731: else {
 16464                           ;BVH2_Appl_Layer.c: 1734: if ((ui16_PWM_Freq_mat < 36000) || (ui16_PWM_Freq_mat > 44000)
      +                          ) {
 16465  0E83  308C               	movlw	140
 16466  0E84  0022               	movlb	2	; select bank2
 16467  0E85  022A               	subwf	(_ui16_PWM_Freq_mat+1)^(0+256),w
 16468  0E86  30A0               	movlw	160
 16469  0E87  1903               	skipnz
 16470  0E88  0229               	subwf	_ui16_PWM_Freq_mat^(0+256),w
 16471  0E89  1C03               	skipc
 16472  0E8A  2E92               	goto	l9828
 16473  0E8B  30AB               	movlw	171
 16474  0E8C  022A               	subwf	(_ui16_PWM_Freq_mat+1)^(0+256),w
 16475  0E8D  30E1               	movlw	225
 16476  0E8E  1903               	skipnz
 16477  0E8F  0229               	subwf	_ui16_PWM_Freq_mat^(0+256),w
 16478  0E90  1C03               	skipc
 16479  0E91  2EAC               	goto	l9840
 16480  0E92                     l9828:	
 16481                           
 16482                           ;BVH2_Appl_Layer.c: 1736: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t) (UInt8)6;
 16483  0E92  0021               	movlb	1	; select bank1
 16484  0E93  0844               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 16485  0E94  39F0               	andlw	-16
 16486  0E95  3806               	iorlw	6
 16487  0E96  2E9B               	goto	L41
 16488  0E97                     l9842:	
 16489                           
 16490                           ;BVH2_Appl_Layer.c: 1746: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t) (UInt8)3;
 16491  0E97  0021               	movlb	1	; select bank1
 16492  0E98  0844               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 16493  0E99  39F0               	andlw	-16
 16494  0E9A  3803               	iorlw	3
 16495  0E9B                     L41:	
 16496                           
 16497                           ;BVH2_Appl_Layer.c: 1737: Cb34_odPumpOff = 0;
 16498                           
 16499                           ;BVH2_Appl_Layer.c: 1738: Cb34_odFixedValueSel = 1;
 16500  0E9B  27F2  3188         	fcall	PL112	;call to abstracted procedure
 16501  0E9D  2EA7               	goto	l9834
 16502  0E9E                     l9856:	
 16503                           
 16504                           ;BVH2_Appl_Layer.c: 1757: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t)
 16505                           ;BVH2_Appl_Layer.c: 1758: (UInt8)8;
 16506  0E9E  0021               	movlb	1	; select bank1
 16507  0E9F  0844               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 16508  0EA0  39F0               	andlw	-16
 16509  0EA1  3808               	iorlw	8
 16510  0EA2  00C4               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 16511                           
 16512                           ;BVH2_Appl_Layer.c: 1759: Cb34_odPumpOff = 1;
 16513  0EA3  0022               	movlb	2	; select bank2
 16514  0EA4  01CA               	clrf	_Cb34_odPumpOff^(0+256)
 16515  0EA5  0ACA               	incf	_Cb34_odPumpOff^(0+256),f
 16516                           
 16517                           ;BVH2_Appl_Layer.c: 1760: Cb34_odFixedValueSel = 0;
 16518  0EA6  01CB               	clrf	_Cb34_odFixedValueSel^(0+256)
 16519  0EA7                     l9834:	
 16520                           
 16521                           ;BVH2_Appl_Layer.c: 1739: Cb34_odFixedLowValueSel = 0;
 16522  0EA7  01CC               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 16523                           
 16524                           ;BVH2_Appl_Layer.c: 1740: Cb34_oPWM_SC_Alarm = 1;
 16525  0EA8  01CD               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 16526  0EA9  0ACD               	incf	_Cb34_oPWM_SC_Alarm^(0+256),f
 16527  0EAA                     l9838:	
 16528                           
 16529                           ;BVH2_Appl_Layer.c: 1741: Cb34_oPWM_Alarm = 0;
 16530  0EAA  01CE               	clrf	_Cb34_oPWM_Alarm^(0+256)
 16531                           
 16532                           ;BVH2_Appl_Layer.c: 1742: }
 16533  0EAB  0008               	return
 16534  0EAC                     l9840:	
 16535                           
 16536                           ;BVH2_Appl_Layer.c: 1743: else {
 16537                           ;BVH2_Appl_Layer.c: 1744: if (Cb34_idPWM <= 5) {
 16538  0EAC  3006               	movlw	6
 16539  0EAD  0020               	movlb	0	; select bank0
 16540  0EAE  025D               	subwf	_Cb34_idPWM,w
 16541  0EAF  1C03               	btfss	3,0
 16542  0EB0  2E97               	goto	l9842
 16543                           
 16544                           ;BVH2_Appl_Layer.c: 1753: else {
 16545                           ;BVH2_Appl_Layer.c: 1754: if (Cb34_idPWM < 9) {
 16546  0EB1  3009               	movlw	9
 16547  0EB2  025D               	subwf	_Cb34_idPWM,w
 16548  0EB3  1C03               	btfss	3,0
 16549  0EB4  2E9E               	goto	l9856
 16550                           
 16551                           ;BVH2_Appl_Layer.c: 1765: else {
 16552                           ;BVH2_Appl_Layer.c: 1766: if (Cb34_idPWM > 191) {
 16553  0EB5  30C0               	movlw	192
 16554  0EB6  025D               	subwf	_Cb34_idPWM,w
 16555  0EB7  1C03               	skipc
 16556  0EB8  2EBE               	goto	l9882
 16557                           
 16558                           ;BVH2_Appl_Layer.c: 1769: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t)
 16559                           ;BVH2_Appl_Layer.c: 1770: (UInt8)4;
 16560  0EB9  0021               	movlb	1	; select bank1
 16561  0EBA  0844               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 16562  0EBB  39F0               	andlw	-16
 16563  0EBC  3804               	iorlw	4
 16564  0EBD  2E9B               	goto	L41
 16565  0EBE                     l9882:	
 16566                           
 16567                           ;BVH2_Appl_Layer.c: 1777: else {
 16568                           ;BVH2_Appl_Layer.c: 1778: if (Cb34_idPWM >= 23) {
 16569  0EBE  3017               	movlw	23
 16570  0EBF  025D               	subwf	_Cb34_idPWM,w
 16571  0EC0  1C03               	skipc
 16572  0EC1  2ECD               	goto	l9896
 16573                           
 16574                           ;BVH2_Appl_Layer.c: 1781: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t)
 16575                           ;BVH2_Appl_Layer.c: 1782: (UInt8)2;
 16576  0EC2  0021               	movlb	1	; select bank1
 16577  0EC3  0844               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 16578  0EC4  39F0               	andlw	-16
 16579  0EC5  3802               	iorlw	2
 16580  0EC6  00C4               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 16581                           
 16582                           ;BVH2_Appl_Layer.c: 1783: Cb34_odPumpOff = 0;
 16583  0EC7  0022               	movlb	2	; select bank2
 16584  0EC8  01CA               	clrf	_Cb34_odPumpOff^(0+256)
 16585                           
 16586                           ;BVH2_Appl_Layer.c: 1784: Cb34_odFixedLowValueSel = 0;
 16587  0EC9  01CC               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 16588                           
 16589                           ;BVH2_Appl_Layer.c: 1785: Cb34_odFixedValueSel = 0;
 16590  0ECA  01CB               	clrf	_Cb34_odFixedValueSel^(0+256)
 16591  0ECB                     l9892:	
 16592                           
 16593                           ;BVH2_Appl_Layer.c: 1786: Cb34_oPWM_SC_Alarm = 0;
 16594  0ECB  01CD               	clrf	_Cb34_oPWM_SC_Alarm^(0+256)
 16595  0ECC  2EAA               	goto	l9838
 16596  0ECD                     l9896:	
 16597                           
 16598                           ;BVH2_Appl_Layer.c: 1789: else {
 16599                           ;BVH2_Appl_Layer.c: 1790: if (Cb34_idPWM > 19) {
 16600  0ECD  3014               	movlw	20
 16601  0ECE  025D               	subwf	_Cb34_idPWM,w
 16602  0ECF  1C03               	skipc
 16603  0ED0  2EDC               	goto	l9910
 16604                           
 16605                           ;BVH2_Appl_Layer.c: 1793: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t)
 16606                           ;BVH2_Appl_Layer.c: 1794: (UInt8)5;
 16607  0ED1  0021               	movlb	1	; select bank1
 16608  0ED2  0844               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 16609  0ED3  39F0               	andlw	-16
 16610  0ED4  3805               	iorlw	5
 16611  0ED5  00C4               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 16612                           
 16613                           ;BVH2_Appl_Layer.c: 1795: Cb34_odPumpOff = 0;
 16614  0ED6  0022               	movlb	2	; select bank2
 16615  0ED7  01CA               	clrf	_Cb34_odPumpOff^(0+256)
 16616                           
 16617                           ;BVH2_Appl_Layer.c: 1796: Cb34_odFixedValueSel = 0;
 16618  0ED8  01CB               	clrf	_Cb34_odFixedValueSel^(0+256)
 16619                           
 16620                           ;BVH2_Appl_Layer.c: 1797: Cb34_odFixedLowValueSel = 1;
 16621  0ED9  01CC               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 16622  0EDA  0ACC               	incf	_Cb34_odFixedLowValueSel^(0+256),f
 16623  0EDB  2ECB               	goto	l9892
 16624  0EDC                     l9910:	
 16625                           
 16626                           ;BVH2_Appl_Layer.c: 1801: else {
 16627                           ;BVH2_Appl_Layer.c: 1802: if (Cb34_idPWM <= 19) {
 16628  0EDC  3014               	movlw	20
 16629  0EDD  025D               	subwf	_Cb34_idPWM,w
 16630  0EDE  1803               	skipnc
 16631  0EDF  0008               	return
 16632                           
 16633                           ;BVH2_Appl_Layer.c: 1805: SIBFS_PWM_Detection_b.Cb35_PWMinput_handling_ns = (unsigned in
      +                          t)
 16634                           ;BVH2_Appl_Layer.c: 1806: (UInt8)1;
 16635  0EE0  0021               	movlb	1	; select bank1
 16636                           
 16637                           ;BVH2_Appl_Layer.c: 1807: Cb34_odPumpOff = 1;
 16638                           
 16639                           ;BVH2_Appl_Layer.c: 1808: Cb34_odFixedValueSel = 0;
 16640                           
 16641                           ;BVH2_Appl_Layer.c: 1809: Cb34_odFixedLowValueSel = 0;
 16642  0EE1  27BA  3188         	fcall	PL62	;call to abstracted procedure
 16643  0EE3  2ECB               	goto	l9892
 16644  0EE4                     __end_of_Cb34_PWM_Detection_node_fcn1:	
 16645  0EE4                     __ptext45:	
 16646 ;; *************** function _Cb56_UbatHandling_node_fcn2 *****************
 16647 ;; Defined at:
 16648 ;;		line 1880 in file "../T_Link/BVH2_Appl_Layer.c"
 16649 ;; Parameters:    Size  Location     Type
 16650 ;;		None
 16651 ;; Auto vars:     Size  Location     Type
 16652 ;;		None
 16653 ;; Return value:  Size  Location     Type
 16654 ;;                  1    wreg      void 
 16655 ;; Registers used:
 16656 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 16657 ;; Tracked objects:
 16658 ;;		On entry : 1F/1
 16659 ;;		On exit  : 1F/2
 16660 ;;		Unchanged: 0/0
 16661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16662 ;;      Params:         0       0       0       0       0       0       0       0
 16663 ;;      Locals:         0       0       0       0       0       0       0       0
 16664 ;;      Temps:          0       0       0       0       0       0       0       0
 16665 ;;      Totals:         0       0       0       0       0       0       0       0
 16666 ;;Total ram usage:        0 bytes
 16667 ;; Hardware stack levels used:    1
 16668 ;; Hardware stack levels required when called:    3
 16669 ;; This function calls:
 16670 ;;		Nothing
 16671 ;; This function is called by:
 16672 ;;		_BVH2_Appl_Layer
 16673 ;; This function uses a non-reentrant model
 16674 ;;
 16675                           
 16676                           
 16677                           ;psect for function _Cb56_UbatHandling_node_fcn2
 16678  0EE4                     _Cb56_UbatHandling_node_fcn2:	
 16679                           
 16680                           ;BVH2_Appl_Layer.c: 1883: if (((UInt8)ui8_BattVolt_mat) > 147) {
 16681                           
 16682                           ;incstack = 0
 16683                           ; Regs used in _Cb56_UbatHandling_node_fcn2: [wreg-fsr0h+status,2+status,0]
 16684  0EE4  3094               	movlw	148
 16685  0EE5  0230               	subwf	_ui8_BattVolt_mat^(0+128),w
 16686  0EE6  1803               	btfsc	3,0
 16687  0EE7  2EEF               	goto	l9928
 16688  0EE8  2F08               	goto	l9934
 16689  0EE9                     l1846:	
 16690                           ;BVH2_Appl_Layer.c: 1886: case 2: {
 16691                           
 16692                           
 16693                           ;BVH2_Appl_Layer.c: 1887: SIBFS_UbatHandling_b.Cb58_SaturationHigh = 0;
 16694  0EE9  1242               	bcf	_SIBFS_UbatHandling_b^(0+128),4
 16695                           
 16696                           ;BVH2_Appl_Layer.c: 1888: break;
 16697  0EEA  2EF8               	goto	l1847
 16698  0EEB                     l1848:	
 16699                           ;BVH2_Appl_Layer.c: 1889: }
 16700                           ;BVH2_Appl_Layer.c: 1890: case 3: {
 16701                           
 16702                           
 16703                           ;BVH2_Appl_Layer.c: 1891: SIBFS_UbatHandling_b.Cb59_SaturationLow = 0;
 16704  0EEB  12C2               	bcf	_SIBFS_UbatHandling_b^(0+128),5
 16705                           
 16706                           ;BVH2_Appl_Layer.c: 1892: break;
 16707  0EEC  2EF8               	goto	l1847
 16708  0EED                     l1849:	
 16709                           ;BVH2_Appl_Layer.c: 1893: }
 16710                           ;BVH2_Appl_Layer.c: 1894: default: {
 16711                           
 16712                           
 16713                           ;BVH2_Appl_Layer.c: 1895: SIBFS_UbatHandling_b.Cb60_NormalUbat = 0;
 16714  0EED  1342               	bcf	_SIBFS_UbatHandling_b^(0+128),6
 16715                           
 16716                           ;BVH2_Appl_Layer.c: 1896: }
 16717                           ;BVH2_Appl_Layer.c: 1897: }
 16718  0EEE  2EF8               	goto	l1847
 16719  0EEF                     l9928:	
 16720  0EEF  0842               	movf	_SIBFS_UbatHandling_b^(0+128),w
 16721  0EF0  3907               	andlw	7
 16722                           
 16723                           ; Switch size 1, requested type "space"
 16724                           ; Number of cases is 2, Range of values is 2 to 3
 16725                           ; switch strategies available:
 16726                           ; Name         Instructions Cycles
 16727                           ; simple_byte            7     4 (average)
 16728                           ; direct_byte           13     9 (fixed)
 16729                           ; jumptable            263     9 (fixed)
 16730                           ;	Chosen strategy is simple_byte
 16731  0EF1  3A02               	xorlw	2	; case 2
 16732  0EF2  1903               	skipnz
 16733  0EF3  2EE9               	goto	l1846
 16734  0EF4  3A01               	xorlw	1	; case 3
 16735  0EF5  1903               	skipnz
 16736  0EF6  2EEB               	goto	l1848
 16737  0EF7  2EED               	goto	l1849
 16738  0EF8                     l1847:	
 16739                           
 16740                           ;BVH2_Appl_Layer.c: 1898: SIBFS_UbatHandling_b.Cb58_SaturationHigh = 1;
 16741  0EF8  1642               	bsf	_SIBFS_UbatHandling_b^(0+128),4
 16742  0EF9                     L39:	
 16743                           
 16744                           ;BVH2_Appl_Layer.c: 1899: Cb56_odPumpOff = 1;
 16745  0EF9  0022               	movlb	2	; select bank2
 16746  0EFA  01C7               	clrf	_Cb56_odPumpOff^(0+256)
 16747  0EFB  0AC7               	incf	_Cb56_odPumpOff^(0+256),f
 16748                           
 16749                           ;BVH2_Appl_Layer.c: 1900: Cb56_odFixedValueSel = 0;
 16750  0EFC  0021               	movlb	1	; select bank1
 16751  0EFD  01C1               	clrf	_Cb56_odFixedValueSel^(0+128)
 16752                           
 16753                           ;BVH2_Appl_Layer.c: 1901: Cb56_oUbat_Alarm_High = 1;
 16754  0EFE  0022               	movlb	2	; select bank2
 16755  0EFF  01C8               	clrf	_Cb56_oUbat_Alarm_High^(0+256)
 16756  0F00  0AC8               	incf	_Cb56_oUbat_Alarm_High^(0+256),f
 16757                           
 16758                           ;BVH2_Appl_Layer.c: 1902: }
 16759  0F01  0008               	return
 16760  0F02                     l1852:	
 16761                           ;BVH2_Appl_Layer.c: 1905: case 2: {
 16762                           
 16763                           
 16764                           ;BVH2_Appl_Layer.c: 1906: SIBFS_UbatHandling_b.Cb58_SaturationHigh = 0;
 16765  0F02  1242               	bcf	_SIBFS_UbatHandling_b^(0+128),4
 16766                           
 16767                           ;BVH2_Appl_Layer.c: 1907: break;
 16768  0F03  2F11               	goto	l9936
 16769  0F04                     l1854:	
 16770                           ;BVH2_Appl_Layer.c: 1908: }
 16771                           ;BVH2_Appl_Layer.c: 1909: case 3: {
 16772                           
 16773                           
 16774                           ;BVH2_Appl_Layer.c: 1910: SIBFS_UbatHandling_b.Cb59_SaturationLow = 0;
 16775  0F04  12C2               	bcf	_SIBFS_UbatHandling_b^(0+128),5
 16776                           
 16777                           ;BVH2_Appl_Layer.c: 1911: break;
 16778  0F05  2F11               	goto	l9936
 16779  0F06                     l1855:	
 16780                           ;BVH2_Appl_Layer.c: 1912: }
 16781                           ;BVH2_Appl_Layer.c: 1913: default: {
 16782                           
 16783                           
 16784                           ;BVH2_Appl_Layer.c: 1914: SIBFS_UbatHandling_b.Cb60_NormalUbat = 0;
 16785  0F06  1342               	bcf	_SIBFS_UbatHandling_b^(0+128),6
 16786                           
 16787                           ;BVH2_Appl_Layer.c: 1915: }
 16788                           ;BVH2_Appl_Layer.c: 1916: }
 16789  0F07  2F11               	goto	l9936
 16790  0F08                     l9934:	
 16791  0F08  0842               	movf	_SIBFS_UbatHandling_b^(0+128),w
 16792  0F09  3907               	andlw	7
 16793                           
 16794                           ; Switch size 1, requested type "space"
 16795                           ; Number of cases is 2, Range of values is 2 to 3
 16796                           ; switch strategies available:
 16797                           ; Name         Instructions Cycles
 16798                           ; simple_byte            7     4 (average)
 16799                           ; direct_byte           13     9 (fixed)
 16800                           ; jumptable            263     9 (fixed)
 16801                           ;	Chosen strategy is simple_byte
 16802  0F0A  3A02               	xorlw	2	; case 2
 16803  0F0B  1903               	skipnz
 16804  0F0C  2F02               	goto	l1852
 16805  0F0D  3A01               	xorlw	1	; case 3
 16806  0F0E  1903               	skipnz
 16807  0F0F  2F04               	goto	l1854
 16808  0F10  2F06               	goto	l1855
 16809  0F11                     l9936:	
 16810                           
 16811                           ;BVH2_Appl_Layer.c: 1919: if (((UInt8)ui8_BattVolt_mat) < 45) {
 16812  0F11  302D               	movlw	45
 16813  0F12  0230               	subwf	_ui8_BattVolt_mat^(0+128),w
 16814  0F13  1803               	skipnc
 16815  0F14  2F17               	goto	l1856
 16816                           
 16817                           ;BVH2_Appl_Layer.c: 1921: SIBFS_UbatHandling_b.Cb59_SaturationLow = 1;
 16818  0F15  16C2               	bsf	_SIBFS_UbatHandling_b^(0+128),5
 16819  0F16  2EF9               	goto	L39
 16820  0F17                     l1856:	
 16821                           ;BVH2_Appl_Layer.c: 1922: Cb56_odPumpOff = 1;
 16822                           
 16823                           
 16824                           ;BVH2_Appl_Layer.c: 1926: else {
 16825                           ;BVH2_Appl_Layer.c: 1928: SIBFS_UbatHandling_b.Cb60_NormalUbat = 1;
 16826                           
 16827                           ;BVH2_Appl_Layer.c: 1929: Cb56_odPumpOff = 0;
 16828                           
 16829                           ;BVH2_Appl_Layer.c: 1930: Cb56_odFixedValueSel = 0;
 16830                           
 16831                           ;BVH2_Appl_Layer.c: 1931: Cb56_oUbat_Alarm_High = 0;
 16832  0F17  27D6               	fcall	PL80	;call to abstracted procedure
 16833  0F18  0008               	return
 16834  0F19                     __end_of_Cb56_UbatHandling_node_fcn2:	
 16835  0F19                     __ptext44:	
 16836 ;; *************** function ___aldiv *****************
 16837 ;; Defined at:
 16838 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\aldiv.c"
 16839 ;; Parameters:    Size  Location     Type
 16840 ;;  divisor         4    4[BANK0 ] long 
 16841 ;;  dividend        4    8[BANK0 ] long 
 16842 ;; Auto vars:     Size  Location     Type
 16843 ;;  quotient        4   14[BANK0 ] long 
 16844 ;;  sign            1   13[BANK0 ] unsigned char 
 16845 ;;  counter         1   12[BANK0 ] unsigned char 
 16846 ;; Return value:  Size  Location     Type
 16847 ;;                  4    4[BANK0 ] long 
 16848 ;; Registers used:
 16849 ;;		wreg, status,2, status,0
 16850 ;; Tracked objects:
 16851 ;;		On entry : 1F/0
 16852 ;;		On exit  : 1F/0
 16853 ;;		Unchanged: 0/0
 16854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16855 ;;      Params:         0       8       0       0       0       0       0       0
 16856 ;;      Locals:         0       6       0       0       0       0       0       0
 16857 ;;      Temps:          0       0       0       0       0       0       0       0
 16858 ;;      Totals:         0      14       0       0       0       0       0       0
 16859 ;;Total ram usage:       14 bytes
 16860 ;; Hardware stack levels used:    1
 16861 ;; Hardware stack levels required when called:    3
 16862 ;; This function calls:
 16863 ;;		Nothing
 16864 ;; This function is called by:
 16865 ;;		_BVH2_Appl_Layer
 16866 ;; This function uses a non-reentrant model
 16867 ;;
 16868                           
 16869                           
 16870                           ;psect for function ___aldiv
 16871  0F19                     ___aldiv:	
 16872                           
 16873                           ;incstack = 0
 16874                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 16875  0F19  01AD               	clrf	___aldiv@sign
 16876  0F1A  1FA7               	btfss	___aldiv@divisor+3,7
 16877  0F1B  2F29               	goto	l2117
 16878  0F1C  09A4               	comf	___aldiv@divisor,f
 16879  0F1D  09A5               	comf	___aldiv@divisor+1,f
 16880  0F1E  09A6               	comf	___aldiv@divisor+2,f
 16881  0F1F  09A7               	comf	___aldiv@divisor+3,f
 16882  0F20  0AA4               	incf	___aldiv@divisor,f
 16883  0F21  1903               	skipnz
 16884  0F22  0AA5               	incf	___aldiv@divisor+1,f
 16885  0F23  1903               	skipnz
 16886  0F24  0AA6               	incf	___aldiv@divisor+2,f
 16887  0F25  1903               	skipnz
 16888  0F26  0AA7               	incf	___aldiv@divisor+3,f
 16889  0F27  01AD               	clrf	___aldiv@sign
 16890  0F28  0AAD               	incf	___aldiv@sign,f
 16891  0F29                     l2117:	
 16892  0F29  1FAB               	btfss	___aldiv@dividend+3,7
 16893  0F2A  2F38               	goto	l10006
 16894  0F2B  09A8               	comf	___aldiv@dividend,f
 16895  0F2C  09A9               	comf	___aldiv@dividend+1,f
 16896  0F2D  09AA               	comf	___aldiv@dividend+2,f
 16897  0F2E  09AB               	comf	___aldiv@dividend+3,f
 16898  0F2F  0AA8               	incf	___aldiv@dividend,f
 16899  0F30  1903               	skipnz
 16900  0F31  0AA9               	incf	___aldiv@dividend+1,f
 16901  0F32  1903               	skipnz
 16902  0F33  0AAA               	incf	___aldiv@dividend+2,f
 16903  0F34  1903               	skipnz
 16904  0F35  0AAB               	incf	___aldiv@dividend+3,f
 16905  0F36  3001               	movlw	1
 16906  0F37  06AD               	xorwf	___aldiv@sign,f
 16907  0F38                     l10006:	
 16908  0F38  01AE               	clrf	___aldiv@quotient
 16909  0F39  01AF               	clrf	___aldiv@quotient+1
 16910  0F3A  01B0               	clrf	___aldiv@quotient+2
 16911  0F3B  01B1               	clrf	___aldiv@quotient+3
 16912  0F3C  0827               	movf	___aldiv@divisor+3,w
 16913  0F3D  0426               	iorwf	___aldiv@divisor+2,w
 16914  0F3E  0425               	iorwf	___aldiv@divisor+1,w
 16915  0F3F  0424               	iorwf	___aldiv@divisor,w
 16916  0F40  1903               	skipnz
 16917  0F41  2F6E               	goto	l10028
 16918  0F42  01AC               	clrf	___aldiv@counter
 16919  0F43                     L38:	
 16920  0F43  0AAC               	incf	___aldiv@counter,f
 16921  0F44  1BA7               	btfsc	___aldiv@divisor+3,7
 16922  0F45  2F4B               	goto	l10016
 16923  0F46  35A4               	lslf	___aldiv@divisor,f
 16924  0F47  0DA5               	rlf	___aldiv@divisor+1,f
 16925  0F48  0DA6               	rlf	___aldiv@divisor+2,f
 16926  0F49  0DA7               	rlf	___aldiv@divisor+3,f
 16927  0F4A  2F43               	goto	L38
 16928  0F4B                     l10016:	
 16929  0F4B  35AE               	lslf	___aldiv@quotient,f
 16930  0F4C  0DAF               	rlf	___aldiv@quotient+1,f
 16931  0F4D  0DB0               	rlf	___aldiv@quotient+2,f
 16932  0F4E  0DB1               	rlf	___aldiv@quotient+3,f
 16933  0F4F  0827               	movf	___aldiv@divisor+3,w
 16934  0F50  022B               	subwf	___aldiv@dividend+3,w
 16935  0F51  1D03               	skipz
 16936  0F52  2F5D               	goto	u7705
 16937  0F53  0826               	movf	___aldiv@divisor+2,w
 16938  0F54  022A               	subwf	___aldiv@dividend+2,w
 16939  0F55  1D03               	skipz
 16940  0F56  2F5D               	goto	u7705
 16941  0F57  0825               	movf	___aldiv@divisor+1,w
 16942  0F58  0229               	subwf	___aldiv@dividend+1,w
 16943  0F59  1D03               	skipz
 16944  0F5A  2F5D               	goto	u7705
 16945  0F5B  0824               	movf	___aldiv@divisor,w
 16946  0F5C  0228               	subwf	___aldiv@dividend,w
 16947  0F5D                     u7705:	
 16948  0F5D  1C03               	skipc
 16949  0F5E  2F68               	goto	l10024
 16950  0F5F  0824               	movf	___aldiv@divisor,w
 16951  0F60  02A8               	subwf	___aldiv@dividend,f
 16952  0F61  0825               	movf	___aldiv@divisor+1,w
 16953  0F62  3BA9               	subwfb	___aldiv@dividend+1,f
 16954  0F63  0826               	movf	___aldiv@divisor+2,w
 16955  0F64  3BAA               	subwfb	___aldiv@dividend+2,f
 16956  0F65  0827               	movf	___aldiv@divisor+3,w
 16957  0F66  3BAB               	subwfb	___aldiv@dividend+3,f
 16958  0F67  142E               	bsf	___aldiv@quotient,0
 16959  0F68                     l10024:	
 16960  0F68  36A7               	lsrf	___aldiv@divisor+3,f
 16961  0F69  0CA6               	rrf	___aldiv@divisor+2,f
 16962  0F6A  0CA5               	rrf	___aldiv@divisor+1,f
 16963  0F6B  0CA4               	rrf	___aldiv@divisor,f
 16964  0F6C  0BAC               	decfsz	___aldiv@counter,f
 16965  0F6D  2F4B               	goto	l10016
 16966  0F6E                     l10028:	
 16967  0F6E  082D               	movf	___aldiv@sign,w
 16968  0F6F  1903               	btfsc	3,2
 16969  0F70  2F7C               	goto	l10032
 16970  0F71  09AE               	comf	___aldiv@quotient,f
 16971  0F72  09AF               	comf	___aldiv@quotient+1,f
 16972  0F73  09B0               	comf	___aldiv@quotient+2,f
 16973  0F74  09B1               	comf	___aldiv@quotient+3,f
 16974  0F75  0AAE               	incf	___aldiv@quotient,f
 16975  0F76  1903               	skipnz
 16976  0F77  0AAF               	incf	___aldiv@quotient+1,f
 16977  0F78  1903               	skipnz
 16978  0F79  0AB0               	incf	___aldiv@quotient+2,f
 16979  0F7A  1903               	skipnz
 16980  0F7B  0AB1               	incf	___aldiv@quotient+3,f
 16981  0F7C                     l10032:	
 16982  0F7C  0831               	movf	___aldiv@quotient+3,w
 16983  0F7D  00A7               	movwf	?___aldiv+3
 16984  0F7E  0830               	movf	___aldiv@quotient+2,w
 16985  0F7F  00A6               	movwf	?___aldiv+2
 16986  0F80  082F               	movf	___aldiv@quotient+1,w
 16987  0F81  00A5               	movwf	?___aldiv+1
 16988  0F82  082E               	movf	___aldiv@quotient,w
 16989  0F83  00A4               	movwf	?___aldiv
 16990  0F84  0008               	return
 16991  0F85                     __end_of___aldiv:	
 16992  0F85                     PL24:	
 16993  0F85  0020               	movlb	0	; select bank0
 16994  0F86  00B3               	movwf	??_BVH2_Appl_Layer+1
 16995  0F87  0021               	movlb	1	; select bank1
 16996  0F88  082F               	movf	(_ui16_mat_Current+1)^(0+128),w
 16997  0F89  0020               	movlb	0	; select bank0
 16998  0F8A  0233               	subwf	??_BVH2_Appl_Layer+1,w
 16999  0F8B  1D03               	skipz
 17000  0F8C  0008               	return
 17001  0F8D  0021               	movlb	1	; select bank1
 17002  0F8E  082E               	movf	_ui16_mat_Current^(0+128),w
 17003  0F8F  0020               	movlb	0	; select bank0
 17004  0F90  0232               	subwf	??_BVH2_Appl_Layer,w
 17005  0F91  0008               	return
 17006  0F92                     __end_ofPL24:	
 17007  0F92                     PL26:	
 17008  0F92  0023               	movlb	3	; select bank3
 17009  0F93  0866               	movf	_ui16_Current_Thresh^(0+384),w
 17010  0F94  3EFE               	addlw	254
 17011  0F95  0020               	movlb	0	; select bank0
 17012  0F96  00B2               	movwf	??_BVH2_Appl_Layer
 17013  0F97  30FF               	movlw	255
 17014  0F98  0023               	movlb	3	; select bank3
 17015  0F99  3D67               	addwfc	(_ui16_Current_Thresh+1)^(0+384),w
 17016  0F9A  0008               	return
 17017  0F9B                     __end_ofPL26:	
 17018  0F9B                     PL30:	
 17019  0F9B  0023               	movlb	3	; select bank3
 17020  0F9C  0866               	movf	_ui16_Current_Thresh^(0+384),w
 17021  0F9D  3E02               	addlw	2
 17022  0F9E  0020               	movlb	0	; select bank0
 17023  0F9F  00B2               	movwf	??_BVH2_Appl_Layer
 17024  0FA0  3000               	movlw	0
 17025  0FA1  0023               	movlb	3	; select bank3
 17026  0FA2  3D67               	addwfc	(_ui16_Current_Thresh+1)^(0+384),w
 17027  0FA3  0020               	movlb	0	; select bank0
 17028  0FA4  00B3               	movwf	??_BVH2_Appl_Layer+1
 17029  0FA5  0021               	movlb	1	; select bank1
 17030  0FA6  022F               	subwf	(_ui16_mat_Current+1)^(0+128),w
 17031  0FA7  1D03               	skipz
 17032  0FA8  0008               	return
 17033  0FA9  0020               	movlb	0	; select bank0
 17034  0FAA  0832               	movf	??_BVH2_Appl_Layer,w
 17035  0FAB  0021               	movlb	1	; select bank1
 17036  0FAC  022E               	subwf	_ui16_mat_Current^(0+128),w
 17037  0FAD  0008               	return
 17038  0FAE                     __end_ofPL30:	
 17039  0FAE                     PL54:	
 17040  0FAE  0021               	movlb	1	; select bank1
 17041  0FAF  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 17042  0FB0  39F8               	andlw	-8
 17043  0FB1  3805               	iorlw	5
 17044  0FB2  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 17045  0FB3  0020               	movlb	0	; select bank0
 17046  0FB4  01D4               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
 17047  0FB5  01D5               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
 17048  0FB6  0023               	movlb	3	; select bank3
 17049  0FB7  01C2               	clrf	BVH2_Appl_Layer@Cb24_BadCnt^(0+384)
 17050  0FB8  01C3               	clrf	(BVH2_Appl_Layer@Cb24_BadCnt+1)^(0+384)
 17051  0FB9  0008               	return
 17052  0FBA                     __end_ofPL54:	
 17053  0FBA                     PL62:	
 17054  0FBA  0844               	movf	_SIBFS_PWM_Detection_b^(0+128),w
 17055  0FBB  39F0               	andlw	-16
 17056  0FBC  3801               	iorlw	1
 17057  0FBD  00C4               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 17058  0FBE  0022               	movlb	2	; select bank2
 17059  0FBF  01CA               	clrf	_Cb34_odPumpOff^(0+256)
 17060  0FC0  0ACA               	incf	_Cb34_odPumpOff^(0+256),f
 17061  0FC1  01CB               	clrf	_Cb34_odFixedValueSel^(0+256)
 17062  0FC2  01CC               	clrf	_Cb34_odFixedLowValueSel^(0+256)
 17063  0FC3  0008               	return
 17064  0FC4                     __end_ofPL62:	
 17065  0FC4                     PL68:	
 17066  0FC4  0021               	movlb	1	; select bank1
 17067  0FC5  0820               	movf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128),w
 17068  0FC6  39F8               	andlw	-8
 17069  0FC7  3804               	iorlw	4
 17070  0FC8  00A0               	movwf	BVH2_Appl_Layer@SIBFS_Motor_Stalled_b^(0+128)
 17071  0FC9  0020               	movlb	0	; select bank0
 17072  0FCA  01D4               	clrf	BVH2_Appl_Layer@Cb24_StateCnt
 17073  0FCB  01D5               	clrf	BVH2_Appl_Layer@Cb24_StateCnt+1
 17074  0FCC  0008               	return
 17075  0FCD                     __end_ofPL68:	
 17076  0FCD                     PL72:	
 17077  0FCD  0024               	movlb	4	; select bank4
 17078  0FCE  0838               	movf	(BVH2_Appl_Layer@Sb2_Error+1)^(0+512),w
 17079  0FCF  0020               	movlb	0	; select bank0
 17080  0FD0  00A7               	movwf	___wmul@multiplicand+1
 17081  0FD1  0024               	movlb	4	; select bank4
 17082  0FD2  0837               	movf	BVH2_Appl_Layer@Sb2_Error^(0+512),w
 17083  0FD3  0020               	movlb	0	; select bank0
 17084  0FD4  00A6               	movwf	___wmul@multiplicand
 17085  0FD5  0008               	return
 17086  0FD6                     __end_ofPL72:	
 17087  0FD6                     PL80:	
 17088  0FD6  1742               	bsf	_SIBFS_UbatHandling_b^(0+128),6
 17089  0FD7  0022               	movlb	2	; select bank2
 17090  0FD8  01C7               	clrf	_Cb56_odPumpOff^(0+256)
 17091  0FD9  0021               	movlb	1	; select bank1
 17092  0FDA  01C1               	clrf	_Cb56_odFixedValueSel^(0+128)
 17093  0FDB  0022               	movlb	2	; select bank2
 17094  0FDC  01C8               	clrf	_Cb56_oUbat_Alarm_High^(0+256)
 17095  0FDD  0008               	return
 17096  0FDE                     __end_ofPL80:	
 17097  0FDE                     PL86:	
 17098  0FDE  3A80               	xorlw	128
 17099  0FDF  0020               	movlb	0	; select bank0
 17100  0FE0  00B2               	movwf	??_BVH2_Appl_Layer
 17101  0FE1  3080               	movlw	128
 17102  0FE2  0232               	subwf	??_BVH2_Appl_Layer,w
 17103  0FE3  0008               	return
 17104  0FE4                     __end_ofPL86:	
 17105  0FE4                     PL94:	
 17106  0FE4  39F0               	andlw	-16
 17107  0FE5  3805               	iorlw	5
 17108  0FE6  00C5               	movwf	_SIBFS_Current_Analysis_High_b^(0+128)
 17109  0FE7  0022               	movlb	2	; select bank2
 17110  0FE8  01CF               	clrf	_Cb1_oShutoff^(0+256)
 17111  0FE9  01D0               	clrf	_Cb1_oCurrentAlarm^(0+256)
 17112  0FEA  0008               	return
 17113  0FEB                     __end_ofPL94:	
 17114  0FEB                     PL98:	
 17115  0FEB  0020               	movlb	0	; select bank0
 17116  0FEC  00B2               	movwf	??_BVH2_Appl_Layer
 17117  0FED  0CB2               	rrf	??_BVH2_Appl_Layer,f
 17118  0FEE  0C32               	rrf	??_BVH2_Appl_Layer,w
 17119  0FEF  3903               	andlw	3
 17120  0FF0  3A03               	xorlw	3
 17121  0FF1  0008               	return
 17122  0FF2                     __end_ofPL98:	
 17123  0FF2                     PL112:	
 17124  0FF2  00C4               	movwf	_SIBFS_PWM_Detection_b^(0+128)
 17125  0FF3  0022               	movlb	2	; select bank2
 17126  0FF4  01CA               	clrf	_Cb34_odPumpOff^(0+256)
 17127  0FF5  01CB               	clrf	_Cb34_odFixedValueSel^(0+256)
 17128  0FF6  0ACB               	incf	_Cb34_odFixedValueSel^(0+256),f
 17129  0FF7  0008               	return
 17130  0FF8                     __end_ofPL112:	
 17131  0FF8                     PL116:	
 17132  0FF8  3001               	movlw	1
 17133  0FF9  0021               	movlb	1	; select bank1
 17134  0FFA  0223               	subwf	(BVH2_Appl_Layer@Cb19_Counter+1)^(0+128),w
 17135  0FFB  3491               	retlw	145
 17136  0FFC                     __end_ofPL116:	
 17137  0FFC                     PL130:	
 17138  0FFC  3000               	movlw	0
 17139  0FFD  0020               	movlb	0	; select bank0
 17140  0FFE  0257               	subwf	_ui16_Speed_mat+1,w
 17141  0FFF  3405               	retlw	5
 17142  1000                     __end_ofPL130:	
 17143                           
 17144                           	psect	swtext2
 17145  0766                     __pswtext2:	
 17146  0766                     S14500:	
 17147  0766  3188  28F6         	ljmp	l13536
 17148  0768  3188  28F6         	ljmp	l13536
 17149  076A  3188  28F6         	ljmp	l13536
 17150  076C  3188  28F6         	ljmp	l13536
 17151  076E  3188  28F6         	ljmp	l13536
 17152  0770  3188  28F6         	ljmp	l13536
 17153  0772  3188  28F6         	ljmp	l13536
 17154  0774  3188  28F6         	ljmp	l13536
 17155                           
 17156                           	psect	intentry
 17157  0004                     __pintentry:	
 17158 ;; *************** function _interrupt_handler *****************
 17159 ;; Defined at:
 17160 ;;		line 77 in file "../interrupt.c"
 17161 ;; Parameters:    Size  Location     Type
 17162 ;;		None
 17163 ;; Auto vars:     Size  Location     Type
 17164 ;;		None
 17165 ;; Return value:  Size  Location     Type
 17166 ;;                  1    wreg      void 
 17167 ;; Registers used:
 17168 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17169 ;; Tracked objects:
 17170 ;;		On entry : 0/0
 17171 ;;		On exit  : 1F/0
 17172 ;;		Unchanged: 0/0
 17173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17174 ;;      Params:         0       0       0       0       0       0       0       0
 17175 ;;      Locals:         0       0       0       0       0       0       0       0
 17176 ;;      Temps:          0       0       0       0       0       0       0       0
 17177 ;;      Totals:         0       0       0       0       0       0       0       0
 17178 ;;Total ram usage:        0 bytes
 17179 ;; Hardware stack levels used:    1
 17180 ;; Hardware stack levels required when called:    2
 17181 ;; This function calls:
 17182 ;;		_ELINMIntHandler
 17183 ;;		_PWM_CTRL
 17184 ;;		_Task1ms
 17185 ;;		_interrrupt_bldc
 17186 ;;		_interrupt_PWMCapture
 17187 ;; This function is called by:
 17188 ;;		Interrupt level 1
 17189 ;; This function uses a non-reentrant model
 17190 ;;
 17191                           
 17192  0004                     _interrupt_handler:	
 17193                           
 17194                           ;incstack = 0
 17195  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 17196                           
 17197                           ; Regs used in _interrupt_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17198  0005  3180               	pagesel	$
 17199                           
 17200                           ;interrupt.c: 81: if( TMR1IF )
 17201  0006  0020               	movlb	0	; select bank0
 17202  0007  1811               	btfsc	17,0	;volatile
 17203                           
 17204                           ;interrupt.c: 83: {
 17205                           ;interrupt.c: 85: TMR1IF = 0;
 17206  0008  1011               	bcf	17,0	;volatile
 17207                           
 17208                           ;interrupt.c: 87: }
 17209                           ;interrupt.c: 90: if( TMR4IF )
 17210  0009  1C93               	btfss	19,1	;volatile
 17211  000A  2812               	goto	i1l14188
 17212                           
 17213                           ;interrupt.c: 92: {
 17214                           ;interrupt.c: 94: TMR4IF = 0;
 17215  000B  1093               	bcf	19,1	;volatile
 17216                           
 17217                           ;interrupt.c: 96: PWM_CTRL( );
 17218  000C  3187  2753  3180   	fcall	_PWM_CTRL
 17219                           
 17220                           ;interrupt.c: 98: Task1ms( );
 17221  000F  3187  277C  3180   	fcall	_Task1ms
 17222  0012                     i1l14188:	
 17223                           
 17224                           ;interrupt.c: 100: }
 17225                           ;interrupt.c: 106: if( TMR2IF )
 17226  0012  0020               	movlb	0	; select bank0
 17227  0013  1C91               	btfss	17,1	;volatile
 17228  0014  2819               	goto	i1l14194
 17229                           
 17230                           ;interrupt.c: 108: {
 17231                           ;interrupt.c: 110: TMR2IF = 0;
 17232  0015  1091               	bcf	17,1	;volatile
 17233                           
 17234                           ;interrupt.c: 112: interrrupt_bldc( );
 17235  0016  319B  23B1  3180   	fcall	_interrrupt_bldc
 17236  0019                     i1l14194:	
 17237                           
 17238                           ;interrupt.c: 114: }
 17239                           ;interrupt.c: 117: if( TMR6IF )
 17240  0019  0020               	movlb	0	; select bank0
 17241  001A  1D93               	btfss	19,3	;volatile
 17242  001B  2820               	goto	i1l14200
 17243                           
 17244                           ;interrupt.c: 119: {
 17245                           ;interrupt.c: 121: TMR6IF = 0;
 17246  001C  1193               	bcf	19,3	;volatile
 17247                           
 17248                           ;interrupt.c: 126: ELINMIntHandler( );
 17249  001D  3185  259C  3180   	fcall	_ELINMIntHandler
 17250  0020                     i1l14200:	
 17251                           
 17252                           ;interrupt.c: 131: }
 17253                           ;interrupt.c: 134: if( CCP5IF )
 17254  0020  0020               	movlb	0	; select bank0
 17255  0021  1F13               	btfss	19,6	;volatile
 17256  0022  2826               	goto	i1l14206
 17257                           
 17258                           ;interrupt.c: 136: {
 17259                           ;interrupt.c: 138: CCP5IF = 0;
 17260  0023  1313               	bcf	19,6	;volatile
 17261                           
 17262                           ;interrupt.c: 140: interrupt_PWMCapture( );
 17263  0024  3186  2691         	fcall	_interrupt_PWMCapture
 17264  0026                     i1l14206:	
 17265                           
 17266                           ;interrupt.c: 142: }
 17267                           ;interrupt.c: 145: if( CCP2IF )
 17268  0026  0020               	movlb	0	; select bank0
 17269  0027  1812               	btfsc	18,0	;volatile
 17270                           
 17271                           ;interrupt.c: 147: {
 17272                           ;interrupt.c: 149: CCP2IF = 0;
 17273  0028  1012               	bcf	18,0	;volatile
 17274  0029  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 17275  002A  0009               	retfie
 17276  002B                     __end_of_interrupt_handler:	
 17277                           
 17278                           	psect	swtext3
 17279  072B                     __pswtext3:	
 17280  072B                     i1S14502:	
 17281  072B  319B  2BE1         	ljmp	i1l12548
 17282  072D  319B  2BF8         	ljmp	i1l12560
 17283  072F  319C  2C12         	ljmp	i1l12600
 17284  0731  319C  2C41         	ljmp	i1l12638
 17285  0733  319B  2BF5         	ljmp	i1l12558
 17286  0735  319B  2BF5         	ljmp	i1l12558
 17287  0737  319B  2BF5         	ljmp	i1l12558
 17288  0739  319C  2C56         	ljmp	i1l284
 17289  073B  319C  2C5B         	ljmp	i1l12672
 17290  073D  319C  2CF2         	ljmp	i1l267
 17291                           
 17292                           	psect	swtext4
 17293  073F                     __pswtext4:	
 17294  073F                     i1S14506:	
 17295  073F  319D  2DC8         	ljmp	i1l7026
 17296  0741  319D  2DCB         	ljmp	i1l7028
 17297  0743  319D  2DCE         	ljmp	i1l7030
 17298  0745  319D  2DD1         	ljmp	i1l7032
 17299  0747  319D  2DD1         	ljmp	i1l7032
 17300  0749  319D  2DD1         	ljmp	i1l7032
 17301  074B  319D  2DD1         	ljmp	i1l7032
 17302  074D  319D  2DD1         	ljmp	i1l7032
 17303  074F  319D  2DD1         	ljmp	i1l7032
 17304  0751  319D  2DD1         	ljmp	i1l7032
 17305                           
 17306                           	psect	text58
 17307  077C                     __ptext58:	
 17308 ;; *************** function _Task1ms *****************
 17309 ;; Defined at:
 17310 ;;		line 52 in file "../interrupt.c"
 17311 ;; Parameters:    Size  Location     Type
 17312 ;;		None
 17313 ;; Auto vars:     Size  Location     Type
 17314 ;;		None
 17315 ;; Return value:  Size  Location     Type
 17316 ;;                  1    wreg      void 
 17317 ;; Registers used:
 17318 ;;		status,2, status,0
 17319 ;; Tracked objects:
 17320 ;;		On entry : 1C/0
 17321 ;;		On exit  : 1F/1
 17322 ;;		Unchanged: 0/0
 17323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17324 ;;      Params:         0       0       0       0       0       0       0       0
 17325 ;;      Locals:         0       0       0       0       0       0       0       0
 17326 ;;      Temps:          0       0       0       0       0       0       0       0
 17327 ;;      Totals:         0       0       0       0       0       0       0       0
 17328 ;;Total ram usage:        0 bytes
 17329 ;; Hardware stack levels used:    1
 17330 ;; This function calls:
 17331 ;;		Nothing
 17332 ;; This function is called by:
 17333 ;;		_interrupt_handler
 17334 ;; This function uses a non-reentrant model
 17335 ;;
 17336                           
 17337                           
 17338                           ;psect for function _Task1ms
 17339  077C                     _Task1ms:	
 17340                           
 17341                           ;interrupt.c: 56: ui8_Task_Cont1ms++;
 17342                           
 17343                           ;incstack = 0
 17344                           ; Regs used in _Task1ms: [status]
 17345  077C  0021               	movlb	1	; select bank1
 17346  077D  0AD1               	incf	_ui8_Task_Cont1ms^(0+128),f
 17347  077E  0008               	return
 17348  077F                     __end_of_Task1ms:	
 17349                           
 17350                           	psect	text59
 17351  0753                     __ptext59:	
 17352 ;; *************** function _PWM_CTRL *****************
 17353 ;; Defined at:
 17354 ;;		line 198 in file "../pwm.c"
 17355 ;; Parameters:    Size  Location     Type
 17356 ;;		None
 17357 ;; Auto vars:     Size  Location     Type
 17358 ;;		None
 17359 ;; Return value:  Size  Location     Type
 17360 ;;                  1    wreg      void 
 17361 ;; Registers used:
 17362 ;;		wreg, status,2, status,0
 17363 ;; Tracked objects:
 17364 ;;		On entry : 1F/0
 17365 ;;		On exit  : 1C/0
 17366 ;;		Unchanged: 0/0
 17367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17368 ;;      Params:         0       0       0       0       0       0       0       0
 17369 ;;      Locals:         0       0       0       0       0       0       0       0
 17370 ;;      Temps:          0       0       0       0       0       0       0       0
 17371 ;;      Totals:         0       0       0       0       0       0       0       0
 17372 ;;Total ram usage:        0 bytes
 17373 ;; Hardware stack levels used:    1
 17374 ;; This function calls:
 17375 ;;		Nothing
 17376 ;; This function is called by:
 17377 ;;		_interrupt_handler
 17378 ;; This function uses a non-reentrant model
 17379 ;;
 17380                           
 17381                           
 17382                           ;psect for function _PWM_CTRL
 17383  0753                     _PWM_CTRL:	
 17384                           
 17385                           ;pwm.c: 288: ui8_PWM_FreqCnt++;
 17386                           
 17387                           ;incstack = 0
 17388                           ; Regs used in _PWM_CTRL: [wreg+status,2+status,0]
 17389  0753  0021               	movlb	1	; select bank1
 17390  0754  3064               	movlw	100
 17391  0755  0AC7               	incf	_ui8_PWM_FreqCnt^(0+128),f
 17392                           
 17393                           ;pwm.c: 290: if( ui8_PWM_FreqCnt >= 100 )
 17394  0756  0247               	subwf	_ui8_PWM_FreqCnt^(0+128),w
 17395  0757  1C03               	skipc
 17396  0758  2F5D               	goto	i1l8100
 17397                           
 17398                           ;pwm.c: 292: {
 17399                           ;pwm.c: 294: ui8_PWM_FreqCnt = 0;
 17400  0759  01C7               	clrf	_ui8_PWM_FreqCnt^(0+128)
 17401                           
 17402                           ;pwm.c: 295: LATC0 = 0;
 17403  075A  0022               	movlb	2	; select bank2
 17404  075B  100E               	bcf	14,0	;volatile
 17405                           
 17406                           ;pwm.c: 298: }
 17407  075C  0008               	return
 17408  075D                     i1l8100:	
 17409                           
 17410                           ;pwm.c: 301: else
 17411                           ;pwm.c: 302: {
 17412                           ;pwm.c: 304: if( ui8_PWM_FreqCnt >= ui8_PWMoutvalue )
 17413  075D  0022               	movlb	2	; select bank2
 17414  075E  0855               	movf	_ui8_PWMoutvalue^(0+256),w
 17415  075F  0021               	movlb	1	; select bank1
 17416  0760  0247               	subwf	_ui8_PWM_FreqCnt^(0+128),w
 17417  0761  1C03               	skipc
 17418  0762  0008               	return
 17419                           
 17420                           ;pwm.c: 306: {
 17421                           ;pwm.c: 308: LATC0 = 1;
 17422  0763  0022               	movlb	2	; select bank2
 17423  0764  140E               	bsf	14,0	;volatile
 17424  0765  0008               	return
 17425  0766                     __end_of_PWM_CTRL:	


Data Sizes:
    Strings     0
    Constant    101
    Data        16
    BSS         261
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     52      74
    BANK1            80      0      80
    BANK2            80      0      80
    BANK3            80      4      78
    BANK4            80     32      59
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    sp___ELINMIntGetPointer	PTR unsigned char  size(1) Largest target is 11
		 -> _ELINMIntMessageBuffer(BANK4[11]), 

    pt	PTR unsigned char  size(1) Largest target is 11
		 -> NULL(NULL[0]), _ELINMIntMessageBuffer(BANK4[11]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _interrupt_handler in COMMON

    _interrupt_handler->_interrrupt_bldc
    _interrrupt_bldc->i1_commutate
    _ELINMIntHandler->__ELINMIntResetProtocol

Critical Paths under _main in BANK0

    _main->_EOL
    _timer_init->_clear_timer
    _init_ports->_read_eeprom_data
    _InitMotorRun->_commutate
    _I_calibrationInit->_ADC_Read
    _FILTER_Init->_ADC_Read
    _DiagInit->_PWM_Write_Out
    ___awdiv->___wmul
    _SetDiagAlarm->_PWM_Write_Out
    _Receive_Diag->__ELINMIntReceiveMessage
    __ELINMIntReceiveMessage->__ELINMIntSendMessage
    _Get_Analog_Value->_FILTER_Ubat
    _EOL->_NegativeAnswer
    _write_eeprom_data->___lwdiv
    _PWMReadDC->___ltdiv
    ___ltdiv->___tmul
    _NegativeAnswer->_Transmit_LIN_8Bytes
    _Transmit_LIN_8Bytes->__ELINMIntSendMessage
    __ELINMIntSendMessage->__ELINMIntCalcIDParity
    _BVH2_Appl_Layer->___aldiv

Critical Paths under _interrupt_handler in BANK0

    _interrupt_handler->_interrrupt_bldc

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_handler in BANK3

    None.

Critical Paths under _main in BANK4

    _main->_BVH2_Appl_Layer

Critical Paths under _interrupt_handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interrupt_handler in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   69412
                                              0 BANK3      4     4      0
                    _BVH2_Appl_Layer
                                _EOL
                   _Get_Analog_Value
                       _InitMotorRun
                      _InitMotorStop
                          _PWMReadDC
                       _Receive_Diag
                       _SetDiagAlarm
                            ___awdiv
                             ___wmul
                        _clear_timer
                   _read_eeprom_data
                        _system_init
 ---------------------------------------------------------------------------------
 (1) _system_init                                          0     0      0     468
                           _ADC_Init
                           _DiagInit
                       _EnableMCP201
                        _FILTER_Init
                  _I_calibrationInit
                _Oscill_Source_Block
                   _PWM_Capture_init
                __ELINMIntInitialize
                          _init_bldc
                         _init_ports
                         _timer_init
 ---------------------------------------------------------------------------------
 (2) _timer_init                                           1     1      0      44
                                              5 BANK0      1     1      0
                        _clear_timer
 ---------------------------------------------------------------------------------
 (3) _clear_timer                                          1     1      0      22
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _init_ports                                           0     0      0      90
                   _read_eeprom_data
 ---------------------------------------------------------------------------------
 (2) _init_bldc                                            0     0      0       0
                       _InitMotorRun
 ---------------------------------------------------------------------------------
 (3) _InitMotorRun                                         0     0      0       0
                          _commutate
 ---------------------------------------------------------------------------------
 (4) _commutate                                           12    12      0       0
                                              4 BANK0     12    12      0
 ---------------------------------------------------------------------------------
 (2) __ELINMIntInitialize                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM_Capture_init                                     1     1      0      22
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Oscill_Source_Block                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I_calibrationInit                                    1     1      0     144
                                              7 BANK0      1     1      0
                           _ADC_Read
                           _ADC_Wait
                   _read_eeprom_data
 ---------------------------------------------------------------------------------
 (2) _FILTER_Init                                          0     0      0      54
                           _ADC_Read
                           _ADC_Wait
 ---------------------------------------------------------------------------------
 (2) _EnableMCP201                                         3     3      0      72
                                              4 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _DiagInit                                             0     0      0      42
                      _PWM_Write_Out
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     803
                                             10 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _SetDiagAlarm                                         0     0      0      42
                      _PWM_Write_Out
 ---------------------------------------------------------------------------------
 (1) _Receive_Diag                                         2     2      0    2957
                                             18 BANK0      2     2      0
                __ELINMIntGetPointer
            __ELINMIntReceiveMessage
 ---------------------------------------------------------------------------------
 (2) __ELINMIntReceiveMessage                              3     1      2    2415
                                             15 BANK0      3     1      2
               __ELINMIntSendMessage
 ---------------------------------------------------------------------------------
 (1) _Get_Analog_Value                                     0     0      0       0
                      _FILTER_IPhase
                        _FILTER_Temp
                        _FILTER_Ubat
 ---------------------------------------------------------------------------------
 (2) _FILTER_Ubat                                         12    12      0       0
                                              4 BANK0     12    12      0
 ---------------------------------------------------------------------------------
 (2) _FILTER_Temp                                          2     2      0       0
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _FILTER_IPhase                                        2     2      0       0
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _EOL                                                 27    27      0   59487
                                             25 BANK0     27    27      0
                           _ADC_Read
                           _ADC_Wait
                      _InitMotorStop
                     _NegativeAnswer
                          _PWMReadDC
                      _PWM_Write_Out
                _Transmit_LIN_8Bytes
                            ___lwdiv
                             ___wmul
                              _cksum
                   _read_eeprom_data
                  _write_eeprom_data
 ---------------------------------------------------------------------------------
 (2) _write_eeprom_data                                    2     1      1    1356
                                             11 BANK0      2     1      1
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _read_eeprom_data                                     2     2      0      90
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _cksum                                                8     6      2     204
                                              4 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4    1634
                                              4 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _PWM_Write_Out                                        1     1      0      42
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PWMReadDC                                            0     0      0     456
                            ___ltdiv
                             ___tmul
 ---------------------------------------------------------------------------------
 (2) ___tmul                                               9     3      6     404
                                              4 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (2) ___ltdiv                                             10     4      6      52
                                             13 BANK0     10     4      6
                             ___tmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _NegativeAnswer                                       1     1      0   24070
                                             24 BANK0      1     1      0
                _Transmit_LIN_8Bytes
 ---------------------------------------------------------------------------------
 (2) _Transmit_LIN_8Bytes                                  9     1      8   24028
                                             15 BANK0      9     1      8
                __ELINMIntGetPointer
               __ELINMIntSendMessage
 ---------------------------------------------------------------------------------
 (3) __ELINMIntSendMessage                                10     5      5    1950
                                              5 BANK0     10     5      5
              __ELINMIntCalcIDParity
 ---------------------------------------------------------------------------------
 (4) __ELINMIntCalcIDParity                                1     1      0     438
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) __ELINMIntGetPointer                                  2     1      1     500
                                              4 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) _InitMotorStop                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Wait                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Read                                             3     1      2      54
                                              4 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _BVH2_Appl_Layer                                     38    38      0    3894
                                             18 BANK0      6     6      0
                                              0 BANK4     32    32      0
    _Cb1_Current_An___High_node_fcn1
       _Cb34_PWM_Detection_node_fcn1
    _Cb44_Pic_etat_monitor_node_fcn1
        _Cb56_UbatHandling_node_fcn2
                            ___aldiv
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4    1193
                                              4 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     324
                                              4 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     625
                                              4 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _Cb56_UbatHandling_node_fcn2                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Cb44_Pic_etat_monitor_node_fcn1                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Cb34_PWM_Detection_node_fcn1                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Cb1_Current_An___High_node_fcn1                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _interrupt_handler                                    0     0      0     208
                    _ELINMIntHandler
                           _PWM_CTRL
                            _Task1ms
                    _interrrupt_bldc
               _interrupt_PWMCapture
 ---------------------------------------------------------------------------------
 (7) _interrupt_PWMCapture                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _interrrupt_bldc                                      6     6      0     186
                                             12 COMMON     2     2      0
                                              0 BANK0      4     4      0
                           _BLDCWait
                         i1_ADC_Read
                         i1_ADC_Wait
                          i1___lwdiv
                           i1___wmul
                        i1_commutate
 ---------------------------------------------------------------------------------
 (8) i1_commutate                                         12    12      0       0
                                              0 COMMON    12    12      0
 ---------------------------------------------------------------------------------
 (8) i1___wmul                                             6     2      4      56
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (8) i1___lwdiv                                            7     3      4      52
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (8) i1_ADC_Wait                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (8) i1_ADC_Read                                           3     1      2      24
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (8) _BLDCWait                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _Task1ms                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _PWM_CTRL                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _ELINMIntHandler                                      0     0      0      22
             __ELINMIntResetProtocol
 ---------------------------------------------------------------------------------
 (8) __ELINMIntResetProtocol                               1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BVH2_Appl_Layer
     _Cb1_Current_An___High_node_fcn1
     _Cb34_PWM_Detection_node_fcn1
     _Cb44_Pic_etat_monitor_node_fcn1
     _Cb56_UbatHandling_node_fcn2
     ___aldiv
     ___lmul
     ___wmul
   _EOL
     _ADC_Read
     _ADC_Wait
     _InitMotorStop
     _NegativeAnswer
       _Transmit_LIN_8Bytes
         __ELINMIntGetPointer
         __ELINMIntSendMessage
           __ELINMIntCalcIDParity
     _PWMReadDC
       ___ltdiv
         ___tmul (ARG)
       ___tmul
     _PWM_Write_Out
     _Transmit_LIN_8Bytes
       __ELINMIntGetPointer
       __ELINMIntSendMessage
         __ELINMIntCalcIDParity
     ___lwdiv
     ___wmul
     _cksum
     _read_eeprom_data
     _write_eeprom_data
       ___lwdiv (ARG)
   _Get_Analog_Value
     _FILTER_IPhase
     _FILTER_Temp
     _FILTER_Ubat
   _InitMotorRun
     _commutate
   _InitMotorStop
   _PWMReadDC
     ___ltdiv
       ___tmul (ARG)
     ___tmul
   _Receive_Diag
     __ELINMIntGetPointer
     __ELINMIntReceiveMessage
       __ELINMIntSendMessage
         __ELINMIntCalcIDParity
   _SetDiagAlarm
     _PWM_Write_Out
   ___awdiv
     ___wmul (ARG)
   ___wmul
   _clear_timer
   _read_eeprom_data
   _system_init
     _ADC_Init
     _DiagInit
       _PWM_Write_Out
     _EnableMCP201
     _FILTER_Init
       _ADC_Read
       _ADC_Wait
     _I_calibrationInit
       _ADC_Read
       _ADC_Wait
       _read_eeprom_data
     _Oscill_Source_Block
     _PWM_Capture_init
     __ELINMIntInitialize
     _init_bldc
       _InitMotorRun
         _commutate
     _init_ports
       _read_eeprom_data
     _timer_init
       _clear_timer

 _interrupt_handler (ROOT)
   _ELINMIntHandler
     __ELINMIntResetProtocol
   _PWM_CTRL
   _Task1ms
   _interrrupt_bldc
     _BLDCWait
     i1_ADC_Read
     i1_ADC_Wait
     i1___lwdiv
     i1___wmul
     i1_commutate
   _interrupt_PWMCapture

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     181       4        0.0%
BITBANK0            50      0       1       5        1.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     34      4A       6       92.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      50      10      100.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      4      4E      12       97.5%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50     20      3B      14       73.8%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     181      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sun Jan 27 13:22:26 2019

                               EOL@_dcnt_420 0044                                 EOL@_dcnt_421 0045  
                               EOL@_dcnt_413 003D                                 EOL@_dcnt_422 0046  
                               EOL@_dcnt_414 003E                                 EOL@_dcnt_423 0047  
                               EOL@_dcnt_415 003F                                 EOL@_dcnt_424 0048  
                               EOL@_dcnt_416 0040                                 EOL@_dcnt_425 0049  
                               EOL@_dcnt_417 0041                                 EOL@_dcnt_426 004A  
                               EOL@_dcnt_418 0042                                 EOL@_dcnt_427 004B  
                               EOL@_dcnt_419 0043                                 EOL@_dcnt_428 004C  
                               EOL@_dcnt_429 004D                            ?_PWM_Capture_init 0070  
                                          _B 01A0                                            pc 0002  
                                         PL2 1659                                           PL4 1669  
                                         PL6 1677                                           PL8 03D6  
                                         l69 04D1                                           _RD 0CA8  
                                         _WR 0CA9                                 ___awdiv@sign 002F  
                         ??_PWM_Capture_init 0024                                           _pt 005F  
                        ___wmul@multiplicand 0026                             i1___wmul@product 0074  
                   _SIBFS_Pic_etat_monitor_b 00C3             BVH2_Appl_Layer@X_Sb4_Intergrator 0168  
                        __end_of_system_init 044C                                          PL10 1699  
                                        PL20 1EC2                                          PL12 16AA  
                                        PL30 0F9B                                          PL22 16CC  
                                        PL14 16AF                                          PL40 1F1F  
                                        PL32 1EDA                                          PL24 0F85  
                                        PL16 16BE                                          PL50 03E5  
                                        PL42 1F30                                          PL34 1EEB  
                                        PL26 0F92                                          PL18 1EA7  
                                        PL60 16ED                                          PL52 16D4  
                                        PL44 1F40                                          PL36 1EFD  
                                        PL28 03DE                                          PL70 1F73  
                                        PL62 0FBA                                          PL54 0FAE  
                                        PL46 1F50                                          PL38 1F0E  
                                        PL80 0FD6                                          PL72 0FCD  
                                        PL64 0684                                          PL56 16E0  
                                        PL48 1F60                                          PL90 1F8B  
                                        PL82 16FD                                          PL74 1F79  
                                        PL66 1F6A                                          PL58 16E6  
                                        PL92 1F92                                          PL84 1F85  
                                        PL76 16F4                                          PL68 0FC4  
                                        PL94 0FE4                                          PL86 0FDE  
                                        PL78 1F7F                                          PL96 058F  
                                        PL88 1705  BVH2_Appl_Layer@SIBFS_Current_Analysis_low_b 00BF  
                                        PL98 0FEB                                  ?i1_ADC_Read 0070  
                                        l327 1B1C                                          l600 12E5  
                                        l345 1B4A                                          l610 12F3  
                                        l620 131A                                          l604 12EE  
                                        l605 12EC                                          l630 1328  
                                        l614 1315                                          l534 0384  
                                        l615 1313                                          l640 1336  
                                        l624 1323                                          l536 038A  
                                        l625 1321                                          l609 12F5  
                                ?i1_ADC_Wait 0070                                          l650 135D  
                                        l634 1331                                          l635 132F  
                                        l619 131C                                          l660 136B  
                                        l644 1358                                          l645 1356  
                                        l629 132A                                          l670 1379  
                                        l654 1366                                          l590 12D7  
                                        l751 15DA                                          l655 1364  
                                        l639 1338                                          l752 15DE  
                                        l664 1374                                          l584 12D2  
                                        l665 1372                                          l649 135F  
                                        l585 12D0                                          l594 12E0  
                                        l659 136D                                          l595 12DE  
                                        l916 0301                                          l940 04A1  
                                        l669 137B                                          l589 12D9  
                                        l941 049F                                          l950 04B1  
                                        l599 12E7                                          l919 030A  
                                        l951 04AF                                          l945 04A9  
                                        l946 04A7                                          l895 15E2  
                                        _GIE 005F                                          _EOL 112A  
                                        _RC5 0075                                          _PR2 001B  
                                        _sum 012F                             _ui16_IPhase_bldc 0058  
                               __CFG_BORV$LO 0000                                          wreg 0009  
                          _ui16_IPhase1_bldc 013B                           __ELINMIntTFrameMax 01CE  
                          _ui16_IPhase2_bldc 01D4                           __ELINMIntTFrameMin 012D  
                          _ui16_IPhase3_bldc 01D2                    BVH2_Appl_Layer@Cb24_Reset 0233  
                                       PL100 1F98                                         PL110 170B  
                                       PL102 06E0                                         PL120 1FAF  
                                       PL112 0FF2                                         PL104 0596  
                                       PL130 0FFC                                         PL122 1FB4  
                                       PL114 1FA4                                         PL106 068B  
                                       PL140 1FD0                                         PL132 06E6  
                                       PL124 1FB8                                         PL116 0FF8  
                                       PL108 1F9E                                         PL142 1FD5  
                                       PL134 1FC7                                         PL126 1FBD  
                                       PL118 1FAA                                         PL136 1FCC  
                                       PL128 1FC2                                         PL138 06EA  
                               __CFG_LVP$OFF 0000                                         ?_EOL 0070  
                        __ELINMIntTHeaderMax 01CC                          __ELINMIntTHeaderMin 012B  
                    __end_of_interrrupt_bldc 1D47                                         l1011 17E1  
                                       l1012 17E5                                         l1013 17E9  
                                       l1014 17ED                                         l1015 17F2  
                                       l1016 17F6                                         l1017 17FA  
                                       l1018 17FE                                         _C1IE 0495  
                                       l2117 0F29                         __end_of_EnableMCP201 04B6  
                                       l2073 0E50                                         l1611 0961  
                                       l1603 093A                                         l2067 0276  
                                       l1613 0975                                         l1607 095C  
                                       l1616 0982                                         l1368 053B  
                                       l1713 0BD0                                         l1625 0A10  
                                       l1730 0C18                                         l1731 0BF9  
                                       l1804 0E03                                         l1732 0BF4  
                                       l1644 09EA                                         l1733 0BF7  
                                       l1718 0BB1                                         l1582 0907  
                                       l1727 0BE9                                         l1655 0A59  
                                       l1736 0C0D                                         l1761 0C6D  
                                       l1649 0B28                                         l1746 0C3C  
                                       l1690 0AF6                                         l6002 1B51  
                                       l1755 0C64                                         l1595 0935  
                                       l1579 08CF                                         l1852 0F02  
                                       l1596 0923                                         l6100 1B87  
                                       l1749 0C54                                         l1854 0F04  
                                       l1846 0EE9                                         l1942 03D5  
                                       l1855 0F06                                         l1847 0EF8  
                                       l1599 092E                                         l1919 0484  
                                       l1856 0F17                                         l1848 0EEB  
                                       l1792 0D80                                         l1696 0B3C  
                                       l6032 1B64                                         l6008 1B59  
                                       l1849 0EED                                         l6050 1B69  
                                       l6026 1B5C                                         l1796 0D92  
                                       l6124 1B93                                         l6118 1B8B  
                                       l6070 1B74                                         l6046 1B66  
                                       l1975 174F                                         l6056 1B71  
                                       l6240 0392                                         l6138 1B99  
                                       l6146 1B9C                                         l6330 03B9  
                                       l6076 1B7C                                         l6148 1BB0  
                                       l6332 03BC                                         l6340 03C4  
                                       l6094 1B7F                                         l6334 03BE  
                                       l6336 03C1                                         l6328 03B7  
                                       l5902 1A9A                                         l6392 06EE  
                                       l6632 0453                                         l5906 1AA5  
                                       l6650 046B                                         l5940 1AF7  
                                       l6644 0463                                         l6628 044F  
                                       l9070 01CA                                         l6670 050E  
                                       l6662 0502                                         l5942 1AFA  
                                       l5934 1AED                                         l6638 045B  
                                       l9080 01D7                                         l9064 01C1  
                                       l5960 1B0C                                         l5936 1AF1  
                                       l5970 1B22                                         l5938 1AF4  
                                       l6658 0473                                         l9092 01EA  
                                       l5972 1B2F                                         l5964 1B15  
                                       l6694 0532                                         l6686 0526  
                                       l6678 051A                                         l5990 1B42  
                                       l5958 1AFE                                         l9096 01F2  
                                       l9088 01E6                                         l5996 1B48  
                                       _ADON 04E8                                         l9812 0E79  
                                       l9910 0EDC                                         l9840 0EAC  
                                       l9824 0E83                                         _CFGS 0CAE  
                                       l9842 0E97                                         l9834 0EA7  
                                       l9828 0E92                                         l9838 0EAA  
                                       l9934 0F08                                         l9952 0E27  
                                       l9856 0E9E                                         l9936 0F11  
                                       l9928 0EEF                                         l9954 0E2B  
                                       l9882 0EBE                                         l9892 0ECB  
                                       l9896 0ECD                                         l9988 0E5A  
                                       _LATA 010C                                         _LATB 010D  
                                       _LATC 010E                                         _PIE1 0091  
                                       _PIE2 0092                                         _PIE3 0093  
                                       _PEIE 005E                                         u3585 03FF  
                                       u3595 06FA                                         _RCIF 008D  
                                       i1l69 1D61                                         u7705 0F5D  
                                       u6905 01DF                                         _TMR0 0015  
                                       _TMR2 001A                                         _TMR4 0415  
                                       _TMR6 041C                                         _WREN 0CAA  
                                       _Bcnt 00DD                             _ui8_Task_Cont1ms 00D1  
                           _ui8_Task_Cont3ms 0158                             _ui8_Task_Cont5ms 0157  
                           _ui16_PWM_Freq_In 0127                   BVH2_Appl_Layer@Cb24_BadCnt 01C2  
                                       _main 0073                                         fsr0h 0005  
                                       fsr1h 0007                                         indf0 0000  
                                       fsr0l 0004                                         indf1 0001  
                                       fsr1l 0006                                         btemp 007E  
                          _ui8_b_DResLocID_c 0062                          timer_init@ui8_TmrNb 0025  
                           __end_of_ADC_Init 048F                             __end_of_ADC_Read 04E4  
                           __end_of_ADC_Wait 163C                                         start 002B  
                            _ui8_sampleState 00DF                             __end_of_BLDCWait 1EA7  
                     __size_of_PWM_Write_Out 0005                           _ui16_comm_time_max 0131  
                                      S14500 0766                                        S14498 0717  
            __end_of__ELINMIntReceiveMessage 0365                                        ??_EOL 0039  
                                i1_commutate 1D83                                ?_InitMotorRun 0070  
                            __end_of_Task1ms 077F                          __ELINMIntGetPointer 1656  
                              __CFG_PLLEN$ON 0000                                 cksum@counter 0026  
                                      l10006 0F38                                        l10032 0F7C  
                                      l10024 0F68                                        l10016 0F4B  
                                      l10028 0F6E                                        l12120 17A6  
                                      l12130 17AF                                        l12132 17BE  
                                      l12302 1758                                        l12136 17CB  
                                      l12224 027E                                        l13200 14E6  
                                      l12162 04DA                                        l12250 0267  
                                      l12242 0251                                        l13202 14E9  
                                      l13106 1421                                        l13130 147A  
                                      l12316 1770                                        l13132 147C  
                                      l12260 04B8                                        l12254 026C  
                                      l13302 153B                                        l13230 1508  
                                      l13222 1503                                        l13126 1468  
                                      l14120 0CC9                                        l14032 0C4B  
                                      l14016 0C27                                        l12352 023E  
                                      l13304 1543                                        l13224 1506  
                                      l13136 1492                                        l13128 146B  
                                      l12450 1644                                        l14026 0C3A  
                                      l12346 0236                                        l13234 1510  
                                      l13066 1399                                        l12442 0568  
                                      l14124 0CD1                                        l14140 0D3E  
                                      l14116 0CC3                                        l14108 0CB2  
                                      l14036 0C73                                        l13340 15A6  
                                      l13308 154C                                        l13180 14CC  
                                      l13156 14AC                                        l12380 10D9  
                                      l12372 10BB                                        l14300 018F  
                                      l12446 163E                                        l14150 0D8F  
                                      l14126 0CD3                                        l14046 0C5D  
                                      l14038 0C52                                        l13502 08C4  
                                      l12470 171D                                        l13158 14AF  
                                      l13086 13DF                                        l12390 10FB  
                                      l12382 10DD                                        l12374 10BF  
                                      l12438 0565                                        l14310 01A0  
                                      l14136 0D31                                        l14064 0C72  
                                      l13336 159A                                        l12800 038F  
                                      l14232 009C                                        l14216 007A  
                                      l14162 0DE1                                        l14138 0D39  
                                      l14154 0D96                                        l13530 08EF  
                                      l12482 1730                                        l13282 1533  
                                      l13258 1524                                        l13178 14C9  
                                      l13354 15BA                                        l14322 01B0  
                                      l14164 0DED                                        l14084 0C8D  
                                      l14068 0C75                                        l13604 0947  
                                      l13516 08CB                                        l13348 15B8  
                                      l12388 10F7                                        l14166 0DFD  
                                      l13614 095A                                        l12478 172C  
                                      l12814 1162                                        l12806 1152  
                                      l14262 00FB                                        l14168 0E12  
                                      l13536 08F6                                        l13528 08DA  
                                      l12832 1195                                        l14280 0154  
                                      l14264 012A                                        l14098 0CA4  
                                      l13802 0A8F                                        l13650 09A0  
                                      l13570 0910                                        l13554 08F9  
                                      l13474 08A9                                        l12930 1256  
                                      l12826 117D                                        l12818 1167  
                                      l14282 0156                                        l13812 0A9A  
                                      l13740 0A25                                        l13708 09E2  
                                      l13580 0920                                        l13484 08BD  
                                      l13476 08AD                                        l13468 089C  
                                      l12852 11B9                                        l12836 1199  
                                      l12780 036B                                        l13822 0AB6  
                                      l13750 0A3C                                        l13646 0996  
                                      l13638 098C                                        l13726 09F7  
                                      l13558 090C                                        l13486 08C0  
                                      l13478 08B5                                        l12942 126F  
                                      l12934 1263                                        l12854 11C1  
                                      l12838 11A2                                        l13920 0B65  
                                      l13840 0ADA                                        l13752 0A3F  
                                      l13664 09B5                                        l13656 09A8  
                                      l13648 0999                                        l12960 12AC  
                                      l12872 11E9                                        l12792 037E  
                                      l12784 0372                                        l13914 0B57  
                                      l13850 0ADD                                        l13818 0AA7  
                                      l13770 0A5B                                        l13906 0B4A  
                                      l13674 09CA                                        l13666 09B9  
                                      l13658 09AD                                        l13924 0B70  
                                      l13836 0ACD                                        l13676 09CD  
                                      l13668 09BC                                        l12964 12B9  
                                      l12876 11F5                                        l12788 0378  
                                      l13950 0BB5                                        l13862 0AED  
                                      l13790 0A76                                        l13774 0A62  
                                      l13766 0A43                                        l13686 09D7  
                                      l13928 0B7B                                        l13864 0AF3  
                                      l12968 12BE                                        l14496 1B04  
                                      l13970 0BD5                                        l13794 0A84  
                                      l13786 0A72                                        l13778 0A68  
                                      l13980 0BE2                                        l13964 0BC9  
                                      l13948 0BD6                                        l13868 0AFC  
                                      l13884 0B11                                        l13958 0BBD  
                                      l13974 0BD7                                        l13998 0C06  
                                      _C1OUT 088E                              __end_of___aldiv 0F85  
                                      ?_main 0070                              __end_of___awdiv 01F7  
                                      _EEPGD 0CAF                                        u11315 1293  
                            ___awdiv@divisor 002A                                        u11325 12A4  
                                      u12160 0A2E                                        _T1CON 0018  
                                      u12170 0A2F                                        u10475 025E  
                                      u11285 124E                                        _T2CON 001C  
                                      u11821 090B                                        u10685 1725  
                                      _LATB1 0869                                        _LATB2 086A  
                                      _LATC0 0870                                        _LATC1 0871  
                                      _LATC2 0872                                        _LATC3 0873  
                              _InitMotorStop 01F7                                        _LATC4 0874  
                                      _T4CON 0417                                        u12945 0D08  
                                      u12955 0D21                              __end_of___ltdiv 0273  
                                      u12965 0D2C                                        u12975 0D76  
                                      _T6CON 041E                              __end_of___lwdiv 1735  
                                      i1l316 1D33                                        i1l327 1DF3  
                                      i1l263 1BDD                                        i1l345 1E1F  
                                      i1l267 1CF2                                        i1l284 1C56  
                                      i1l970 05F3                                        i1l980 05F0  
                                      i1l964 05B8                                        i1l991 0661  
                                      i1l967 05B6                                        i1l978 05E9  
                            ___awdiv@counter 002E                                        _RCREG 0199  
                           ?_ELINMIntHandler 0070                                        _SENDB 0CF3  
                                      _RCSTA 019D                                        _TMR1H 0017  
                                      _TMR1L 0016                                        _SPBRG 019B  
                          _ui8_BlankingCount 00E3                            EnableMCP201@_dcnt 0024  
                                      _TRISA 008C                                        _TRISB 008D  
                                      _TRISC 008E                                        _TXREG 019A  
                                      _TXSTA 019E                          ___lmul@multiplicand 0028  
                          _ui16_PWM_Freq_mat 0129                       ?__ELINMIntCalcIDParity 0070  
                                      _cksum 1747                         ?__ELINMIntGetPointer 0024  
   BVH2_Appl_Layer@SIBFS_Temperature_Alarm_b 00BD                             __end_of_PWM_CTRL 0766  
               ?_Cb56_UbatHandling_node_fcn2 0070                             __end_ofi1___wmul 1D83  
          BVH2_Appl_Layer@Cb24_oMotorStalled 0142                                        status 0003  
                           __end_of_DiagInit 049B                          i1___wmul@multiplier 0070  
                                      wtemp0 007E                           __size_of_PWMReadDC 003C  
             ??_Cb34_PWM_Detection_node_fcn1 0024                                 __end_ofPL100 1F9E  
                               __end_ofPL110 1710                                 __end_ofPL102 06E6  
                               __end_ofPL120 1FB4                                 __end_ofPL112 0FF8  
                               __end_ofPL104 059C                                 __end_ofPL130 1000  
                               __end_ofPL122 1FB8                                 __end_ofPL114 1FAA  
                               __end_ofPL106 0691                                 __end_ofPL140 1FD5  
                               __end_ofPL132 06EA                                 __end_ofPL124 1FBD  
                               __end_ofPL116 0FFC                                 __end_ofPL108 1FA4  
                               __end_ofPL142 1FD9                                 __end_ofPL134 1FCC  
                               __end_ofPL126 1FC2                                 __end_ofPL118 1FAF  
                               __end_ofPL136 1FD0                                 __end_ofPL128 1FC7  
                               __end_ofPL138 06EE                           __size_ofi1___lwdiv 0025  
                        __size_ofi1_ADC_Read 000E                          __size_ofi1_ADC_Wait 0019  
                             __CFG_MCLRE$OFF 0000                           _ui8_b_DResServID_c 00D8  
                            __initialization 002D                             _ui8_selected_lid 0069  
                BVH2_Appl_Layer@Cb51_Counter 0145                  BVH2_Appl_Layer@Cb19_Counter 00A2  
                             _NegativeAnswer 1735                                  _system_init 0412  
                         _ui8_duty_cycle_mat 00CB                                 __end_of_main 01B7  
                             ??_InitMotorRun 0030                              _PWM_trans_table 1800  
                        __ELINMIntInitialize 053C                         __size_of_clear_timer 0021  
                             ?_InitMotorStop 0070                                       ??_main 01EA  
                       __size_of_FILTER_Init 0019                         __size_of_FILTER_Ubat 006B  
                       __size_of_FILTER_Temp 0029                            ?_read_eeprom_data 0070  
                       _BVH2_Appl_Layer$1210 022B                         _BVH2_Appl_Layer$1211 022C  
                       _BVH2_Appl_Layer$1212 022D                         _BVH2_Appl_Layer$1213 022E  
                       _BVH2_Appl_Layer$1208 0229                         _BVH2_Appl_Layer$1216 0224  
                       _BVH2_Appl_Layer$1209 022A                         _BVH2_Appl_Layer$1218 0226  
                       _BVH2_Appl_Layer$1219 0220                                ?_Receive_Diag 0070  
                       _interrupt_PWMCapture 0691                            ?_Get_Analog_Value 0070  
               __end_of__ELINMIntSendMessage 17DA                  _ui16_NTC_Temp_bldc_mean_cal 01DA  
                         ??_read_eeprom_data 0024                                _PWM_Write_Out 1651  
                                     _ADCON0 009D                           ??_Get_Analog_Value 0030  
                                     _ADCON1 009E                                       ?_cksum 0024  
                      ??__ELINMIntGetPointer 0025                         ?__ELINMIntInitialize 0070  
                                     _CCP1AS 0295                                       _CCP1IE 048A  
                                     _CCP1IF 008A                                       _CCP2IE 0490  
                                     _CCP2IF 0090                                       _CCP3IE 049C  
                                     _CCP3IF 009C                                       _CCP4IE 049D  
                                     _CCP4IF 009D                                       _CCP5IE 049E  
                                     _CCP5IF 009E                                       _ADRESH 009C  
                                     _EEADRH 0192                                       _ADRESL 009B  
                                     _EEADRL 0191                                       _EEDATA 0193  
                                     _CCPR1H 0292                                       _CCPR2H 0299  
                                     _EEDATH 0194                                       _CCPR3H 0312  
                                     _CCPR1L 0291                                       _CCPR4H 0319  
                                     _CCPR2L 0298                                       _EEDATL 0193  
                                     _CCPR3L 0311                                       _CCPR5H 031D  
                                     _CCPR4L 0318                                       _CCPR5L 031C  
                                     _EECON1 0195                                       _EECON2 0196  
                           ___awdiv@dividend 002C                                    ADC_Read@i 0026  
                                     _ANSELA 018C                                       _ANSELB 018D  
                           ?_interrrupt_bldc 0070                                ?_SetDiagAlarm 0070  
                                     i1l1006 0672                                       i1l1390 06A5  
                                     i1l1387 0692                                       i1l7030 1DCE  
                                     i1l7032 1DD1                                       i1l7024 1DC4  
                                     i1l7122 1E39                                       i1l7050 1DE3  
                                     i1l7026 1DC8                                       i1l8100 075D  
                                     i1l7140 1E3E                                       i1l7116 1E31  
                                     i1l7060 1DF9                                       i1l7028 1DCB  
                                     i1l7214 1E68                                       i1l7062 1E04  
                                     i1l7054 1DEC                                       i1l7208 1E60  
                                     i1l7160 1E49                                       i1l7136 1E3B  
                                     i1l7080 1E17                                       i1l7048 1DD5  
                                     i1l8202 064E                                       i1l7146 1E46  
                                     i1l7228 1E6E                                       i1l7092 1E26  
                                     i1l7236 1E71                                       i1l8220 069A  
                                     i1l8206 0658                                       i1l8134 05CE  
                                     i1l8126 05C3                                       i1l7190 1E5C  
                                     i1l7166 1E51                                       i1l7238 1E85  
                                     i1l7086 1E1D                                       i1l8208 065A  
                                     i1l8160 05FC                                       i1l7184 1E54  
                                     i1l8232 06D3                                       i1l8138 05D6  
                                     i1l7098 1E2E                                       i1l8172 0614  
                                     i1l8148 05E6                                       i1l8228 06D1  
                            _ui8_PWM_FreqCnt 00C7                                       i1l8158 05FA  
                                     i1l8192 063B                                       i1l8176 061D  
                                     i1l8194 063D                                       i1l8178 0620  
                                     i1l8188 0631                                       i1l8198 0645  
                                     _INTCON 000B                                       i1l6988 1D69  
                                     i1l6996 1D8E                                       _FVRCON 0117  
                         _ui8_Task_Cont100ms 00C8            __ELINMIntReceiveMessage@_ELINM_id 002F  
                                     _OSCCON 0099                ??_Cb56_UbatHandling_node_fcn2 0024  
                                     _TMR0IE 005D                                       _TMR1IE 0488  
                                     _TMR1IF 0088                                       _TMR2IE 0489  
                                     _TMR2IF 0089                                       _TMR4IE 0499  
                                     _TMR4IF 0099                                       _SPBRGH 019C  
                                     _TMR6IE 049B                                       _TMR6IF 009B  
                                     _WDTCON 0097         BVH2_Appl_Layer@Sb1_Logical_Operator1 023B  
       BVH2_Appl_Layer@Sb1_Logical_Operator2 0228         BVH2_Appl_Layer@Sb1_Logical_Operator3 0234  
       BVH2_Appl_Layer@Sb1_Logical_Operator5 0235                       __end_of_NegativeAnswer 1747  
                                  ??_Task1ms 0070                                   _MotorFlags 0063  
 BVH2_Appl_Layer@X_Sb4_Intergrator_TriggerIn 016C                       __ELINMIntMessageBuffer 0250  
                                     ___lmul 0E4C                                    ??___aldiv 002C  
                                     ___tmul 0273                                       ___wmul 163C  
                                  ??___awdiv 002E                    BVH2_Appl_Layer@Sb4_PI_sum 023E  
                                  ??___ltdiv 0033                                    ??___lwdiv 0028  
                            _ui8_PWMinDC_sav 00C6                             ___awdiv@quotient 0030  
                                     _my_msg 01B0                            _write_eeprom_data 15C8  
          BVH2_Appl_Layer@Cb24_oStalledAlarm 0141                            __end_of_PWMReadDC 0241  
                             ??_Receive_Diag 0032                            __end_ofi1___lwdiv 1FFE  
                         EOL@ui8_b_DResB0_RD 0050                           EOL@ui8_b_DResB1_RD 0051  
                         EOL@ui8_b_DResB2_RD 0052                           EOL@ui8_b_DResB3_RD 0053  
                      ?_interrupt_PWMCapture 0070                           EOL@ui8_b_DResB4_RD 004F  
                         EOL@ui8_b_DResB5_RD 004E                           ?_write_eeprom_data 002B  
                      __size_of_EnableMCP201 001B                                    ?_ADC_Init 0070  
                                  ?_ADC_Read 0024                                    ?_ADC_Wait 0070  
                             ?_PWM_Write_Out 0070                                    ?_BLDCWait 0070  
                   __size_of_BVH2_Appl_Layer 0580                        ??__ELINMIntInitialize 0024  
                             ??_SetDiagAlarm 0025                          ??_write_eeprom_data 002C  
           __size_of__ELINMIntReceiveMessage 0015             BVH2_Appl_Layer@Cb9_oCurrentAlarm 013D  
                    __end_of__initialization 0070                        __end_of_FILTER_IPhase 0412  
                    __end_of_PWM_trans_table 1865                     ??__ELINMIntResetProtocol 0070  
                            ?_NegativeAnswer 0070                          _ui8_duty_cycle_BLDC 0064  
                             __pcstackCOMMON 0070                              _ui8_PWMoutvalue 0155  
                               __pidataBANK0 0000                                 __pidataBANK1 0000  
                               __pidataBANK2 0000                           _ui16_dryRun_Thresh 01E8  
                              __end_of_cksum 1775                                 _EnableMCP201 049B  
                            ??_InitMotorStop 0024         __size_of_Cb56_UbatHandling_node_fcn2 0035  
     __ELINMIntGetPointer@_ELINMInt_position 0024                    __end_of_write_eeprom_data 15E1  
            __ELINMIntSendMessage@_ELINM_chk 002D              __ELINMIntSendMessage@_ELINM_idr 002A  
                                 __end_ofPL2 1669                                   __end_ofPL4 1677  
                                 __end_ofPL6 1699                                   __end_ofPL8 03DE  
            __ELINMIntSendMessage@_ELINM_tid 002B                                    ?_PWM_CTRL 0070  
                               ??i1_ADC_Read 0072                                    ?i1___wmul 0070  
                               ??i1_ADC_Wait 0070                                    ?_DiagInit 0070  
                      Transmit_LIN_8Bytes@B0 002F                        Transmit_LIN_8Bytes@B1 0030  
                      Transmit_LIN_8Bytes@B2 0031                        Transmit_LIN_8Bytes@B3 0032  
                      Transmit_LIN_8Bytes@B4 0033                        Transmit_LIN_8Bytes@B5 0034  
                      Transmit_LIN_8Bytes@B6 0035                        Transmit_LIN_8Bytes@B7 0036  
                      Transmit_LIN_8Bytes@ID 0037                            _Cb1_oCurrentAlarm 0150  
                                 ??_ADC_Init 0024                                   ??_ADC_Read 0026  
                                 ??_ADC_Wait 0024                        _ui16_Speed_demand_mat 01C8  
                                 ??_BLDCWait 0070                  __end_of_Oscill_Source_Block 04EA  
                  __size_of_PWM_Capture_init 0052                         __ELINMIntMessageSize 00CF  
                         _ui16_Duty_Cycle_In 0160                                      ??_cksum 0026  
           write_eeprom_data@ui8_adress_data 002B                                 _analog_value 00BA  
                __end_of_Transmit_LIN_8Bytes 1623                         __end_of_InitMotorRun 03B5  
                         __size_of_commutate 0117                                   __pbssBANK0 0054  
                                 __pbssBANK1 00A0                                   __pbssBANK2 0120  
                                 __pbssBANK3 01A0                                   __pbssBANK4 0240  
                    _ui8_Duty_Cycle_In_Ratio 0153                           __size_of_init_bldc 0023  
                       _bool_ControlLoopMode 00C9                           __end_ofi1_ADC_Read 1D6E  
                         __end_ofi1_ADC_Wait 1D60                                   __pmaintext 0073  
                       __ELINMIntSendMessage 1775                                      ?___lmul 0024  
                            _Cb34_oPWM_Alarm 014E                                      ?___tmul 0024  
                                    ?___wmul 0024                                 ?i1_commutate 0070  
                                 __pintentry 0004                                      _CM1CON0 0111  
                                    _CM1CON1 0112                                      _CCP1ASE 14AF  
                                    _CCP1CON 0293                                      _CCP2CON 029A  
                                    _CCP3CON 0313                                      i1S14502 072B  
                                    _CCP4CON 031A                                      i1S14506 073F  
    __end_of_Cb1_Current_An___High_node_fcn1 0E37     __size_of_Cb1_Current_An___High_node_fcn1 001C  
          ??_Cb1_Current_An___High_node_fcn1 0024             ?_Cb1_Current_An___High_node_fcn1 0070  
            _Cb1_Current_An___High_node_fcn1 0E1B                                      _CCP5CON 031E  
                      _bool_CPU_TempRedAlarm 015B                                      _BAUDCON 019F  
                             ___lmul@product 002C                                   ??_PWM_CTRL 0070  
                                 ??i1___wmul 0074                       ??_interrupt_PWMCapture 0070  
                                 _ui8_Ki_mat 01CA                                      u1074_25 1FEE  
                                    u1083_25 1C2D                                      u1076_25 1BBD  
                            ??_PWM_Write_Out 0024                                   _ui8_Kp_mat 015D  
                                    i1l12520 1FF5                                      i1l12512 1FE6  
                                    i1l12600 1C12                                      i1l14200 0020  
                                    i1l12524 1FF9                                      i1l12700 1CC1  
                                    i1l12620 1C38                                      i1l12612 1C2F  
                                    i1l12702 1CC9                                      i1l12542 1BD5  
                                    i1l12534 1BC1                                      i1l14206 0026  
                                    i1l12560 1BF8                                      i1l12538 1BCB  
                                    i1l12492 1D76                                      i1l12708 1CD5  
                                    i1l12652 1C50                                      i1l12548 1BE1  
                                    i1l12724 1CE5                                      i1l12750 1D22  
                                    i1l12638 1C41                                      i1l12558 1BF5  
                                    i1l12488 1D70                                      i1l14504 1DDB  
                                    i1l12744 1D17                                      i1l12752 1D26  
                                    i1l12672 1C5B                                      i1l12770 1D45  
                                    i1l12754 1D28                                      i1l12690 1C9B  
                                    i1l12682 1C7C                                      i1l14194 0019  
                                    i1l12748 1D20                                      i1l12684 1C80  
                                    i1l14188 0012                                      i1l12694 1CB2  
                                    i1l12678 1C65                                      i1l12768 1D40  
                                    i1l12696 1CB4                                      i1l12688 1C97  
                                    i1l12698 1CB5                                   ??_DiagInit 0025  
                    ??__ELINMIntCalcIDParity 0024                                      _PWM1CON 0294  
                                 _comm_state 00E4                  BVH2_Appl_Layer@Cb9_StateCnt 00C0  
                          ??_BVH2_Appl_Layer 0032                    _ui16_Speed_demand_mat_Max 01C6  
                  _ui16_Speed_demand_mat_min 01C4              __size_of__ELINMIntResetProtocol 000F  
                                    _Task1ms 077C                         __end_of_Receive_Diag 0350  
                      ?__ELINMIntSendMessage 0025                                 ?_system_init 0070  
                                    ___aldiv 0F19                      BVH2_Appl_Layer@Sb3_Sum1 023C  
                                    ___awdiv 01B7                              __size_of___lmul 0025  
                            __size_of___tmul 001D                              __size_of___wmul 0015  
                                    ___ltdiv 0241                                      ___lwdiv 1710  
                       __end_of_SetDiagAlarm 0392                            __end_of_commutate 1BB1  
                 __size_of_write_eeprom_data 0019                                 _ui8_CompFlag 00DE  
                                 _init_ports 0554                                      __ptext1 0412  
                                    __ptext2 044C                                      __ptext3 03B5  
                                    __ptext4 0554                                      __ptext5 056C  
                                    __ptext6 0392                                      __ptext7 1A9A  
                                    __ptext8 053C                                      __ptext9 04EA  
                        _phase_delay_counter 01D6                                      _filter1 01E0  
                                    _filter3 01DE                                 __size_of_EOL 0493  
                          i1___lwdiv@divisor 0070                            __end_of_init_bldc 058F  
                          i1___lwdiv@counter 0074                                _ui16_Temp_cal 01E2  
                           ___aldiv@dividend 0028                   BVH2_Appl_Layer@Sb2_Switch2 0239  
                 BVH2_Appl_Layer@Sb2_Switch5 0231                               __ELINMIntRXCRC 01D0  
                                    clrloop0 0777                      __ELINMIntReceiveMessage 0350  
                                    _wkpoint 00EE                         end_of_initialization 0070  
                             __ELINMIntSpace 015E                     __size_of_ELINMIntHandler 00D9  
         BVH2_Appl_Layer@SIBFS_Dry_Running_b 00BE         BVH2_Appl_Layer@SIBFS_Motor_Stalled_b 00A0  
                     __ELINMIntRXMessageSize 015F                         _ui16_fir_IPhase_mean 0137  
                  __size_of_read_eeprom_data 000B                    __size_of_Get_Analog_Value 0005  
                           ___ltdiv@dividend 0030                             __CFG_CLKOUTEN$ON 0000  
                              ??_clear_timer 0024                             ___aldiv@quotient 002E  
            read_eeprom_data@ui8_adress_data 0025                        i1___wmul@multiplicand 0072  
                              ??_FILTER_Init 0027                                ??_FILTER_Ubat 0024  
                              ??_FILTER_Temp 0024                         _Cb56_odFixedValueSel 00C1  
                                 _timer_init 044C               PWM_Write_Out@ui8_DutyCycle_Out 0024  
                      _ui16_IPhase1_bldc_cal 0166                        EnableMCP201@_dcnt_712 0025  
                      EnableMCP201@_dcnt_713 0026                  __end_of__ELINMIntGetPointer 1659  
                     __ELINMIntResetProtocol 0675                        _ui16_IPhase2_bldc_cal 0164  
                           __CFG_FOSC$INTOSC 0000                        __size_of_InitMotorRun 0023  
                        _ui16_Current_Thresh 01E6                            NegativeAnswer@LID 0038  
                           _PWM_Capture_init 04EA                             ___ltdiv@quotient 0033  
                                  _PWMReadDC 0205                        _ui16_IPhase3_bldc_cal 0162  
                          __size_of_ADC_Init 000A                            __size_of_ADC_Read 0015  
                              _ui16_step_cnt 00B8                                    i1___lwdiv 1FD9  
                          __size_of_ADC_Wait 0019                            __size_of_BLDCWait 0021  
                                 _windowPtr1 00E7                             _ui8_BattVolt_mat 00B0  
                           ??_NegativeAnswer 0038         BVH2_Appl_Layer@Sb2_Logical_Operator2 0236  
                     ??__ELINMIntSendMessage 002A                     __size_of_interrrupt_bldc 0196  
                          __ELINMIntReadBack 00CE                              _ui8_ResetMatlab 00EF  
                               _InitMotorRun 0392                               __end_of___lmul 0E71  
                     _ui16_phase_advancement 00B6                               __end_of___tmul 0290  
                             __end_of___wmul 1651                                  ?_init_ports 0070  
                       __size_ofi1_commutate 0103                          __end_of_clear_timer 03D6  
                              __pbitbssBANK0 0340                  __end_of__ELINMIntInitialize 0554  
                          __size_of_PWM_CTRL 0013                                  i1ADC_Read@i 0072  
                                __end_ofPL10 16AA                                  __end_ofPL20 1EDA  
                                __end_ofPL12 16AF                                  __end_ofPL30 0FAE  
                                __end_ofPL22 16D4                                  __end_ofPL14 16BE  
                                __end_ofPL40 1F30                                  __end_ofPL32 1EEB  
                                __end_ofPL24 0F92                                  __end_ofPL16 16CC  
                                __end_ofPL50 03EF                                  __end_ofPL42 1F40  
                                __end_ofPL34 1EFD                                  __end_ofPL26 0F9B  
                                __end_ofPL18 1EC2                                  __end_ofPL60 16F4  
                                __end_ofPL52 16E0                                  __end_ofPL44 1F50  
                                __end_ofPL36 1F0E                                  __end_ofPL28 03E5  
                                __end_ofPL70 1F79                                  __end_ofPL62 0FC4  
                                __end_ofPL54 0FBA                                  __end_ofPL46 1F60  
                                __end_ofPL38 1F1F                                  __end_ofPL80 0FDE  
                                __end_ofPL72 0FD6                                  __end_ofPL64 068B  
                                __end_ofPL56 16E6                                  __end_ofPL48 1F6A  
                                __end_ofPL90 1F92                                  __end_ofPL82 1705  
                                __end_ofPL74 1F7F                                  __end_ofPL66 1F73  
                                __end_ofPL58 16ED                                  __end_ofPL92 1F98  
                                __end_ofPL84 1F8B                                  __end_ofPL76 16FD  
                                __end_ofPL68 0FCD                                  __end_ofPL94 0FEB  
                                __end_ofPL86 0FE4                                  __end_ofPL78 1F85  
                                __end_ofPL96 0596                                  __end_ofPL88 170B  
                                __end_ofPL98 0FF2             __ELINMIntSendMessage@_ELINM_fmax 0028  
           __ELINMIntSendMessage@_ELINM_fmin 0026                          start_initialization 002D  
                          __size_ofi1___wmul 0015                    ??__ELINMIntReceiveMessage 0031  
           __ELINMIntSendMessage@_ELINM_size 0025                                  __end_of_EOL 15BD  
                        __end_of_FILTER_Init 04CF                          __end_of_FILTER_Ubat 0300  
                        __end_of_FILTER_Temp 0717                            __size_of_DiagInit 000C  
                                 ?_PWMReadDC 0070                                    _ErrorCode 00CC  
                                 ?i1___lwdiv 0070          __end_of_Cb56_UbatHandling_node_fcn2 0F19  
                _Cb56_UbatHandling_node_fcn2 0EE4                               _ui8_IPhase_sel 00E2  
                               _Cb1_StateCnt 00A6                        __size_of_Receive_Diag 0050  
                             Receive_Diag@id 0033                            ??_ELINMIntHandler 0071  
                      __size_of_SetDiagAlarm 002D                      _ui16_NTC_Temp_bldc_mean 0135  
                             _ui8_PWM_dc_mat 005E                                     ??___lmul 002C  
                                   ??___tmul 002A                                     ??___wmul 0028  
                                __pdataBANK0 0069                                  __pdataBANK1 00E8  
                                __pdataBANK2 0168                   read_eeprom_data@ui8_adress 0024  
                       __size_of_system_init 003A                                 _Cb1_oShutoff 014F  
                                ?_timer_init 0070                               ___tmul@product 002A  
                      __end_of_InitMotorStop 0205                                     EOL@_dcnt 003C  
                     __size_of_FILTER_IPhase 0023                              _ui8_Pulse_State 0154  
                                  ___latbits 0002                              _BVH2_Appl_Layer 089B  
                               _Receive_Diag 0300                                __pcstackBANK0 0020  
                              __pcstackBANK3 01EA                                __pcstackBANK4 0220  
             __size_of__ELINMIntCalcIDParity 0026                __end_of__ELINMIntCalcIDParity 1800  
                          _bool_MotorStalled 00DA                                 _SetDiagAlarm 0365  
               __size_of_Oscill_Source_Block 0006                          __size_of_init_ports 0018  
                           _read_eeprom_data 15BD                                    __pnvBANK1 00EF  
                                  __pnvBANK3 01E6               BVH2_Appl_Layer@Cb51_oTempAlarm 0140  
                           _Get_Analog_Value 0290                 __size_of_Transmit_LIN_8Bytes 0042  
                                   ?_Task1ms 0070                             ___lwdiv@dividend 0026  
                                _clear_timer 03B5                                     ?___aldiv 0024  
              __ELINMIntSendMessage@_ELINM_i 002C                                     ?___awdiv 002A  
                                   ?___ltdiv 002D                                     ?___lwdiv 0024  
                      _bool_HighCurrentAlarm 00D9                         clear_timer@ui8_TmrNb 0024  
                          ??_interrrupt_bldc 007C                _SIBFS_Current_Analysis_High_b 00C5  
                             _ui8_UPhase_sel 00E1                               _bool_UbatAlarm 015A  
                                _FILTER_Init 04B6                                  _FILTER_Ubat 0295  
                                _FILTER_Temp 06EE                                    _comm_time 005A  
                                  __pswtext1 0717                                    __pswtext2 0766  
                                  __pswtext3 072B                                    __pswtext4 073F  
                         _Cb34_oPWM_SC_Alarm 014D                            _interrupt_handler 0004  
                                  _ict_stamp 016F                              _ui16_Ubemf_bldc 00B4  
                                  _commutate 1A9A                        _SIBFS_PWM_Detection_b 00C4  
                __ELINMIntResetProtocol@code 0070                                     _ADC_Init 0485  
                                   _ADC_Read 04CF                __size_of_interrupt_PWMCapture 004F  
                       _bool_DryRunningAlarm 00DB                                     _ADC_Wait 1623  
                         ?_interrupt_handler 0070                        __end_of_PWM_Write_Out 1656  
                                   _BLDCWait 1E86                                  ??_PWMReadDC 0037  
                           __CFG_WDTE$SWDTEN 0000                            _I_calibrationInit 10A1  
                           ___lwdiv@quotient 0029                                  ??i1___lwdiv 0074  
                                  _init_bldc 056C                               __size_of_cksum 002E  
    BVH2_Appl_Layer@SIBFS_Dry_RunningAlarm_b 005C                           ?_I_calibrationInit 0070  
                        ??_interrupt_handler 007E                        _Cb56_oUbat_Alarm_High 0148  
                            ___aldiv@divisor 0024                              ___aldiv@counter 002C  
                             ___wmul@product 0028                          __size_of_timer_init 0039  
                                  clear_ram0 0776                                _FILTER_IPhase 03EF  
          __ELINMIntGetPointer@_ELINMInt_tag 0025                          ??_I_calibrationInit 0027  
                            ___ltdiv@divisor 002D                               _Cb34_odPumpOff 014A  
                            ___ltdiv@counter 0036                                     _GO_nDONE 04E9  
                   __end_of_PWM_Capture_init 053C                                  _ui8_failure 016E  
                                   _PSTR1CON 0296                      ?__ELINMIntResetProtocol 0070  
                  __end_of_interrupt_handler 002B                      __end_of_BVH2_Appl_Layer 0E1B  
                                   _PWM_CTRL 0753                               _ui8_b_DResB0_c 0061  
                             _ui8_b_DResB1_c 00D7                               _ui8_b_DResB2_c 00D6  
                             _ui8_b_DResB3_c 00D5                               _ui8_b_DResB4_c 00D4  
                          ___wmul@multiplier 0024                                     i1___wmul 1D6E  
                                 ?_commutate 0070                                    cksum@addr 002A  
                    interrrupt_bldc@ui32_tmp 0020                                     _DiagInit 048F  
                  __end_of_I_calibrationInit 112A                          ___tmul@multiplicand 0027  
                        _ui16_fir_Bat_mittel 0139                    _ui8_fixed_start_speed_mat 01D8  
                      __ELINMIntSleepTimeout 01BE                                   ?_init_bldc 0070  
                          ___lmul@multiplier 0024                               _ui16_Capt_Val0 00AC  
                             _ui16_Capt_Val1 00AA                               _ui16_Capt_Val2 00A8  
                             _ui16_I_cal_Ph1 00EC                               _ui16_I_cal_Ph2 00EA  
                             _ui16_I_cal_Ph3 00E8                             __ELINMIntStatus1 00D0  
                             ?_FILTER_IPhase 0070                           _bool_CPU_TempAlarm 00DC  
                           _ui16_mat_Current 00AE                             __size_of_Task1ms 0003  
                       _SIBFS_UbatHandling_b 00C2                      _Cb34_odFixedLowValueSel 014C  
             __end_of__ELINMIntResetProtocol 0684                                ?_EnableMCP201 0070  
                   BVH2_Appl_Layer@Sb2_Error 0237                             __size_of___aldiv 006C  
                           __size_of___awdiv 0040                BVH2_Appl_Layer@Cb19_oDryRun55 0144  
              BVH2_Appl_Layer@Cb19_oDryRun66 0143                             __size_of___ltdiv 0032  
                           __size_of___lwdiv 0025                                 ??_init_ports 0026  
                          _ui8_lastTaskvalue 0156                             _ui16_mat_inpTemp 0125  
                             _ui8_StartupPWM 00E5                         _bool_PWMin_err_Alarm 015C  
              __ELINMIntMessageBufferPointer 00CD                                     _checksum 01B8  
                         _Cb1_RestartCounter 0151             BVH2_Appl_Layer@Cb14_oDryRunAlarm 00BC  
                         _ui16_NTC_Temp_bldc 01E4                              ___lwdiv@divisor 0024  
                             _Cb56_odPumpOff 0147                              ___lwdiv@counter 0028  
                                   __ptext10 04E4                                     __ptext11 10A1  
                                   __ptext20 0290                                     __ptext12 04B6  
                                   __ptext21 0295                                     __ptext13 049B  
                                   __ptext30 0205                                     __ptext22 06EE  
                                   __ptext14 048F                                     __ptext31 0273  
                                   __ptext23 03EF                                     __ptext15 0485  
                                   __ptext40 04CF                                     __ptext32 0241  
                                   __ptext24 112A                                     __ptext16 01B7  
                                   __ptext41 089B                                     __ptext33 1735  
                                   __ptext25 15C8                                     __ptext17 0365  
                                   __ptext50 0691                                     __ptext42 163C  
                                   __ptext34 15E1                                     __ptext26 15BD  
                                   __ptext18 0300                                     __ptext51 1BB1  
                                   __ptext43 0E4C                                     __ptext35 1775  
                                   __ptext27 1747                                     __ptext19 0350  
                                   __ptext60 059C                                     __ptext52 1D83  
                                   __ptext44 0F19                                     __ptext36 17DA  
                                   __ptext28 1710                                     __ptext61 0675  
                                   __ptext53 1D6E                                     __ptext45 0EE4  
                                   __ptext37 1656                                     __ptext29 1651  
                                   __ptext54 1FD9                                     __ptext46 0E37  
                                   __ptext38 01F7                                     __ptext55 1D47  
                                   __ptext47 0E71                                     __ptext39 1623  
                                   __ptext56 1D60                                     __ptext48 0E1B  
                                   __ptext57 1E86                                     __ptext58 077C  
                                   __ptext59 0753                              _ELINMIntHandler 059C  
               __size_of__ELINMIntGetPointer 0003                               _ui16_Ubat_bldc 0066  
                    _bool_mat_currAlarm_bldc 00CA                 BVH2_Appl_Layer@Cb14_StateCnt 0123  
                              _Cb44_StateCnt 00A4                           i1___lwdiv@dividend 0072  
              BVH2_Appl_Layer@Cb51_odPumpOff 013E                                __size_of_main 0144  
                                 _Cb34_idPWM 005D                                     _phaseCal 00D3  
                         __end_of_init_ports 056C                                  _inputArray1 0240  
                             _ui16_Speed_mat 0056                 BVH2_Appl_Layer@Cb24_StateCnt 0054  
                BVH2_Appl_Layer@Sb3_Product1 022F                __size_of__ELINMIntSendMessage 0065  
                              ??i1_commutate 0070                               ??_EnableMCP201 0024  
                                   int$flags 007E            BVH2_Appl_Layer@Cb51_oTempRedAlarm 013F  
                              _ui8_Ubemf_sel 00E0                                _Cb44_oShutoff 0149  
                 __size_of_interrupt_handler 0027                                     cksum@sum 0028  
                           ?_BVH2_Appl_Layer 0070                                 ??_timer_init 0025  
                        _Oscill_Source_Block 04E4                           i1___lwdiv@quotient 0075  
                                 i1_ADC_Read 1D60                                   i1_ADC_Wait 1D47  
                                ??_commutate 0024                              __ELINMIntStatus 0060  
                   __end_of_read_eeprom_data 15C8                     __end_of_Get_Analog_Value 0295  
                        _Transmit_LIN_8Bytes 15E1                   __size_of_I_calibrationInit 0089  
                           _ui8_given_supply 00D2      __end_of_Cb44_Pic_etat_monitor_node_fcn1 0E4C  
   __size_of_Cb44_Pic_etat_monitor_node_fcn1 0015            ??_Cb44_Pic_etat_monitor_node_fcn1 0024  
           ?_Cb44_Pic_etat_monitor_node_fcn1 0070              _Cb44_Pic_etat_monitor_node_fcn1 0E37  
       __end_of_Cb34_PWM_Detection_node_fcn1 0EE4        __size_of_Cb34_PWM_Detection_node_fcn1 0073  
               _Cb34_PWM_Detection_node_fcn1 0E71                                  ??_init_bldc 0030  
               __size_of__ELINMIntInitialize 0018                                     intlevel1 0000  
        __ELINMIntReceiveMessage@_ELINM_size 0030                             _rising_bemf_flag 0340  
                            ??_FILTER_IPhase 0024                    _bool_PWMin_Freq_err_Alarm 0159  
                write_eeprom_data@ui8_adress 002C                         ?_Oscill_Source_Block 0070  
                            _interrrupt_bldc 1BB1                           __end_of_timer_init 0485  
                       ?_Transmit_LIN_8Bytes 002F                                 ?_clear_timer 0070  
                      _bool_start_demand_mat 00E6                                ??_system_init 0030  
                          _ui8_PWMin_failCnt 0152                   PWM_Capture_init@ui8_CCP_Nb 0024  
                    __size_of_NegativeAnswer 0012                            ___tmul@multiplier 0024  
                               ?_FILTER_Init 0070                                 ?_FILTER_Ubat 0070  
                               ?_FILTER_Temp 0070                                __pstringtext1 1800  
                   ?__ELINMIntReceiveMessage 002F                                   _OPTION_REG 0095  
                    __end_of_ELINMIntHandler 0675           __ELINMIntReceiveMessage@_ELINM_tag 0031  
                        __end_ofi1_commutate 1E86                                 ___aldiv@sign 002D  
BVH2_Appl_Layer@Sb1_BVH2_Appl_Layer_FirstRun 016D                ?_Cb34_PWM_Detection_node_fcn1 0070  
                      __ELINMIntCalcIDParity 17DA           BVH2_Appl_Layer@Cb24_RestartCounter 0146  
                      ??_Oscill_Source_Block 0024                         _Cb34_odFixedValueSel 014B  
           __ELINMIntCalcIDParity@ELINM_idtr 0024                              _ui8_error_Flags 0065  
                            _ui8_current_cal 0120                        ??_Transmit_LIN_8Bytes 0037  
                     __size_of_InitMotorStop 000E                 __end_of_interrupt_PWMCapture 06E0  
                             _ui16_speed_fil 00B2                               _ui16_speed_rar 0133  
                              _filterTempNTC 01DC  
